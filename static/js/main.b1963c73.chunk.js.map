{"version":3,"sources":["utils/utils.js","lib/web3js/config/env.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/database.js","lib/web3js/utils.js","lib/web3js/factory/web3.js","lib/web3js/api/walletApi.js","lib/web3js/contract/contract.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/api/databaseApi.js","lib/web3js/api/apiResultCache.js","lib/web3js/api/contractApi.js","lib/web3js/api/tradeHistoryApi.js","lib/polyfill/numberPolyfill.js","App.js","model/Wallet.js","model/IndexPrice.js","index.js","utils/LoadableComponent.js"],"names":["deriNatural","value","base","BigNumber","times","repeat","div","bg","formatAddress","address","substr","formatBalance","balance","toFixed","DeriEnv","_deriEnv","get","set","Error","ChainProviderUrls","provider_urls","chainId","getContractAddressConfig","env","pool","bToken","pToken","lToken","dToken","MiningVault","initialBlock","bTokenSymbol","symbol","unit","getSlpContractAddressConfig","console","log","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","max","value1","value2","gte","toChecksumAddress","Web3","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","naturalWithPercentage","sd","toString","deriToNatural","deriToString","hasInvalidArgsValue","args","some","i","isNaN","checkHttpServerIsAlive","url","a","fetch","ok","getAliveHttpServer","urls","length","MAX_VALUE","getNetworkName","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","filter","c","p","bTokenAddress","pTokenAddress","lTokenAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getDeriContractAddress","Deri","Wormhole","getDeriContractAddressConfig","deriAddress","wormholeAddress","getOracleUrl","addSymbolParam","getBTCUSDPrice","priceResponse","json","priceResponseJson","price","getOracleInfo","res","metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","web3Factory","web3InstanceMap","Object","keys","includes","providerUrl","chains","item","err","getChainProviderUrl","providers","HttpProvider","connectWallet","handleChainChanged","handleAccountChanged","request","method","accounts","account","Array","isArray","on","location","reload","success","error","getUserWalletBalance","walletAddress","eth","getBalance","fromWei","MAX_GAS_AMOUNT","Contract","contractAddress","isProvider","this","accountAddress","contract","methods","call","gas","estimateGas","from","parseInt","tx","self","_transactionReceipt","resolve","reject","getTransactionReceipt","receipt","setTimeout","status","errorMessage","Promise","all","_estimatedGas","getGasPrice","txRaw","to","numberToHex","data","encodeABI","params","_getTransactionReceipt","calculateLiquidityUsed","tradersNetVolume","multiplier","liquidity","poolMarginRatio","abs","calculateFundingRate","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","blockNumbers","1","56","128","3","97","256","getAnnualBlockNumber","calculateShareValue","lTokenTotalSupply","eq","calculateMaxRemovableShares","lTokenBalance","tradersNetCost","minPoolMarginRatio","shareValue","removable","plus","minus","lte","calculateEntryPrice","volume","cost","calculateMarginHeld","minInitialMarginRatio","calculatePnl","calculateMaxWithdrawMargin","margin","held","pnl","calculateLiquidationPrice","minMaintenanceMarginRatio","tmp","gt","isOrderValid","newVolume","amount","minMargin","poolMaxVolume","negated","message","POOL_ABI","PerpetualPool","_call","defaultValue","result","cumuFundingRate","cumuFundingRateBlock","feeRatio","minAddLiquidity","redemptionFeeRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","priceDelayAllowance","oracle","signed","timestamp","v","r","s","gasPrice","getStateValues","getParameters","args1","fundingRatePerBlock","liquidityUsed","args2","_transactPool","transaction","blockNumber","getBlock","eventName","fromBlock","events","getPastEvents","toBlock","es","e","push","CONTRACT_ABI","BTokenContract","allowance","_transact","_balance","decimals","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","_init","keyArray","updateProviderUrl","getValues","DatabaseWormholeContract","MiningVaultPool","SlpPool","ClpPool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseFactory","databaseInstanceMap","key","database","perpetualPoolFactory","perpetualPoolInstanceMap","perpetualPool","bTokenFactory","bTokenInstanceMap","pTokenFactory","pTokenInstanceMap","lTokenFactory","lTokenInstanceMap","miningVaultPoolFactory","mVaultInstanceMap","mVault","getUserInfo","slpPoolInstanceMap","clpPoolInstanceMap","deriInstanceMap","wormholeInstanceMap","userAddress","db","catch","deadline","nonce","valid","toNumber","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","total","getUserInfoAll","userInfo","userInfoHarvest","userInfoTotal","assign","getPoolLiquidity","getPoolInfoApy","apy","volume1h","volume24h","getSlpPoolInfoApy","getUserInfoInPool","fundingRateCache","resourceMap","resource","priceCache","_accountAddress","_price","_interval","_update","update","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","getSpecification","pPool","bSymbolRaw","addresses","bSymbol","getPositionInfo","averageEntryPrice","marginHeld","unrealizedPnl","liquidationPrice","getLiquidityInfo","totalSupply","poolDynamicEquity","poolLiquidity","shares","maxRemovableShares","getWalletBalance","isUnlocked","unlock","getEstimatedFee","parameters","getFundingRate","poolInfo","fundingRate0","toExponential","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","depositMargin","withdrawMargin","maxWithdrawMargin","addLiquidity","removeLiquidity","tradeWithMargin","orderValidation","closePosition","mintDToken","miningVaultAddress","miningVault","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","baseToken","transactionHash","processLiquidateEvent","national","getTradeHistory","keyMeta","tradeFromBlock","liquidateFromBlock","getTradeHistoryOffline","getTradeHistoryOnline","getLiquidateHistoryOffline","getLiquidateHistoryOnline","tradeHistoryOffline","tradeHistoryOnline","liquidateHistoryOffline","liquidateHistoryOnline","concat","sort","b","keyBlock","count","tradeHistoryLength","resp","indexBase","trim","_getBlockInfo","filters","owner","_getPastEvents","number","returnValues","unshift","liquidateHistoryLength","Number","prototype","len","RangeError","Math","pow","round","numberArr","split","padNum","intNum","deciNum","lastNum","changedInt","replace","num","dotPos","indexOf","need","j","DesktopApp","LoadableComponent","MobileApp","App","isBrowser","isMobile","chainInfo","Wallet","detail","isConnected","connect","remove","wallet","supported","sessionStorage","removeItem","makeAutoObservable","observable","action","oracleConfig","CancelToken","axios","IndexPrice","index","source","cancel","start","loadIndex","pause","resume","toUpperCase","cancelToken","token","inteval","indexPrice","ReactDOM","render","StrictMode","document","getElementById","LoadingPage","NProgress","done","React","Component","component","Loadable","loader","loading"],"mappings":"4HAEA,2HAWO,SAASA,EAAYC,GAC1B,OAXK,SAAYA,GAAkB,IAAXC,EAAU,uDAAH,EAC/B,OAAY,GAARA,EACKC,IAAUF,GACRC,EAAO,EACTC,IAAUF,GAAOG,MAAMD,IAAU,IAAM,IAAIE,OAAOH,KAElDC,IAAUF,GAAOK,IAAIH,IAAU,IAAM,IAAIE,QAAQH,KAKnDK,CAAGN,GAAQ,IAGb,SAASO,EAAcC,GAC5B,OAAOA,GAAO,UAAOA,EAAQC,OAAO,EAAE,GAAxB,cAAgCD,EAAQC,QAAQ,IAGzD,SAASC,EAAcC,GAC5B,OAAOA,KAAaA,GAASC,QAAQ,K,q8CCrB1BC,EAAW,WACtB,IAAIC,EAAW,MACf,MAAO,CACLC,IAAK,kBAAMD,GACXE,IAAK,SAAChB,GACJ,GAAc,QAAVA,GAA6B,SAAVA,GAA8B,eAAVA,EAGzC,MAAM,IAAIiB,MAAM,0CAFhBH,EAAWd,IANK,GCDXkB,EAAoB,CAC/B,CACEC,cAAe,CACb,gEACA,gEACA,iEAEFC,QAAS,KAEX,CACED,cAAe,CACb,mCACA,oCACA,sCAEFC,QAAS,MAEX,CACED,cAAe,CAAC,sCAChBC,QAAS,OAEX,CACED,cAAe,CACb,gEACA,gEACA,iEAEFC,QAAS,KAEX,CACED,cAAe,CACb,8DACA,8DACA,+DAEFC,QAAS,MAEX,CACED,cAAe,CACb,kDACA,kDACA,kDACA,kDACA,kDACA,mDAEFC,QAAS,MAEX,CACED,cAAe,CAAC,sCAChBC,QAAS,QClCAC,EAA2B,WAAkB,IAAjBC,EAAgB,uDAAV,MAE7C,MAAY,SAARA,EAEK,CACL,CACEC,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbC,aAAc,UACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,MAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbC,aAAc,UACdC,aAAc,OACdC,OAAQ,OACRC,KAAM,OACNZ,QAAS,MAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbC,aAAc,WACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,KAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbC,aAAc,WACdC,aAAc,MACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,KAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbC,aAAc,UACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,QAMR,CACL,CACEI,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRH,KAAM,6CACNM,aAAc,UACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,KAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRG,aAAc,UACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,MAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRG,aAAc,UACdC,aAAc,OACdC,OAAQ,OACRC,KAAM,OACNZ,QAAS,MAEX,CACEG,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRG,aAAc,UACdC,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNZ,QAAS,SAmBFa,EAA8B,WAAkB,IAAjBX,EAAgB,uDAAV,MAChD,MAAY,SAARA,EACK,CACL,CACEC,KAAM,6CACNC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,OAAQ,6CACRC,YAAa,6CACbR,QAAS,IACTU,aAAc,yBAIpBI,QAAQC,IAAI,gEACL,KC/JIC,EAAqB,WAAmC,IAAlCd,EAAiC,uDAA3B,MAAOe,EAAoB,uCAClE,MAAa,SAARf,GAA0B,eAARA,IAAyBe,EAKzC,6CAHE,8CAMEC,EAA6B,WAAmC,IAAlChB,EAAiC,uDAA3B,MAAOe,EAAoB,uCAC1E,MAAa,SAARf,GAA0B,eAARA,IAAyBe,EAKzC,6CAHE,8CCPXnC,IAAUqC,OAAO,CACfC,eAAgB,GAChBC,cAAevC,IAAUwC,WACzBC,eAAgB,MAYX,IAAMrC,EAAK,SAACN,GAAqB,IAAdC,EAAa,uDAAN,EAC/B,OAAa,IAATA,EACKC,IAAUF,GAEfC,EAAO,EACFC,IAAUF,GAAOG,MAAMD,IAAU,IAAD,OAAK,IAAIE,OAAOH,MAElDC,IAAUF,GAAOK,IAAIH,IAAU,IAAD,OAAK,IAAIE,QAAQH,OAU3C2C,EAAM,SAACC,EAAQC,GAC1B,OAAID,EAAOE,IAAID,GACND,EAEFC,GA6BIE,EAAoB,SAAChD,GAAD,OAAWiD,IAAKC,MAAMF,kBAAkBhD,IAE5DmD,EAAc,SAACnD,GAAD,OAAWiD,IAAKC,MAAME,UAAUpD,IAE9CqD,EAAc,SAACrD,GAAD,OAAWiD,IAAKC,MAAMG,YAAYrD,IAEhDsD,EAAoB,SAACtD,GAAD,OAAWiD,IAAKC,MAAMI,kBAAkBtD,IAa5DuD,EAAgB,SAACvD,GAAD,OAAWM,EAAGN,EAAO,IAAIY,QAAQ,IAEjD4C,EAAwB,SAACxD,GAAD,gBAChCM,EAAGN,GAAOyD,GAAG,GAAGtD,MAAM,KAAKS,QAAQ,GAAG8C,WADN,MAGxBC,EAAgB,SAAC3D,GAAD,OAAWM,EAAGN,GAAQ,KAKtC4D,EAAe,SAAC5D,GAAD,OAAWM,EAAGN,GAAO0D,YASpCG,EAAsB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACjCA,EAAKC,MACH,SAACC,GAAD,OAEEC,MAAMD,EAAEN,aAAgC,MAAjBM,EAAEN,eAOlBQ,EAAsB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEXC,MAAMF,GAFK,kBAGrBG,GAHqB,0CAIzB,GAJyB,uDAOlCpC,QAAQC,IAAR,MAPkC,kCAS7B,GAT6B,yDAAH,sDAWtBoC,EAAkB,uCAAG,4CAAAH,EAAA,sDAAOI,EAAP,+BAAc,GACrCR,EAAI,EADmB,YAChBA,EAAIQ,EAAKC,QADO,wBAExBN,EAAMK,EAAKR,GAFa,SAGpBE,EAAuBC,GAHH,2DAIrBA,GAJqB,OACCH,IADD,6BAO1B,IAAI/C,MAAM,wBAPgB,4CAAH,qDAWlByD,EACX,qEACWC,EAAiB,SAACvD,GAE7B,IAAIwD,EACJ,OAFAxD,EAAUyD,EAAiBzD,IAGzB,IAAK,IACHwD,EAAc,WACd,MACF,IAAK,KACHA,EAAc,MACd,MACF,IAAK,MACHA,EAAc,OACd,MACF,IAAK,IACHA,EAAc,UACd,MACF,IAAK,KACHA,EAAc,QACd,MACF,IAAK,KACHA,EAAc,aACd,MACF,IAAK,MACHA,EAAc,cACd,MACF,QACE,MAAM,IAAI3D,MAAM,8BAEpB,OAAO2D,GAkFIE,EAAyB,SAAC1D,EAAS2D,GAC9C3D,EAAUyD,EAAiBzD,GAC3B,IAGMG,EAHQF,EAAyBR,EAAQE,OAAOiE,QACpD,SAACC,GAAD,OAAOA,EAAE7D,UAAYA,KAEJ4D,QAAO,SAACE,GAAD,OAAOA,EAAE3D,OAASwD,KAE5C,OAAIxD,EAAKkD,OAAS,EACT,CACLM,YAAaxD,EAAK,GAAGA,KACrB4D,cAAe5D,EAAK,GAAGC,OACvB4D,cAAe7D,EAAK,GAAGE,OACvB4D,cAAe9D,EAAK,GAAGG,OACvB4D,aAAc/D,EAAK,GAAGI,OACtB4D,oBAAqBhE,EAAK,GAAGK,YAC7BE,aAAcP,EAAK,GAAGO,aACtBC,OAAQR,EAAK,GAAGQ,OAChBC,KAAMT,EAAK,GAAGS,KACdH,aAAcN,EAAK,GAAGM,eAG1BK,QAAQC,IAAR,mEAC8Df,EAD9D,YACyE2D,IAElE,KAGIS,EAAgC,SAACpE,GAC5CA,EAAUyD,EAAiBzD,GAC3B,IAAMqE,EAAQpE,EAAyBR,EAAQE,OAAOiE,QACpD,SAACC,GAAD,OAAOA,EAAE7D,UAAYA,KAEvB,GAAIqE,EAAMhB,OAAS,GACbgB,EAAM,GAAG7D,YACX,OAAO6D,EAAM,GAAG7D,aAsDT8D,EAAyB,SAACtE,GACrCA,EAAUyD,EAAiBzD,GAC3B,IAAMG,EF7HoC,WAC1C,MAAY,UAD+C,uDAAV,OAExC,CACL,CACEoE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,KAEX,CACEuE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,MAEX,CACEuE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,QAIR,CACL,CACEuE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,KAEX,CACEuE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,MAEX,CACEuE,KAAM,6CACNC,SAAU,6CACV9D,aAAc,OACdV,QAAS,QEqFAyE,CAA6BhF,EAAQE,OAAOiE,QACvD,SAACC,GAAD,OAAOA,EAAE7D,UAAYA,KAEvB,OAAIG,EAAKkD,OAAS,EACT,CACLqB,YAAavE,EAAK,GAAGoE,KACrBI,gBAAiBxE,EAAK,GAAGqE,SACzB9D,aAAcP,EAAK,GAAGO,eAG1BI,QAAQC,IAAR,mEAC8Df,IAEvD,KAGI4E,EAAe,WAAwC,IAAvC1E,EAAsC,uDAAhC,MAAOF,EAAyB,uCAAhB2D,EAAgB,yCAC9CD,EAAuB1D,EAAS2D,GAA3ChD,EADyD,EACzDA,OACFkE,EAAiB,SAAC9B,GAAD,IAAMpC,EAAN,uDAAa,SAAb,gBAA6BoC,EAA7B,mBAA2CpC,IAClE,MAAY,SAART,GAA0B,eAARA,EAEhBS,EAEOkE,EADM,WAAXlE,EACoB,qCAEA,oCAFsCA,GAKzD,oCAEHA,EACKkE,EAAe,qCAAsClE,GAGvD,sCAIEmE,EAAc,uCAAG,WAAO9E,EAAS2D,GAAhB,mBAAAX,EAAA,sEAEtBD,EAAM6B,EAAanF,EAAQE,MAAOK,EAAS2D,GAFrB,SAOEV,MAAMF,GAPR,cAOpBgC,EAPoB,gBAQMA,EAAcC,OARpB,cAQpBC,EARoB,yBASnB1C,EAAc0C,EAAkBC,QATb,kCAW1BpE,QAAQC,IAAR,2CAX0B,iCAarB,KAbqB,0DAAH,wDAedoE,EAAa,uCAAG,WAAOnF,EAAS2D,GAAhB,mBAAAX,EAAA,sEAErBD,EAAM6B,EAAanF,EAAQE,MAAOK,EAAS2D,GAK/C7C,QAAQC,IAAI,aAAcgC,GAPD,SAQGE,MAAMF,GART,cAQnBgC,EARmB,gBASOA,EAAcC,OATrB,cASnBC,EATmB,yBAUlBA,GAVkB,kCAYzBnE,QAAQC,IAAR,0CAZyB,iCAcpB,IAdoB,0DAAH,wDAwCb0C,EAAmB,SAACzD,GAC/B,IAAIoF,EAAMpF,EAIV,MAHuB,kBAAZA,IACToF,EAAMpF,EAAQsC,YAET8C,GC/bIC,EAAgB,WAC3B,IAAIC,EAAe,KACnB,OAAO,WACL,GAAqB,OAAjBA,EACF,OAAOA,EAET,IAAIC,EACJ,QAA+BC,IAA3B,YAAOC,OAAOC,UAIhB,MAAM,IAAI7F,MAAM,iCAGlB,OANE0F,EAAO,IAAI1D,IAAK4D,OAAOC,UAKzBJ,EAAeC,EACRA,GAdkB,GAkBhBI,EAAe,WAC1B,IAAMC,EAAkB,GACxB,OAAO,SAAC5F,GACN,GAAI6F,OAAOC,KAAKF,GAAiBG,SAAS/F,GACxC,OAAO4F,EAAgB5F,GAEzBc,QAAQC,IAAR,2BACsBf,EADtB,4CAGA,IAAMgG,EDwYyB,SAAChG,GAClCA,EAAUyD,EAAiBzD,GAC3B,IAAMiG,EAASnG,EAAkB8D,QAAO,SAACsC,GAAD,OAAUA,EAAKlG,UAAYA,KACnE,GAAsB,IAAlBiG,EAAO5C,OAWT,MAAM,IAAIxD,MAAJ,2DACgDG,IAXtD,IAEE,OAAOiG,EAAO,GAAGlG,cAAc,GAC/B,MAAOoG,GACP,MAAM,IAAItG,MAAJ,iEACsDG,KCjZ1CoG,CAAoBpG,GAClCuF,EAAO,IAAI1D,IAAK,IAAIA,IAAKwE,UAAUC,aAAaN,IAEtD,OADAJ,EAAgB5F,GAAWuF,EACpBA,GAZiB,GCcfgB,EAAa,uCAAG,WAC3BC,EACAC,GAF2B,mBAAAzD,EAAA,8DAIIwC,IAA3B,YAAOC,OAAOC,UAJS,iCAKFD,OAAOC,SAASgB,QAAQ,CAC7CC,OAAQ,wBANe,cAKnBC,EALmB,YAYT3E,EAZS,SAajBwD,OAAOC,SAASgB,QAAQ,CAAEC,OAAQ,gBAbjB,0BAYnB3G,GAZmB,cAgBnB6G,EAAUC,MAAMC,QAAQH,IAAaA,EAAS,GAGpDnB,OAAOC,SAASsB,GAAG,mBAAmB,SAACJ,GACrC,IAAIC,EAEFA,EADED,EAASvD,OAAS,EACVuD,EAAS,GAET,GAEwB,oBAAzBH,EACTA,EAAqBI,GAErBpB,OAAOwB,SAASC,YAIpBzB,OAAOC,SAASsB,GAAG,gBAAgB,SAAChH,GAClC,IAAIoF,EAAMnD,EAAYjC,GACY,oBAAvBwG,EACTA,EAAmBpB,GAEnBK,OAAOwB,SAASC,YAtCK,kBA0ClB,CAAEC,SAAS,EAAMN,UAAS7G,YA1CR,iCA4CpB,CACLmH,SAAS,EACTC,MAAO,oDA9CkB,4CAAH,wDA0DbC,EAAoB,uCAAG,WAAOrH,EAASsH,GAAhB,mBAAAtE,EAAA,6DAE5BuC,EAAOF,IAFqB,SAGZE,EAAKgC,IAAIC,WAAWF,GAHR,cAG5B/H,EAH4B,OAI5B6F,EAAMvD,IAAKC,MAAM2F,QAAQlI,GAJG,kBAK3B6F,GAL2B,2CAAH,wD,sDC1F3BsC,EAAiB,OAEVC,EAAb,WACE,WAAY3H,EAAS4H,EAAiBC,GAAa,oBACjDC,KAAK9H,QAAUA,EACf8H,KAAKF,gBAAkBA,EAErBE,KAAKvC,KADHsC,EACUlC,EAAY3F,GAEZqF,IAPlB,8CAUE,SAAW0C,GAET,OADAD,KAAKC,eAAiBA,EACfD,OAZX,qBAcE,SAAQnE,GAEN,OADAmE,KAAKnE,YAAcA,EACZmE,OAhBX,0DAkBE,WAAYnB,GAAZ,6BAAA3D,EAAA,6DAAoBN,EAApB,+BAA2B,GAA3B,UACe,EAAAoF,KAAKE,SAASC,SAAQtB,GAAtB,oBAAiCjE,IAAMwF,OADtD,wFAlBF,yHAsBE,WAAoBvB,GAApB,mCAAA3D,EAAA,sDAA4BN,EAA5B,+BAAmC,GAAIqF,EAAvC,uBAGMI,EAAM,EACDvF,EAAI,EAJf,YAIkBA,EAAI,IAJtB,2CAMkB,EAAAkF,KAAKE,SAASC,SAAQtB,GAAtB,oBAAiCjE,IAAM0F,YAAY,CAC7DC,KAAMN,IAPd,cAMMI,EANN,OASMA,EAAMG,SAAe,KAANH,GATrB,+DAI0BvF,IAJ1B,8BAea,GAAPuF,IAAUA,EAAMT,GAChBS,EAAMT,IAAgBS,EAAMT,GAhBlC,kBAiBSS,GAjBT,0DAtBF,2FA0CE,SAAuBI,GACrB,IAAMC,EAAOV,KACb,OAAO,SAASW,EAAoBC,EAASC,GAC3CH,EAAKjD,KAAKgC,IAAIqB,sBAAsBL,GAAI,SAACnB,EAAOyB,GAC1CzB,EACFuB,EAAOvB,GACc,OAAZyB,EACTC,YAAW,kBAAML,EAAoBC,EAASC,KAAS,MAC3B,IAAnBE,EAAQE,QACjBF,EAAQG,aAAe,qBACvBL,EAAOE,IAEPH,EAAQG,SAtDlB,8DA2DE,WAAgBlC,EAAQjE,EAAMqF,GAA9B,yBAAA/E,EAAA,sEAIgCiG,QAAQC,IAAI,CACxCpB,KAAKqB,cAAcxC,EAAQjE,EAAMqF,GACjCD,KAAKvC,KAAKgC,IAAI6B,gBANlB,0CAISjB,EAJT,UAQMkB,EAAQ,CACV,CACEhB,KAAMN,EACNuB,GAAIxB,KAAKF,gBACTO,IAAKtG,IAAKC,MAAMyH,YAAYpB,GAC5BvJ,MAAOiD,IAAKC,MAAMyH,YAAY,KAC9BC,MAAM,EAAA1B,KAAKE,SAASC,SAAQtB,GAAtB,oBAAiCjE,IAAM+G,cAdnD,SAiBiBhE,OAAOC,SAASgB,QAAQ,CACrCC,OAAQ,sBACR+C,OAAQL,IAnBZ,cAiBMd,EAjBN,iBAqBe,IAAIU,QAAQnB,KAAK6B,uBAAuBpB,IArBvD,0FA3DF,kECHaqB,EAAyB,SACpCC,EACA3E,EACA4E,EACAC,EACAC,GALoC,OAOpC9K,EACI2K,EAAmB3E,EAAQ4E,EAAcC,EAAaC,GACxDC,OAESC,EAAuB,SAClCL,EACA3E,EACA4E,EACAC,EACAI,GALkC,OAOhCN,EAAmB3E,EAAQ4E,EAAcC,EAC3CI,GAEWC,GAAqB,SAACpK,EAASqK,GAC1C,IAAMC,EJqR4B,SAACtK,GACnC,IAAMuK,EF9ByC,CAC/CC,EAAG,UACHC,GAAI,WACJC,IAAK,WACLC,EAAG,UACHC,GAAI,WACJC,IAAK,YEyBL,GAAIN,EAAavK,GACf,OAAOsI,SAASiC,EAAavK,IAE/Bc,QAAQC,IAAR,4DAAiEf,II1RxC8K,CAAqB9K,GAgB9C,OAfAc,QAAQC,IAAIuJ,GACApL,EAAGmL,GAAatL,MAAMuL,ICtBvBS,GAAsB,SAACC,EAAmBjB,GAApB,OACjCiB,EAAkBC,GAAG,GAAK/L,EAAG,GAAK6K,EAAU9K,IAAI+L,IACrCE,GAA8B,SACzCC,EACAH,EACAjB,EACAF,EACAuB,EACAtB,EACAuB,EACAnG,GAEA,IL4CkBzD,EAAQC,EK5CpB4J,EAAaP,GAAoBC,EAAmBjB,GACpDnL,EAAQiL,EAAiB9K,MAAMmG,GAAOnG,MAAM+K,GAC5CyB,EAAYxB,EACfyB,KAAKJ,GACLK,MAAM7M,GACN6M,MAAM7M,EAAMqL,MAAMlL,MAAMsM,IAE3B,OADe7J,GLsCGC,EKtCK0J,ELsCGzJ,EKtCY6J,EAAUtM,IAAIqM,GLuChD7J,EAAOiK,IAAIhK,GACND,EAEFC,GK1C2DxC,EAAG,KAI1DyM,GAAsB,SAACC,EAAQC,EAAM/B,GAAf,OACjC8B,EAAOX,GAAG,GAAK/L,EAAG,GAAK2M,EAAK5M,IAAI2M,GAAQ3M,IAAI6K,IAEjCgC,GAAsB,SACjC5G,EACA0G,EACA9B,EACAiC,GAJiC,OAK9BH,EAAO3B,MAAMlL,MAAMmG,GAAOnG,MAAM+K,GAAY/K,MAAMgN,IAE1CC,GAAe,SAAC9G,EAAO0G,EAAQ9B,EAAY+B,GAA5B,OAC1BD,EAAO7M,MAAMmG,GAAOnG,MAAM+K,GAAY2B,MAAMI,IAEjCI,GAA6B,SACxC/G,EACA0G,EACAM,EACAL,EACA/B,EACAiC,GAEA,GAAIH,EAAOX,GAAG,GACZ,OAAOiB,EAET,IAAMC,EAAOL,GACX5G,EACA0G,EACA9B,EACAiC,GAEIK,EAAMJ,GAAa9G,EAAO0G,EAAQ9B,EAAY+B,GAEpD,OADqBrK,EAAI0K,EAAOV,KAAKY,GAAKX,MAAMU,EAAKpN,MAAM,OAAQG,EAAG,KAI3DmN,GAA4B,SACvCT,EACAM,EACAL,EACA/B,EACAwC,GAEA,IAAMC,EAAMV,EAAKJ,MAAMS,GAAQjN,IAAI2M,GAAQ3M,IAAI6K,GAC3C1E,EAAMwG,EAAOY,GAAG,GAChBD,EAAItN,IAAIC,EAAG,GAAGuM,MAAMa,IACpBC,EAAItN,IAAIC,EAAG,GAAGsM,KAAKc,IAEvB,OADAlH,EAAM5D,EAAI4D,EAAKlG,EAAG,KAIPuN,GAAe,SAC1BvH,EACAgH,EACAN,EACA7B,EACAF,EACAC,EACAuB,EACAU,EACAW,EACAC,GAEA,IAAMC,EAAYhB,EACfJ,KAAKkB,GACLzC,MACAlL,MAAMmG,GACNnG,MAAM+K,GACN/K,MAAMgN,GACHc,EAAgB9C,EACnB9K,IAAIoM,GACJpM,IAAIiG,GACJjG,IAAI6K,GACP,OAAIoC,EAAOV,KAAKmB,GAAQhL,IAAIiL,GAExBF,EAAUhB,IAAImB,EAAcpB,MAAM5B,KAClC6C,EAAU/K,IAAIkL,EAAcC,UAAUrB,MAAM5B,IAErC,CAAE1C,SAAS,GAEb,CAAEA,SAAS,EAAO4F,QAAS,+BAE7B,CAAE5F,SAAS,EAAO4F,QAAS,+BC3F9BC,GAAS,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,gBAAgB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,iBAAiB,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,wBAAwB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,4BAA4B,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,yBAAyB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,kBAAkB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,SAAS,KAAO,mBAAmB,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,iBAAiB,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,UAAU,CAAC,aAAe,aAAa,KAAO,aAAa,KAAO,cAAc,CAAC,aAAe,cAAc,KAAO,cAAc,KAAO,gBAAgB,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,WAAW,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAGrgUC,GAAb,kDACE,WAAYjN,EAAS4H,EAAiBC,GAAa,IAAD,8BAChD,cAAM7H,EAAS4H,EAAiBC,IAC3BG,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAASqF,GAAU,EAAKpF,iBAFV,EADpD,iFAME,sBAAA5E,EAAA,sEACe8E,KAAKoF,MAAM,UAD1B,wFANF,yHAUE,gCAAAlK,EAAA,6DAEQmK,EAAejO,EAAG,GAF1B,kBAIsB4I,KAAKoF,MAAM,kBAJjC,OAIU9H,EAJV,OAMIgI,EAAS,CACPC,gBAAiB9K,EAAc6C,EAAIiI,iBACnCC,qBAAsBpO,EAAGkG,EAAIkI,sBAC7BvD,UAAWxH,EAAc6C,EAAI2E,WAC7BF,iBAAkBtH,EAAc6C,EAAIyE,kBACpCuB,eAAgB7I,EAAc6C,EAAIgG,iBAXxC,gDAcIgC,EAAS,CACPC,gBAAiBF,EACjBG,qBAAsBH,EACtBpD,UAAWoD,EACX/B,eAAgB+B,EAChBtD,iBAAkBsD,GAEpBrM,QAAQC,IAAR,iCArBJ,iCAuBSqM,GAvBT,yDAVF,wHAoCE,gCAAApK,EAAA,6DAEQmK,EAAejO,EAAG,GAF1B,kBAIsB4I,KAAKoF,MAAM,iBAJjC,OAIU9H,EAJV,OAMIgI,EAAS,CACPtD,WAAYvH,EAAc6C,EAAI0E,YAC9ByD,SAAUhL,EAAc6C,EAAImI,UAC5BlC,mBAAoB9I,EAAc6C,EAAIiG,oBACtCU,sBAAuBxJ,EAAc6C,EAAI2G,uBACzCO,0BAA2B/J,EAAc6C,EAAIkH,2BAC7CkB,gBAAiBjL,EAAc6C,EAAIoI,iBACnCC,mBAAoBlL,EAAc6C,EAAIqI,oBACtCtD,uBAAwB5H,EAAc6C,EAAI+E,wBAC1CuD,qBAAsBnL,EAAc6C,EAAIsI,sBACxCC,qBAAsBpL,EAAc6C,EAAIuI,sBACxCC,oBAAqBrL,EAAc6C,EAAIwI,qBACvCC,oBAAqB3O,EAAGkG,EAAIyI,sBAlBlC,gDAqBIT,EAAS,CACPtD,WAAYqD,EACZI,SAAUJ,EACV9B,mBAAoB8B,EACpBpB,sBAAuBoB,EACvBb,0BAA2Ba,EAC3BK,gBAAiBL,EACjBM,mBAAoBN,EACpBhD,uBAAwBgD,EACxBO,qBAAsBP,EACtBQ,qBAAsBR,EACtBS,oBAAqBT,EACrBU,oBAAqBV,GAEvBrM,QAAQC,IAAR,gCAnCJ,iCAqCSqM,GArCT,yDApCF,0FA4EE,SAAuB7E,GACrB,IAAMC,EAAOV,KACb,OAAO,SAASW,EAAoBC,EAASC,GAC3CH,EAAKjD,KAAKgC,IAAIqB,sBAAsBL,GAAI,SAACnB,EAAOyB,GAC1CzB,EACFuB,EAAOvB,GACa,MAAXyB,EACTC,YAAW,kBAAML,EAAoBC,EAASC,KAAS,MAC3B,IAAnBE,EAAQE,QACjBF,EAAQG,aAAe,qBACvBL,EAAOE,IAEPH,EAAQG,SAxFlB,kEA6FE,WAAoBlC,EAAQjE,EAAMqF,GAAlC,mBAAA/E,EAAA,sDAGMmF,EAAM,EACDvF,EAAI,EAJf,YAIkBA,EAAI,IAJtB,2CAMkB,EAAAkF,KAAKE,SAASC,SAAQtB,GAAtB,oBAAiCjE,IAAM0F,YAAY,CAC7DC,KAAMN,IAPd,cAMMI,EANN,OASMA,EAAMG,SAAe,KAANH,GATrB,+DAI0BvF,IAJ1B,8BAea,GAAPuF,IAAUA,EAAM,QAChBA,EAAM,SAAQA,EAAM,QAhB1B,kBAiBSA,GAjBT,0DA7FF,6HAiHE,WAAoBxB,GAApB,+CAAA3D,EAAA,6DAA4BN,EAA5B,+BAAmC,GAAIqF,EAAvC,gCAGuB5C,EAAc2C,KAAK9H,QAAS8H,KAAKF,iBAHxD,cAGQkG,EAHR,OAIMC,EAAS,CAACD,EAAOE,UAAWF,EAAO5I,MAAO4I,EAAOG,EAAGH,EAAOI,EAAGJ,EAAOK,GAJ3E,SAMgClF,QAAQC,IAAI,CACxCpB,KAAKqB,cAAcxC,EAAnB,sBAA+BjE,GAASqL,GAAShG,GACjDD,KAAKvC,KAAKgC,IAAI6B,gBARlB,0CAMSjB,EANT,KAMciG,EANd,KAUEtN,QAAQC,IAAR,mBAAwBqN,EAAW,IAAnC,QAGI/E,EAAQ,CACV,CACEhB,KAAMN,EACNuB,GAAIxB,KAAKF,gBACTO,IAAKtG,IAAKC,MAAMyH,YAAYpB,GAC5BvJ,MAAOiD,IAAKC,MAAMyH,YAAY,KAC9BC,MAAM,EAAA1B,KAAKE,SAASC,SAAQtB,GAAtB,oBAAiCjE,GAAjC,OAA0CqL,IAAQtE,cAnB9D,UAsBiBhE,OAAOC,SAASgB,QAAQ,CACrCC,OAAQ,sBACR+C,OAAQL,IAxBZ,eAsBMd,EAtBN,iBA0Be,IAAIU,QAAQnB,KAAK6B,uBAAuBpB,IA1BvD,0FAjHF,0HA8IE,oDAAAvF,EAAA,sEAEgB8B,EAAegD,KAAK9H,QAAS8H,KAAKF,iBAFlD,cAEE1C,EAFF,yBAIkD4C,KAAKuG,iBAJvD,uBAIYxE,EAJZ,EAIYA,iBAAkBE,EAJ9B,EAI8BA,UAJ9B,UAScjC,KAAKwG,gBATnB,wBAMMxE,EANN,EAMMA,WACAK,EAPN,EAOMA,uBACAkB,EARN,EAQMA,mBAUE5I,EAAmB,WAAnB,EAPE8L,EAAQ,CACZ1E,EACA3E,EACA4E,EACAC,EACAI,KAGAE,EAAc,IACdmE,EAAsB,MAEtBA,EAAsBtE,EAAoB,WAApB,EAAwBqE,GAC9ClE,EAAcD,GAAmBtC,KAAK9H,QAASwO,IAU/CC,EADEhM,EAAmB,WAAnB,EAPEiM,EAAQ,CACZ7E,EACA3E,EACA4E,EACAC,EACAsB,IAGgB,IAEAzB,EAAsB,WAAtB,EAA0B8E,GAnChD,kBAqCW,CACLxJ,QACA4E,WAAYA,EAAWxH,WACvB+H,YAAaA,EACbmE,oBAAqBA,EACrB3E,iBAAkBA,EAAiBvH,WACnCyH,UAAWA,EAAUzH,WACrB6H,uBAAwBA,EAAuB7H,WAC/CmM,cAAeA,EACfzE,gBAAiBqB,EAAmB/I,aA9C1C,wCAiDIxB,QAAQC,IAAI,kCAAZ,MAjDJ,+DA9IF,wHAoME,WAAoBgH,EAAgB4E,GAApC,iBAAA3J,EAAA,6DAEElC,QAAQC,IAAI,iBAFd,kBAKmB+G,KAAK6G,cAClB,+DACA,CAAChC,GACD5E,GARN,OAKQQ,EALR,OAUInD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAVxC,gDAYIzH,QAAQC,IAAI,QACZqE,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IAbjC,iCAeShC,GAfT,yDApMF,2HAqNE,WAAoByJ,GAApB,SAAA7L,EAAA,sEACe8E,KAAKvC,KAAKgC,IAAIuH,SAASD,GADtC,wFArNF,0HAwNE,WAAqBE,GAArB,yCAAA/L,EAAA,sDAAgCY,EAAhC,+BAAyC,GAAIoL,EAA7C,+BAAyD,EAAG1F,EAA5D,+BAAiE,EAC3D2F,EAAS,GADf,YAISD,GAAa1F,GAJtB,iCAMmBxB,KAAKE,SAASkH,cAAcH,EAAW,CACpDnL,OAAQA,EACRoL,YACAG,QAASH,EAAY,OAT3B,OAMQI,EANR,qBAWkBA,GAXlB,IAWI,2BAASC,EAAS,QAChBJ,EAAOK,KAAKD,GAZlB,8BAcIL,GAAa,IAdjB,gDAgBSC,GAhBT,iDAxNF,yHA0OE,WAAoBJ,GAApB,SAAA7L,EAAA,sEACe8E,KAAKvC,KAAKgC,IAAIuH,SAASD,GADtC,wFA1OF,kFA6OE,SAAcjD,EAAQ1G,EAAO4E,EAAYyD,GACvC,OAAOrO,EAAG0M,GACP3B,MACAlL,MAAMmG,GACNnG,MAAM+K,GACN/K,MAAMwO,GACNjL,eAnPP,GAAmCqF,GCf7B4H,GAAa,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,mBAAmB,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,WAAW,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,YAAY,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,QAAQ,KAAO,WAAW,CAAC,KAAO,MAAM,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,UAAU,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,UAAU,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,qBAAqB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,MAAM,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,QAAQ,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,MAAM,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,iBAAiB,KAAO,WAAW,CAAC,KAAO,YAAY,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,WAAW,CAAC,KAAO,WAAW,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,KAAO,YAAY,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,gBAAgB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,eAAe,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,WAAW,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,mBAAmB,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,KAAO,QAAQ,KAAO,UAAU,CAAC,KAAO,UAAU,KAAO,WAAW,SAAU,EAAM,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,aAAa,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,iBAAiB,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,mBAAmB,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,WAAW,KAAO,YAAY,KAAO,sBAAsB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,iBAAiB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,GAAG,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,GAAG,KAAO,UAAU,KAAO,UAGhhOC,GAAb,kDACE,WAAYxP,EAAS4H,EAAiBjE,EAAakE,GAAa,IAAD,8BAC7D,cAAM7H,EAAS4H,EAAiBC,IAC3BlE,YAAcA,EACnB,EAAKqE,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBALsD,EADjE,qFAUE,WAAiBG,GAAjB,eAAA/E,EAAA,sEACwB8E,KAAKoF,MAAM,YAAa,CAC5CnF,EACAD,KAAKnE,cAHT,cACM8L,EADN,OAKEA,EAAYlN,EAAckN,GAL5B,kBAOSA,EAAUjD,GAAG,IAPtB,gDAVF,kHAoBE,WAAazE,GAAb,SAAA/E,EAAA,sEACQ8E,KAAK4H,UACT,UACA,CAAC5H,KAAKnE,YAAaL,GACnByE,GAJJ,gDApBF,kHA4BE,sBAAA/E,EAAA,sEACe8E,KAAKoF,MAAM,UAD1B,wFA5BF,mHAgCE,sBAAAlK,EAAA,sEACe8E,KAAKoF,MAAM,YAD1B,wFAhCF,mHAmCE,WAAe9N,GAAf,SAAA4D,EAAA,sEACe8E,KAAKoF,MAAM,YAAa,CAAC9N,IADxC,wFAnCF,mHAuCE,WAAcA,GAAd,qBAAA4D,EAAA,sEACgCiG,QAAQC,IAAI,CACxCpB,KAAK6H,SAASvQ,GACd0I,KAAK8H,aAHT,0CACSxK,EADT,KACcwK,EADd,uBAKS1Q,EAAGkG,GAAMwK,IALlB,gDAvCF,4DAAoCjI,GCH9B4H,GAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,QAAQ,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,WAAW,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,OAAO,KAAO,WAAW,KAAO,SAAS,KAAO,iBAAiB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,mBAAmB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,OAAO,KAAO,UAAU,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,WAAW,KAAO,SAAS,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,WAAW,KAAO,oBAAoB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG5yNM,GAAb,kDACE,WAAY7P,EAAS4H,EAAiBjE,EAAakE,GAAa,IAAD,8BAC7D,cAAM7H,EAAS4H,EAAiBC,IAC3BlE,YAAcA,EACnB,EAAKqE,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBALsD,EADjE,0FAUE,WAAsBG,GAAtB,iBAAA/E,EAAA,6DAGMoK,EAAS,GAHf,kBAKsBtF,KAAKoF,MAAM,uBAAwB,CAACnF,IAL1D,OAKU3C,EALV,OAOIgI,EAAS,CACPxB,OAAQrJ,EAAc6C,EAAI,IAC1ByG,KAAMtJ,EAAc6C,EAAI,IACxB0K,oBAAqBvN,EAAc6C,EAAI,IACvC8G,OAAQ3J,EAAc6C,EAAI,IAC1B2K,oBAAqB7Q,EAAGkG,EAAI,KAZlC,gDAeIgI,EAAS,CACPxB,OAAQ1M,EAAG,GACX2M,KAAM3M,EAAG,GACT4Q,oBAAqB5Q,EAAG,GACxBgN,OAAQhN,EAAG,GACX6Q,oBAAqB7Q,EAAG,IAE1B4B,QAAQC,IAAR,kCAtBJ,iCAwBSqM,GAxBT,yDAVF,kHAqCE,WAAarF,GAAb,SAAA/E,EAAA,sEACe8E,KAAKoF,MAAM,SAAU,CAACnF,IADrC,wFArCF,4DAAoCJ,GCH9B4H,GAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,QAAQ,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,WAAW,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,QAAQ,KAAO,GAAG,KAAO,UAAU,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,aAG9uGS,GAAb,kDACE,WAAYhQ,EAAS4H,EAAiBjE,EAAakE,GAAa,IAAD,8BAC7D,cAAM7H,EAAS4H,EAAiBC,IAC3BlE,YAAcA,EACnB,EAAKqE,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBALsD,EADjE,kFAUE,WAAcG,GAAd,eAAA/E,EAAA,kEAGcT,EAHd,SAGkCuF,KAAKoF,MAAM,YAAa,CAACnF,IAH3D,0BAGQ3C,GAHR,gCAKSA,GALT,gDAVF,uHAkBE,4BAAApC,EAAA,kEACcT,EADd,SACkCuF,KAAKoF,MAAM,eAD7C,0BACQ9H,GADR,gCAGSA,GAHT,gDAlBF,2DAAoCuC,GCF9BsI,GAAkB,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,WAAW,KAAO,OAAO,KAAO,aAAa,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,YAAY,KAAO,GAAG,KAAO,cAAc,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,WAAa,CAAC,CAAC,aAAe,SAAS,KAAO,MAAM,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,aAAe,2BAA2B,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG/vCC,GAAb,WACE,WAAYtI,EAAiB5B,GAAc,oBACzC8B,KAAK9B,YAAcA,EACnB8B,KAAKF,gBAAkBA,EACnBE,KAAK9B,aACP8B,KAAKqI,QALX,yCAQE,WAEErI,KAAKvC,KAAOI,EAAY,MACxBmC,KAAKE,SAAW,IAAIF,KAAKvC,KAAKgC,IAAII,SAChCsI,GACAnI,KAAKF,mBAbX,sEAiBE,sBAAA5E,EAAA,8DAEM8E,KAAK9B,aAFX,qCAEiClD,EAAuBgF,KAAK9B,aAF7D,kEAI6B7C,EX7Bc,CAC3C,kDACA,kDACA,kDACA,kDACA,kDACA,oDWmBA,OAII2E,KAAK9B,YAJT,cAME8B,KAAKqI,QANP,iDAjBF,oHA0BE,WAAgBC,GAAhB,SAAApN,EAAA,yDACO8E,KAAKE,SADZ,gCAEUF,KAAKuI,oBAFf,uBAIevI,KAAKE,SAASC,QAAQqI,UAAUF,GAAUlI,OAJzD,wFA1BF,8DCHMqH,GAAe,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,WAAa,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,aAAe,2BAA2B,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,QAAQ,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,YAAY,KAAO,SAAS,KAAO,cAAc,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAGz1EgB,GAAb,WACE,WAAY3I,EAAiB5B,GAAc,oBACzC8B,KAAK9B,YAAcA,EACnB8B,KAAKF,gBAAkBA,EACnBE,KAAK9B,aACP8B,KAAKqI,QALX,4FAQE,sBAAAnN,EAAA,8DAEM8E,KAAK9B,aAFX,qCAEiClD,EAAuBgF,KAAK9B,aAF7D,kEAI6B7C,EZpBc,CAC3C,kDACA,kDACA,kDACA,kDACA,kDACA,oDYUA,OAII2E,KAAK9B,YAJT,cAME8B,KAAKqI,QANP,iDARF,yEAgBE,WAEErI,KAAKvC,KAAOI,EAAY,MACxBmC,KAAKE,SAAW,IAAIF,KAAKvC,KAAKgC,IAAII,SAChC4H,GACAzH,KAAKF,mBArBX,8DAwBE,WAAgBG,GAAhB,SAAA/E,EAAA,yDACO8E,KAAKE,SADZ,gCAEUF,KAAKuI,oBAFf,uBAIevI,KAAKE,SAASC,QAAd,UAAmCF,GAAgBG,OAJlE,wFAxBF,8DCJMqH,GAA4G,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,aAGhlIiB,GAAb,kDACE,WAAYxQ,EAAS4H,EAAiBC,GAAa,IAAD,8BAChD,cAAM7H,EAAS4H,EAAiBC,IAC3BG,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBAJyC,EADpD,qFAQE,WAAiBG,GAAjB,uCAAA/E,EAAA,qEAAoCN,EAApC,iCAAoCA,EAApC,0BAIoBoF,KAAKqB,cACrB,QADgB,CAEfpB,GAFe,OAEIrF,GACpBqF,GAPJ,cAIQI,EAJR,OASErH,QAAQC,IAAIoH,GACRkB,EAAQ,CACV,CACEhB,KAAMN,EACNuB,GAAIxB,KAAKF,gBACTO,IAAKtG,IAAKC,MAAMyH,YAAYpB,GAC5BvJ,MAAOiD,IAAKC,MAAMyH,YAAY,KAC9BC,MAAM,EAAA1B,KAAKE,SAASC,SAAd,eACJF,GADI,OAEDrF,IACH+G,cAnBR,SAuBiBhE,OAAOC,SAASgB,QAAQ,CACrCC,OAAQ,sBACR+C,OAAQL,IAzBZ,cAuBMd,EAvBN,iBA2Be,IAAIU,QAAQnB,KAAK6B,uBAAuBpB,IA3BvD,0FARF,4DAAqCZ,GCH/B4H,GAAe,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,qBAAqB,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,iBAAiB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,iBAAiB,KAAO,YAAY,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,oBAAoB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,uBAAuB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,iBAAiB,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,cAAc,KAAO,SAAS,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,MAAM,KAAO,YAAY,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,wBAAwB,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,iBAAiB,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,mBAAmB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,cAAc,KAAO,SAAS,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,wBAAwB,KAAO,YAAY,KAAO,YAAY,KAAO,cAAc,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,qBAAqB,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG1rMkB,GAAb,kDACE,WAAYzQ,EAAS4H,EAAiBC,GAAa,IAAD,8BAChD,cAAM7H,EAAS4H,EAAiBC,IAC3BG,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBAJyC,EADpD,uFAQE,WAAmBG,EAAgB4E,GAAnC,eAAA3J,EAAA,6DACQN,EAAO,CAAC,IAAKP,EAAcwK,IADnC,SAEe7E,KAAK4H,UAAU,UAAWhN,EAAMqF,GAF/C,wFARF,6HAYE,WAAsBA,EAAgB4E,GAAtC,eAAA3J,EAAA,6DACQN,EAAO,CAAC,IAAKP,EAAcwK,IADnC,SAEe7E,KAAK4H,UAAU,WAAYhN,EAAMqF,GAFhD,wFAZF,0HAgBE,WAAmBA,GAAnB,eAAA/E,EAAA,sEAGoB8E,KAAKoF,MAAM,WAAY,CAAC,IAAKnF,IAHjD,YAGQ3C,EAHR,UAIaA,EAAIuH,OAJjB,yCAKWpK,EAAc6C,EAAIuH,SAL7B,cAOI7L,QAAQC,IAAI,4BAPhB,kBAQW,KARX,gDAhBF,4DAA6B4G,GCHvB4H,GAAe,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,YAAY,KAAO,kBAAkB,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,UAAU,CAAC,aAAe,aAAa,KAAO,aAAa,KAAO,cAAc,CAAC,aAAe,aAAa,KAAO,cAAc,KAAO,eAAe,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,aAG7pHmB,GAAb,kDACE,WAAY1Q,EAAS4H,EAAiBC,GAAa,IAAD,8BAChD,cAAM7H,EAAS4H,EAAiBC,IAC3BG,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBAJyC,EADpD,uFAQE,WAAmBG,EAAgB4E,GAAnC,eAAA3J,EAAA,6DACQN,EAAO,CAACP,EAAcwK,IAD9B,SAEe7E,KAAK4H,UAAU,eAAgBhN,EAAMqF,GAFpD,wFARF,6HAaE,WAAsBA,EAAgB4E,GAAtC,eAAA3J,EAAA,6DACQN,EAAO,CAACP,EAAcwK,IAD9B,SAEe7E,KAAK4H,UAAU,kBAAmBhN,EAAMqF,GAFvD,wFAbF,2HAkBE,4BAAA/E,EAAA,sEACoB8E,KAAKoF,MAAM,iBAD/B,cACQ9H,EADR,yBAES,CACLoI,gBAAiBjL,EAAc6C,EAAIoI,iBACnCC,mBAAoBlL,EAAc6C,EAAIqI,sBAJ1C,gDAlBF,yHA0BE,4BAAAzK,EAAA,sEACoB8E,KAAKoF,MAAM,kBAD/B,cACQ9H,EADR,yBAGS,CACL2E,UAAWxH,EAAc6C,KAJ7B,gDA1BF,uHAkCE,4BAAApC,EAAA,sEACoB8E,KAAKoF,MAAM,kBAD/B,YACQ9H,EADR,UAEaA,EAAI2E,UAFjB,yCAGWxH,EAAc6C,EAAI2E,YAH7B,aAKQ,IAAIlK,MAAJ,mDACwCiI,KAAKnE,cANrD,gDAlCF,2DAA6BgE,GCHvB4H,GAAa,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,QAAQ,KAAO,GAAG,KAAO,UAAU,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,aAG33GoB,GAAb,kDACE,WAAY3Q,EAAS4H,EAAiBjE,EAAaiN,GAAc,IAAD,8BAC9D,cAAM5Q,EAAS4H,EAAiBgJ,IAC3BjN,YAAcA,EACnB,EAAKqE,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBALuD,EADlE,qFAUE,WAAiBG,GAAjB,eAAA/E,EAAA,sEACwB8E,KAAKoF,MAAM,YAAa,CAC5CnF,EACAD,KAAKnE,cAHT,cACM8L,EADN,yBAKSlN,EAAckN,GAAWjD,GAAG,IALrC,gDAVF,kHAiBE,WAAazE,GAAb,SAAA/E,EAAA,sEAEe8E,KAAK4H,UAChB,UACA,CAAC5H,KAAKnE,YAAaL,GACnByE,GALJ,wFAjBF,oHA0BE,sBAAA/E,EAAA,sEACe8E,KAAKoF,MAAM,YAD1B,wFA1BF,mHA8BE,WAAe9N,GAAf,SAAA4D,EAAA,sEACe8E,KAAKoF,MAAM,YAAa,CAAC9N,IADxC,wFA9BF,mHAkCE,WAAcA,GAAd,qBAAA4D,EAAA,sEACgCiG,QAAQC,IAAI,CACxCpB,KAAK6H,SAASvQ,GACd0I,KAAK8H,aAHT,0CACSxK,EADT,KACcwK,EADd,uBAKS1Q,EAAGkG,GAAMwK,IALlB,gDAlCF,4DAAkCjI,GCH5B4H,GAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,iBAAiB,KAAO,SAAS,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,aAG5lLsB,GAAb,kDACE,WAAY7Q,EAAS4H,EAAiBgJ,GAAc,IAAD,8BACjD,cAAM5Q,EAAS4H,EAAiBgJ,IAC3B5I,SAAW,IAAI,EAAKzC,KAAKgC,IAAII,SAChC4H,GACA,EAAK3H,iBAJ0C,EADrD,iFAQE,WAAaG,EAAgB4E,EAAQmE,GAArC,iBAAA9N,EAAA,+DACiDsB,EAC7CwM,GADuBC,EAD3B,EACUpM,gBADV,kBAKSmD,KAAK4H,UACV,SACA,CAACvN,EAAcwK,GAASmE,EAAWC,GACnChJ,IARJ,gDARF,wHAoBE,WACEA,EACA4E,EACAqE,EACAC,EACAC,EACAjD,EACAC,EACAC,GARF,SAAAnL,EAAA,+EAUS8E,KAAK4H,UACV,QACA,CAAC/C,EAAQqE,EAAaC,EAAcC,EAAWjD,EAAGC,EAAGC,GACrDpG,IAbJ,gDApBF,0EAAsCJ,GCSzBwJ,GAAmB,WAC9B,IAAMC,EAAsB,GAC5B,OAAO,WAA8B,IAA7BnQ,EAA4B,wDAC5B7B,EAAU4B,EAAmBvB,EAAQE,MAAOsB,GAC5CoQ,EAAMjS,EACZ,GAAIyG,OAAOC,KAAKsL,GAAqBrL,SAASsL,GAC5C,OAAOD,EAAoBC,GAE7B,IAAMC,EAAW,IAAIpB,GAAiB9Q,GAEtC,OADAgS,EAAoBC,GAAOC,EACpBA,GAVqB,GA4BnBC,IAd2B,WACtC,IAAMH,EAAsB,GADU,GAcH,WACnC,IAAMI,EAA2B,GACjC,OAAO,SAACxR,EAAS4H,GAAyC,IACpDyJ,EAD4BxJ,EAAuB,wDAOvD,GAJEwJ,EADExJ,EACC,UAAM7H,EAAN,YAAiB4H,EAAjB,eAEA,UAAM5H,EAAN,YAAiB4H,GAElB/B,OAAOC,KAAK0L,GAA0BzL,SAASsL,GACjD,OAAOG,EAAyBH,GAElC,IAAMI,EAAgB,IAAIxE,GACxBjN,EACA4H,EACAC,GAIF,OADA2J,EAAyBH,GAAOI,EACzBA,GAnB0B,IAuBxBC,GAAiB,WAC5B,IAAMC,EAAoB,GAC1B,OAAO,SAAC3R,EAAS4H,EAAiBjE,GAAqC,IACjE0N,EADyCxJ,EAAuB,wDAOpE,GAJEwJ,EADExJ,EACC,UAAM7H,EAAN,YAAiB4H,EAAjB,YAAoCjE,EAApC,eAEA,UAAM3D,EAAN,YAAiB4H,EAAjB,YAAoCjE,GAErCkC,OAAOC,KAAK6L,GAAmB5L,SAASsL,GAC1C,OAAOM,EAAkBN,GAE3B,IAAMjR,EAAS,IAAIoP,GACjBxP,EACA4H,EACAjE,EACAkE,GAIF,OADA8J,EAAkBN,GAAOjR,EAClBA,GApBmB,GAwBjBwR,GAAiB,WAC5B,IAAMC,EAAoB,GAC1B,OAAO,SAAC7R,EAAS4H,EAAiBjE,GAAqC,IACjE0N,EADyCxJ,EAAuB,wDAOpE,GAJEwJ,EADExJ,EACC,UAAM7H,EAAN,YAAiB4H,EAAjB,YAAoCjE,EAApC,eAEA,UAAM3D,EAAN,YAAiB4H,EAAjB,YAAoCjE,GAErCkC,OAAOC,KAAK+L,GAAmB9L,SAASsL,GAC1C,OAAOQ,EAAkBR,GAE3B,IAAMhR,EAAS,IAAIwP,GACjB7P,EACA4H,EACAjE,EACAkE,GAIF,OADAgK,EAAkBR,GAAOhR,EAClBA,GApBmB,GAwBjByR,GAAiB,WAC5B,IAAMC,EAAoB,GAC1B,OAAO,SAAC/R,EAAS4H,EAAiBjE,GAAqC,IACjE0N,EADyCxJ,EAAuB,wDAOpE,GAJEwJ,EADExJ,EACC,UAAM7H,EAAN,YAAiB4H,EAAjB,YAAoCjE,EAApC,eAEA,UAAM3D,EAAN,YAAiB4H,EAAjB,YAAoCjE,GAErCkC,OAAOC,KAAKiM,GAAmBhM,SAASsL,GAC1C,OAAOU,EAAkBV,GAE3B,IAAM/Q,EAAS,IAAI0P,GACjBhQ,EACA4H,EACAjE,EACAkE,GAIF,OADAkK,EAAkBV,GAAO/Q,EAClBA,GApBmB,GAwBjB0R,GAA0B,WACrC,IAAMC,EAAoB,GAC1B,OAAO,SAACjS,EAAS4H,GAAyC,IACpDyJ,EAD4BxJ,EAAuB,wDAOvD,GAJEwJ,EADExJ,EACC,UAAM7H,EAAN,YAAiB4H,EAAjB,eAEA,UAAM5H,EAAN,YAAiB4H,GAElB/B,OAAOC,KAAKmM,GAAmBlM,SAASsL,GAC1C,OAAOY,EAAkBZ,GAE3B,IAAMa,EAAS,IAAI1B,GAAgBxQ,EAAS4H,EAAiBC,GAG7D,OADAoK,EAAkBZ,GAAOa,EAClBA,GAf4B,GChI1BC,IDmJkB,WAC7B,IAAMC,EAAqB,GADE,GAkBA,WAC7B,IAAMC,EAAqB,GADE,GAkBH,WAC1B,IAAMC,EAAkB,GADE,GAuBI,WAC9B,IAAMC,EAAsB,GADE,GC9MR,uCAAG,WAAOC,GAAP,mCAAAxP,EAAA,6DACnByP,EAAKtB,IAAgB,GAC3BqB,EAAc5Q,EAAkB4Q,GAFP,SAGPC,EACfnC,UAAU,CAAC,GAAD,OACNkC,EADM,4BAENA,EAFM,2BAGNA,EAHM,6BAINA,EAJM,0BAKNA,EALM,sBAMNA,EANM,sBAONA,EAPM,sBAQNA,EARM,kBAUVE,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,cAAeoF,MAdpB,YAGnBf,EAHmB,6CAgBoCA,EAhBpC,GAgBhBpF,EAhBgB,KAgBP2M,EAhBO,KAgBCgG,EAhBD,KAgBWC,EAhBX,KAgBkB3E,EAhBlB,KAgBqBC,EAhBrB,KAgBwBC,EAhBxB,KAgB2B0E,EAhB3B,uBAiBhB,CACL7S,QAASwC,EAAaxC,GACtB2M,OAAQpK,EAAcoK,GACtBgG,SAAUnQ,EAAamQ,GACvBC,MAAOpQ,EAAaoQ,GACpB3E,EAAGzL,EAAayL,GAChBC,IACAC,IACA0E,OlB0EqBjU,EkB1EHiU,ElB2EO,IAAzB3T,EAAGN,GAAOkU,ckBpGW,iClBmGD,IAAClU,IkBnGA,OAAH,uDA8BXmU,GAAkB,uCAAG,WAAOP,GAAP,uBAAAxP,EAAA,6DAC1ByP,EAAKtB,IAAgB,GAC3BqB,EAAc5Q,EAAkB4Q,GAFA,SAGdC,EACfnC,UAAU,CAAC,GAAD,OACNkC,EADM,+BAENA,EAFM,0BAIVE,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,qBAAsBoF,MARpB,YAG1Bf,EAH0B,6CAUIA,EAVJ,GAUvB4N,EAVuB,KAUZC,EAVY,uBAWvB,CACLC,GAAI3Q,EAAcyQ,GAClBG,MAAO5Q,EAAc0Q,KAbO,2CAAH,sDAkBlBG,GAAgB,uCAAG,WAAOZ,GAAP,qBAAAxP,EAAA,6DACxByP,EAAKtB,IAAgB,GAC3BqB,EAAc5Q,EAAkB4Q,GAFF,SAGZC,EACfnC,UAAU,CAAC,GAAD,OAAIkC,EAAJ,kBACVE,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,mBAAoBoF,MALpB,YAGxBf,EAHwB,6CAOZA,EAPY,GAOrBiO,EAPqB,uBAQrB,CACLA,MAAO7Q,EAAa6Q,KATM,2CAAH,sDAgChBC,GAAc,uCAAG,WAAOd,GAAP,mBAAAxP,EAAA,sEACLmP,GAAYK,GADP,cACtBe,EADsB,gBAEER,GAAmBP,GAFrB,cAEtBgB,EAFsB,gBAGAJ,GAAiBZ,GAHjB,cAGtBiB,EAHsB,yBAIrB5N,OAAO6N,OAAOH,EAAUC,EAAiBC,IAJpB,4CAAH,sDAiBdE,GAAgB,uCAAG,WAAO3T,EAAS2D,GAAhB,yBAAAX,EAAA,6DAExByP,EAAKtB,KAFmB,kBAIVsB,EACfnC,UAAU,CAAC,GAAD,OAAItQ,EAAJ,YAAe2D,EAAf,gBACV+O,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,mBAAoBoF,MANtB,UAItBf,EAJsB,SAOT1B,EAAuB1D,EAAS2D,GAA3ChD,EAPoB,EAOpBA,QACJyE,EARwB,qCASNA,EATM,GASnB2E,EATmB,uBAUnB,CACLA,UAAWxH,EAAcwH,GAAWzH,WACpC3B,WAZwB,yDAgB5BG,QAAQC,IAAR,MAhB4B,0DAAH,wDA+BhB6S,GAAc,uCAAG,WAAO5T,EAAS2D,GAAhB,2BAAAX,EAAA,6DACtByP,EAAKtB,IAAgB,GADC,SAKpB3N,EAAcD,EAAevD,GALT,SAMRyS,EACfnC,UAAU,CAAC,GAAD,OACN9M,EADM,YACSG,EADT,kBAENH,EAFM,YAESG,EAFT,wBAGNH,EAHM,YAGSG,EAHT,iBAKV+O,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,iBAAkBoF,MAZtB,YAMpBf,EANoB,6CAcWA,EAdX,GAcjByO,EAdiB,KAcZC,EAdY,KAcFC,EAdE,uBAejB,CACLF,IAAKrR,EAAaqR,GAClBC,SAAUtR,EAAasR,GACvBC,UAAWvR,EAAauR,KAlBF,yDAsB1BjT,QAAQC,IAAR,MAtB0B,0DAAH,wDAqCdiT,GAAiB,uCAAG,WAAOhU,EAAS2D,GAAhB,2BAAAX,EAAA,6DACzByP,EAAKtB,IAAgB,GADI,SAGvB3N,EAAcD,EAAevD,GAHN,SAIXyS,EACfnC,UAAU,CAAC,GAAD,OACN9M,EADM,YACSG,EADT,kBAENH,EAFM,YAESG,EAFT,wBAGNH,EAHM,YAGSG,EAHT,iBAKV+O,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,iBAAkBoF,MAVnB,YAIvBf,EAJuB,6CAYQA,EAZR,GAYpByO,EAZoB,KAYfC,EAZe,KAYLC,EAZK,uBAapB,CACLF,IAAKrR,EAAaqR,GAClBC,SAAUtR,EAAasR,GACvBC,UAAWvR,EAAauR,KAhBC,yDAoB7BjT,QAAQC,IAAR,MApB6B,0DAAH,wDAsEjBkT,GAAiB,uCAAG,WAAOjU,EAAS2D,EAAa6O,GAA7B,yBAAAxP,EAAA,6DACzByP,EAAKtB,IAAgB,GAE3BqB,EAAc5Q,EAAkB4Q,GAHD,SAKvBhP,EAAcD,EAAevD,GALN,SAMXyS,EACfnC,UAAU,CAAC,GAAD,OACN9M,EADM,YACSG,EADT,YACwB6O,EADxB,wBAENhP,EAFM,YAESG,EAFT,YAEwB6O,EAFxB,iBAIVE,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,oBAAqBoF,MAXtB,YAMvBf,EANuB,8CAaGA,EAbH,GAapB0O,EAboB,KAaVC,EAbU,uBAcpB,CACLD,SAAUtR,EAAasR,GACvBC,UAAWvR,EAAauR,KAhBC,0DAoB7BjT,QAAQC,IAAR,MApB6B,0DAAH,0DC5OjBmT,GAAoB,WAC/B,IAAIC,EAAc,GAClB,MAAO,CACLxU,IADK,SACDK,EAAS4H,GACX,IAAMyJ,EAAG,UAAMrR,EAAN,YAAiB4H,GAC1B,GAAI/B,OAAOC,KAAKqO,GAAapO,SAASsL,GACpC,OAAO8C,EAAY9C,GAErBvQ,QAAQC,IAAR,0CAA+CsQ,KAGjDzR,IATK,SASDI,EAAS4H,EAAiBwM,GAC5B,IAAM/C,EAAG,UAAMrR,EAAN,YAAiB4H,GAC1BuM,EAAY9C,GAAO+C,IAbQ,GA0CpBC,IAxBuB,WAClC,IAAIC,EAAkB,GADY,GAwBT,WACzB,IAAIC,EAAS,GACTC,EAAY,KAChB,MAAO,CACL7U,IADK,WAKH,MAHe,KAAX4U,GACFzT,QAAQC,IAAI,6BAEPwT,GAEHE,QAPD,SAOSzU,EAAS2D,GAAc,OAAD,0HAChBmB,EAAe9E,EAAS2D,GADR,OAEtB,MADNyB,EAD4B,UAGhCmP,EAASnP,GAHuB,8CAMpCsP,OAbK,SAaE1U,EAAS2D,GACd,IAAM6E,EAAOV,KACb0M,EAAYG,aAAY,WAEtBnM,EAAKiM,QAAQzU,EAAS2D,KACrB,MAELiR,MApBK,WAqBCJ,GACFK,cAAcL,GAEhBD,EAAS,KA3BY,IAuCdO,GAAgC,WAC3C,IAAIC,EAAc,GAClB,MAAO,CACLpV,IADK,WAKH,OAHKoV,EAAYjL,YACfhJ,QAAQC,IAAI,iDAEPgU,GAEHL,OAPD,SAOQ1U,EAAS2D,GAAc,OAAD,mHAC3B8N,EAAgBF,GAAqBvR,EAAS2D,GADnB,SAEf8N,EAAcnD,gBAFC,cAE3BlJ,EAF2B,QAGzB0E,aACNiL,EAAc3P,GAJiB,kBAM1BA,GAN0B,+CATM,GCvBhC4P,GAAgB,uCAAG,WAC9BhV,EACA2D,EACAoE,GAH8B,mDAAA/E,EAAA,+DAKJU,EAAuB1D,EAAS2D,GAAlDI,EALsB,EAKtBA,cACFkR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCvD,EAASsR,GAAc1R,EAAS+D,EAAeJ,GARvB,SAuBpBsR,EAAM3G,gBAvBc,uBAW5BxE,EAX4B,EAW5BA,WACAyD,EAZ4B,EAY5BA,SACAlC,EAb4B,EAa5BA,mBACAU,EAd4B,EAc5BA,sBACAO,EAf4B,EAe5BA,0BACAkB,EAhB4B,EAgB5BA,gBACAC,EAjB4B,EAiB5BA,mBACAtD,EAlB4B,EAkB5BA,uBACAuD,EAnB4B,EAmB5BA,qBACAC,EApB4B,EAoB5BA,qBACAC,EArB4B,EAqB5BA,oBACAC,EAtB4B,EAsB5BA,oBAtB4B,UAwBToH,EAAMtU,SAxBG,eAwBxBA,EAxBwB,iBAyBLP,EAAOO,SAzBF,eAyBxBuU,EAzBwB,yBA2BvB,CACLC,UAAWxR,EACXhD,SACAyU,QAASF,EACTpL,WAAYA,EAAWxH,WACvBiL,SAAUA,EAASjL,WACnB+I,mBAAoBA,EAAmB/I,WACvCyJ,sBAAuBA,EAAsBzJ,WAC7CgK,0BAA2BA,EAA0BhK,WACrDkL,gBAAiBA,EAAgBlL,WACjCmL,mBAAoBA,EAAmBnL,WACvC6H,uBAAwBA,EAAuB7H,WAC/CoL,qBAAsBA,EAAqBpL,WAC3CqL,qBAAsBA,EAAqBrL,WAC3CsL,oBAAqBA,EAAoBtL,WACzCuL,oBAAqBA,EAAoBvL,aA1Cb,4CAAH,0DA6DhB+S,GAAe,uCAAG,WAAOrV,EAAS2D,EAAaoE,GAA7B,uCAAA/E,EAAA,sEACT8B,EAAe9E,EAAS2D,GADf,cACvBuB,EADuB,SAEHxB,EAAuB1D,EAAS2D,GAAlDK,EAFqB,EAErBA,cACFiR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCtD,EAASuR,GAAc5R,EAASgE,EAAeL,GALxB,SAWnBsR,EAAM3G,gBAXa,uBAQ3BxE,EAR2B,EAQ3BA,WACAiC,EAT2B,EAS3BA,sBACAO,EAV2B,EAU3BA,0BAV2B,UAYUjM,EAAOgV,gBAAgBtN,GAZjC,wBAYrB6D,EAZqB,EAYrBA,OAAQM,EAZa,EAYbA,OAAQL,EAZK,EAYLA,KAZK,kBActB,CACLD,OAAQA,EAAOtJ,WACfgT,kBAAmB3J,GAAoBC,EAAQC,EAAM/B,GAAYxH,WACjE4J,OAAQA,EAAO5J,WACfiT,WAAYzJ,GACV5G,EACA0G,EACA9B,EACAiC,GACAzJ,WACFkT,cAAexJ,GAAa9G,EAAO0G,EAAQ9B,EAAY+B,GAAMvJ,WAC7DmT,iBAAkBpJ,GAChBT,EACAM,EACAL,EACA/B,EACAwC,GACAhK,aA/ByB,4CAAH,0DAiDfoT,GAAgB,uCAAG,WAC9B1V,EACA2D,EACAoE,GAH8B,+CAAA/E,EAAA,+DAKJU,EAAuB1D,EAAS2D,GAAlDM,EALsB,EAKtBA,cACFgR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCrD,EAASwR,GAAc9R,EAASiE,EAAeN,GARvB,SAWmBsF,QAAQC,IAAI,CAC3D5I,EAAOf,QAAQwI,GACfzH,EAAOqV,gBAbqB,0CAWvBxK,EAXuB,KAWRH,EAXQ,eAeVlG,EAAe9E,EAAS2D,GAfd,eAexBuB,EAfwB,iBAoBpB+P,EAAM5G,iBApBc,wBAiB5BtE,EAjB4B,EAiB5BA,UACAqB,EAlB4B,EAkB5BA,eACAvB,EAnB4B,EAmB5BA,iBAnB4B,UAqBmBoL,EAAM3G,gBArBzB,wBAqBtBxE,EArBsB,EAqBtBA,WAAYuB,EArBU,EAqBVA,mBACduK,EAAoB7L,EAAUyB,KAClCJ,EAAeK,MAAM5B,EAAiB9K,MAAMmG,GAAOnG,MAAM+K,KAvB7B,kBA0BvB,CACL6L,YAAa3K,EAAkB1I,WAC/BuT,cAAe9L,EAAUzH,WACzBwT,OAAQ3K,EAAc7I,WACtBgJ,WAAYP,GACVC,EACA4K,GACAtT,WACFyT,mBAAoB7K,GAClBC,EACAH,EACAjB,EACAF,EACAuB,EACAtB,EACAuB,EACAnG,GACA5C,aA3C0B,4CAAH,0DAwDhB0T,GAAgB,uCAAG,WAC9BhW,EACA2D,EACAoE,GAH8B,qBAAA/E,EAAA,+DAKJU,EAAuB1D,EAAS2D,GAAlDI,EALsB,EAKtBA,cACF3D,EAASsR,GAAc1R,EAAS+D,EAAeJ,GANvB,SAQRvD,EAAOb,QAAQwI,GARP,cAQxBxI,EARwB,yBASvBA,EAAQ+C,YATe,2CAAH,0DAqBhB2T,GAAU,uCAAG,WAAOjW,EAAS2D,EAAaoE,GAA7B,mBAAA/E,EAAA,+DACEU,EAAuB1D,EAAS2D,GAAlDI,EADgB,EAChBA,cACF3D,EAASsR,GAAc1R,EAAS+D,EAAeJ,GAF7B,SAIXvD,EAAO6V,WAAWlO,GAJP,mFAAH,0DAmBVmO,GAAM,uCAAG,WAAOlW,EAAS2D,EAAaoE,GAA7B,uBAAA/E,EAAA,+DACMU,EAAuB1D,EAAS2D,GAAlDI,EADY,EACZA,cACF3D,EAASsR,GAAc1R,EAAS+D,EAAeJ,GAFjC,kBAODvD,EAAO8V,OAAOnO,GAPb,OAOZQ,EAPY,OAQlBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GARlB,gDAUlBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IAVX,iCAYbhC,GAZa,yDAAH,0DAsDN+Q,GAAe,uCAAG,WAAOnW,EAAS2D,EAAaiI,GAA7B,uBAAA5I,EAAA,yDAEzBkC,EAAQmP,GAAW1U,MACnByW,EAAatB,GAA6BnV,MAChC,KAAVuF,EAJyB,gCAKrBmP,GAAWK,OAAO1U,EAAS2D,GALN,OAM3BuB,EAAQmP,GAAW1U,MANQ,UAUxByW,EAAWtM,WAVa,iCAWRgL,GAA6BJ,OAC9C1U,EACA2D,GAbyB,OAW3ByS,EAX2B,sBAiBrBtM,GAjBqB,EAiBIsM,GAAzBtM,WAAYyD,EAjBS,EAiBTA,SAjBS,kBAkBtBrO,EAAG0M,GACP3B,MACAlL,MAAMmG,GACNnG,MAAM+K,GACN/K,MAAMwO,GACNjL,YAvB0B,4CAAH,0DAuCf+T,GAAc,uCAAG,WAAOrW,EAAS2D,GAAhB,6BAAAX,EAAA,6DACtByO,EAAgBF,GAAqBvR,EAAS2D,GADxB,SAGV8N,EACf4E,iBACA3D,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,iBAAkBoF,MALpB,cAGtBf,EAHsB,OAM5B8O,GAAiBtU,IAAII,EAAS2D,EAAayB,GANf,SAOLwO,GAAe5T,EAAS2D,GAPnB,UAOtB2S,EAPsB,QASxBlR,EATwB,wBAYxBiF,EAIEjF,EAJFiF,YACAmE,EAGEpJ,EAHFoJ,oBACAzE,EAEE3E,EAFF2E,UACAF,EACEzE,EADFyE,iBAEI+B,EAAS0K,EAASvC,UAjBE,kBAoBnB,CACLwC,aAAcnU,EAAsBiI,GACpCmE,oBAAqB1P,IAAU0P,GAAqBgI,cAAc,IAClEzM,UAAWA,EAAUzH,WACrBsJ,OAAQrJ,EAAcqJ,GAAQtJ,WAC9BuH,iBAAkBA,EAAiBvH,aAzBX,4CAAH,wDAwCdmU,GAAuB,uCAAG,WACrCzW,EACA2D,EACA+S,GAHqC,qBAAA1T,EAAA,yDAOrCoC,EAAM8O,GAAiBvU,IAAIK,EAAS2D,GAPC,uBAS7B8N,EAAgBF,GAAqBvR,EAAS2D,GATjB,SAUvB8N,EAAc4E,iBAVS,OAUnCjR,EAVmC,kBAYjCA,EAZiC,oBAa7BgR,EAAa,CACjBlX,EAAGkG,EAAIyE,kBAAkB2B,KAAKtM,EAAGwX,IAAepU,WAChD8C,EAAIF,MACJE,EAAI0E,WACJ1E,EAAI2E,UACJ3E,EAAI+E,yBAEF1H,EAAmB,WAAnB,EAAuB2T,GApBQ,0CAqB1B,CACLO,aAAc,MAtBiB,eA0BnCA,EAAezM,EAAoB,WAApB,EAAwBkM,GACvCO,EAAevM,GAAmBpK,EAAS2W,GA3BR,kBA4B5B,CACLA,aAAcvU,EAAsBuU,KA7BH,4CAAH,0DA2CvBC,GAAgB,uCAAG,WAAO5W,EAAS2D,GAAhB,mBAAAX,EAAA,yDAE9BoC,EAAM8O,GAAiBvU,IAAIK,EAAS2D,GAFN,uBAItB8N,EAAgBF,GAAqBvR,EAAS2D,GAJxB,SAKhB8N,EAAc4E,iBALE,OAK5BjR,EAL4B,kBAO1BA,EAP0B,uBAQpBqJ,EAAkBrJ,EAAlBqJ,cARoB,kBASrB,CACLoI,eAAgBzU,EAAsBqM,KAVZ,2CAAH,wDAyBhBqI,GAAyB,uCAAG,WACvC9W,EACA2D,EACA+S,GAHuC,qBAAA1T,EAAA,yDAMvCoC,EAAM8O,GAAiBvU,IAAIK,EAAS2D,GANG,uBAQ/B8N,EAAgBF,GAAqBvR,EAAS2D,GARf,SASzB8N,EACT4E,iBACA3D,OAAM,SAACvM,GAAD,OAASrF,QAAQC,IAAI,mBAAoBoF,MAXb,OASrCf,EATqC,kBAanCA,EAbmC,oBAc/BgR,EAAa,CACjBlX,EAAGkG,EAAIyE,kBAAkB2B,KAAKtM,EAAGwX,IAAepU,WAChD8C,EAAIF,MACJE,EAAI0E,WACJ1E,EAAI2E,UACJ3E,EAAI4E,kBAEFvH,EAAmB,WAAnB,EAAuB2T,GArBU,0CAsB5B,CACLW,eAAgB,MAvBiB,eA0B/BA,EAAiBnN,EAAsB,WAAtB,EAA0BwM,GA1BZ,kBA2B9B,CACLW,eAAgB3U,EAAsB2U,KA5BH,4CAAH,0DA8CzBC,GAAa,uCAAG,WAC3BhX,EACA2D,EACAoE,EACA4E,GAJ2B,eAAA3J,EAAA,6DAMrBiS,EAAQ1D,GAAqBvR,EAAS2D,GANjB,SAOdsR,EAAM+B,cAAcjP,EAAgB5F,EAAcwK,IAPpC,mFAAH,4DAuBbsK,GAAc,uCAAG,WAC5BjX,EACA2D,EACAoE,EACA4E,GAJ4B,2CAAA3J,EAAA,+DAOFU,EAAuB1D,EAAS2D,GAAlDK,EAPoB,EAOpBA,cACFiR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCtD,EAASuR,GAAc5R,EAASgE,EAAeL,GAVzB,SAaRmB,EAAe9E,EAAS2D,GAbhB,cAatBuB,EAbsB,gBAcW7E,EAAOgV,gBAAgBtN,GAdlC,uBAcpB6D,EAdoB,EAcpBA,OAAQM,EAdY,EAcZA,OAAQL,EAdI,EAcJA,KAdI,UAewBoJ,EAAM3G,gBAf9B,oBAepBxE,EAfoB,EAepBA,WAAYiC,EAfQ,EAeRA,sBAEdmL,EAAoBjL,GACxB/G,EACA0G,EACAM,EACAL,EACA/B,EACAiC,IAEE7M,EAAGyN,GAAQjB,IAAIwL,GAzBS,4CA2BPjC,EAAMtG,cACrB,gEACA,CAACxM,EAAcwK,IACf5E,GA9BsB,QA2BlBQ,EA3BkB,OAgCxBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAhCZ,mDAkCxBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IAlCL,gCAqC1BhC,EAAM,CAAE+B,SAAS,EAAOC,MAAO,0BArCL,iCAuCrBhC,GAvCqB,2DAAH,4DAuFd+R,GAAY,uCAAG,WAC1BnX,EACA2D,EACAoE,EACA4E,GAJ0B,mBAAA3J,EAAA,6DAMpBiS,EAAQ1D,GAAqBvR,EAAS2D,GANlB,kBAUPsR,EAAMtG,cACrB,8DACA,CAACxM,EAAcwK,IACf5E,GAbsB,OAUlBQ,EAVkB,OAexBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAfZ,gDAiBxBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IAjBL,iCAmBnBhC,GAnBmB,yDAAH,4DAmCZgS,GAAe,uCAAG,WAC7BpX,EACA2D,EACAoE,EACA+N,GAJ6B,mDAAA9S,EAAA,+DAMHU,EAAuB1D,EAAS2D,GAAlDM,EANqB,EAMrBA,cACFgR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCrD,EAASwR,GAAc9R,EAASiE,EAAeN,GATxB,SAWTmB,EAAe9E,EAAS2D,GAXf,cAWvBuB,EAXuB,gBAYoB+D,QAAQC,IAAI,CAC3D5I,EAAOf,QAAQwI,GACfzH,EAAOqV,gBAdoB,0CAYtBxK,EAZsB,KAYPH,EAZO,eAgBoBiK,EAAM3G,gBAhB1B,wBAgBrBxE,EAhBqB,EAgBrBA,WAAYuB,EAhBS,EAgBTA,mBAhBS,UAqBnB4J,EAAM5G,iBArBa,oBAkB3BtE,EAlB2B,EAkB3BA,UACAF,EAnB2B,EAmB3BA,iBACAuB,EApB2B,EAoB3BA,eAGI2K,EAAqB7K,GACzBC,EACAH,EACAjB,EACAF,EACAuB,EACAtB,EACAuB,EACAnG,IAGEhG,EAAG4W,GAAQpK,IAAIqK,GAlCU,4CAoCRd,EAAMtG,cACrB,iEACA,CAACxM,EAAc2T,IACf/N,GAvCuB,QAoCnBQ,EApCmB,OAyCzBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAzCX,mDA2CzBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IA3CJ,gCA8C3BhC,EAAM,CAAE+B,SAAS,EAAOC,MAAO,0BA9CJ,iCAgDtBhC,GAhDsB,2DAAH,4DAiEfiS,GAAe,uCAAG,WAC7BrX,EACA2D,EACAoE,EACA2E,GAJ6B,+DAAA1J,EAAA,6DAK7B2J,EAL6B,+BAKpB,IALoB,SAOT7H,EAAe9E,EAAS2D,GAPf,cAOvBuB,EAPuB,SAQHxB,EAAuB1D,EAAS2D,GAAlDK,EARqB,EAQrBA,cACFiR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCtD,EAASuR,GAAc5R,EAASgE,EAAeL,GAXxB,SAiBnBsR,EAAM3G,gBAjBa,uBAc3BxE,EAd2B,EAc3BA,WACAiC,EAf2B,EAe3BA,sBACAV,EAhB2B,EAgB3BA,mBAhB2B,UAkBiB4J,EAAM5G,iBAlBvB,wBAkBrBtE,EAlBqB,EAkBrBA,UAAWF,EAlBU,EAkBVA,iBAlBU,UAmBIxJ,EAAOgV,gBAAgBtN,GAnB3B,oBAmBrB6D,EAnBqB,EAmBrBA,OAAQM,EAnBa,EAmBbA,SAEVoL,EAAkB7K,GACtBvH,EACAgH,EACAN,EACA7B,EACAF,EACAC,EACAuB,EACAU,EACA7M,EAAGwN,GACHxN,EAAGyN,KAEexF,QAjCS,4CAmCR8N,EAAMtG,cACrB,wEACA,CAACxM,EAAcuK,GAAYvK,EAAcwK,IACzC5E,GAtCuB,QAmCnBQ,EAnCmB,OAwCzBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAxCX,mDA0CzBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IA1CJ,gCA6C3BhC,EAAM,CAAE+B,SAAS,EAAOC,MAAOkQ,EAAgBvK,SA7CpB,iCA+CtB3H,GA/CsB,2DAAH,4DA8DfmS,GAAa,uCAAG,WAAOvX,EAAS2D,EAAaoE,GAA7B,6BAAA/E,EAAA,+DACDU,EAAuB1D,EAAS2D,GAAlDK,EADmB,EACnBA,cACFiR,EAAQ1D,GAAqBvR,EAAS2D,GAEtCtD,EAASuR,GAAc5R,EAASgE,EAAeL,GAJ1B,SAMJtD,EAAOgV,gBAAgBtN,GANnB,oBAO3B6D,GADMA,EANqB,EAMrBA,QACUkB,WAEJ7B,GAAG,GATY,2CAWNgK,EAAMtG,cACrB,wEACA,CAACxM,EAAcyJ,GAAS,KACxB7D,GAdqB,QAWjBQ,EAXiB,OAgBvBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAhBb,kDAkBvBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IAlBN,gCAqBzBhC,EAAM,CAAE+B,SAAS,EAAOC,MAAO,wBArBN,iCAuBpBhC,GAvBoB,0DAAH,0DAqCboS,GAAU,uCAAG,WAAOxX,EAAS+H,GAAhB,mCAAA/E,EAAA,sEAEDsQ,GAAevL,GAFd,UAElBwL,EAFkB,OAGlB5G,EAASxK,EAAcoR,EAAS5G,QAC9BgG,EAAaY,EAAbZ,SACAC,EAAUW,EAAVX,MACA3E,EAAMsF,EAANtF,EACAC,EAAMqF,EAANrF,EACAC,EAAMoF,EAANpF,GACJoF,EAASV,MATW,sBAUhB4E,EAAqBrT,EAA8BpE,IAVnC,wBAYd0X,EAAc1F,GAAuBhS,EAASyX,GAZhC,oBAeDC,EAAYF,WAC3BzP,EACA4E,EACAgG,EACAC,EACA3E,EACAC,EACAC,GAtBgB,QAeZ5F,EAfY,OAwBlBnD,EAAM,CAAE+B,SAAS,EAAMyH,YAAarG,GAxBlB,mDA0BlBnD,EAAM,CAAE+B,SAAS,EAAOC,MAAM,EAAD,IA1BX,gCA6BpBhC,EAAM,CACJ+B,SAAS,EACTC,MAAM,iDAAD,OAAmDpH,IA/BtC,gCAmCtBoF,EAAM,CACJ+B,SAAS,EACTC,MAAO,yBArCa,iCAwCjBhC,GAxCiB,2DAAH,wDCnzBjBuS,GAAiB,uCAAG,WACxBlG,EACA/Q,EACAkX,EACA/I,EACAgJ,EACA/N,EACAyD,GAPwB,+BAAAvK,EAAA,6DASlB8U,EAAcvV,EAAcqV,EAAKE,aATf,SAUArG,EAAcsG,cAAclJ,GAV5B,cAUlBmJ,EAVkB,OAYlBC,EAAYH,EAAYtL,GAAG,GAAK,OAAS,QACzCtH,EAAQ3C,EAAcqV,EAAK1S,OAC3BgT,EAdkB,WAcPF,EAAUhK,UAdH,OAelBmK,EAAiB1G,EAAc2G,cACnCN,EACA5S,EACA4E,EACAyD,GAEI8K,EAAWP,EAAY7N,MAAMlL,MAAMmG,GAAOnG,MAAM+K,GAChD8B,EAASkM,EAAY7N,MAErB7E,EAAM,CACV6S,YACAK,UAAW5X,EACXwE,MAAOA,EAAM5C,WACb+V,SAAUA,EAAS/V,WACnBsJ,OAAQA,EAAOtJ,WACf6V,eAAgBA,EAAe7V,WAC/BiW,gBAAiBV,EAAOvV,WACxB4V,QAhCsB,kBAmCjB9S,GAnCiB,4CAAH,kEAsCjBoT,GAAqB,uCAAG,WAC5BZ,EACAC,EACAnX,EACAoJ,GAJ4B,uBAAA9G,EAAA,6DAOtB4I,EAASrJ,EAAcqV,EAAKhM,QAAQ3B,MAGpC+D,EAVsB,UAUP4J,EAAK5J,UAVE,OAWtB9I,EAAQ3C,EAAcqV,EAAK1S,OAG3BuT,EAAW7M,EAAO7M,MAAMmG,GAAOnG,MAAM+K,GAGrC1E,EAAM,CACV6S,UAAW,cACXK,UAAW5X,EACXwE,MAAO/C,EAAc+C,GAAO5C,WAC5B+V,SAAUlW,EAAcsW,GAAUnW,WAClCsJ,OAAQzJ,EAAcyJ,GAAQtJ,WAC9B6V,eAAgB,IAChBI,gBAAiBV,EAAOvV,WACxB4V,KAAMlK,GAzBoB,kBA+BrB5I,GA/BqB,2CAAH,4DAmDdsT,GAAe,uCAAG,WAAO1Y,EAAS2D,EAAaoE,GAA7B,qDAAA/E,EAAA,6DACvB2V,EADuB,UACV3Y,EADU,YACC2D,GACxB8O,EAAKtB,KAFkB,SAGoBlI,QAAQC,IAAI,CAC3DuJ,EAAGnC,UAAU,CAAC,GAAD,OAAIqI,EAAJ,wBACblG,EAAGnC,UAAU,CAAC,GAAD,OAAIqI,EAAJ,8BALc,sCAGxBC,EAHwB,KAGRC,EAHQ,KAO7BD,EAAiB3W,EAAY2W,EAAe,IAC5CC,EAAqB5W,EAAY4W,EAAmB,IAC7B,IAAnBD,GAA+C,IAAvBC,EATC,kCAgBjB5P,QAAQC,IAAI,CACpB4P,GAAuB9Y,EAAS2D,EAAaoE,GAC7CgR,GACE/Y,EACA2D,EACAoE,EACA6Q,EAAiB,GAEnBI,GAA2BhZ,EAAS2D,EAAaoE,GACjDkR,GACEjZ,EACA2D,EACAoE,EACA8Q,EAAqB,KA7BE,2CAYzBK,EAZyB,KAazBC,EAbyB,KAczBC,EAdyB,KAezBC,EAfyB,KAgCrBjM,EAAS+L,EACZG,OAAOD,GACPC,OAAOJ,GACPI,OAAOF,GAnCiB,kBAoCpBhM,EAAOmM,MAAK,SAACvW,EAAGwW,GAAJ,OAAUlR,SAASkR,EAAEtB,MAAQ5P,SAAStF,EAAEkV,UApChC,iBAsCFxU,EAAuB1D,EAAS2D,GAAjDlD,EAtCmB,EAsCnBA,aACRmY,EAAiBtQ,SAAS7H,GAC1BoY,EAAqBvQ,SAAS7H,GAxCH,UAyCgCwI,QAAQC,IAAI,CACrE6P,GACE/Y,EACA2D,EACAoE,EACA6Q,EAAiB,GAEnBK,GACEjZ,EACA2D,EACAoE,EACA8Q,EAAqB,KApDE,2CAyCpBM,EAzCoB,KAyCAE,EAzCA,KAuDrBjM,EAAS+L,EAAmBG,OAAOD,GAvDd,kBAwDpBjM,EAAOmM,MAAK,SAACvW,EAAGwW,GAAJ,OAAUlR,SAASkR,EAAEtB,MAAQ5P,SAAStF,EAAEkV,UAxDhC,4CAAH,0DA6DtBY,GAAsB,uCAAG,WAAO9Y,EAAS2D,EAAaoE,GAA7B,6CAAA/E,EAAA,6DAEzBoK,EAAS,GAEPqF,EAAKtB,KACLsI,EALuB,UAKTzZ,EALS,YAKE2D,EALF,sBAMvBgV,EANuB,UAMV3Y,EANU,YAMC2D,EAND,YAMgB/B,EAC3CmG,GAP2B,mBASE0K,EAAGnC,UAAU,CAAC,GAAD,OAAIqI,EAAJ,UAAqBc,IATpC,sCAStBrU,EATsB,UAUvBsU,EAAQzX,EAAYmD,GAVG,YAYvBsU,GAASA,GAAS,GAZK,iBAczB,IADItJ,EAAW,GACNxN,EAAI8W,EAAO9W,EAAI,EAAGA,IACnByO,EADwB,UACfsH,EADe,YACJ/V,EAAEN,YAC5B8N,EAAWA,EAASkJ,OAAO,CAAC,GAAD,OACtBjI,EADsB,wBAEtBA,EAFsB,wBAGtBA,EAHsB,oBAItBA,EAJsB,uBAKtBA,EALsB,qBAMtBA,EANsB,6BAOtBA,EAPsB,8BAQtBA,EARsB,WAhBJ,OA4BnBsI,EAAqBvJ,EAAS/M,OAAS,EA5BpB,UA8BNoP,EAAGnC,UAAUF,GA9BP,QA+BzB,IADMwJ,EA9BmB,OA+BhBhX,EAAI,EAAGA,EAAI+W,EAAoB/W,IAGhCsD,EAAO,CACX+R,UAAWlW,EAAY6X,EAHnBC,EAAgB,EAAJjX,IAGwBkX,OACxCxB,UAAWvW,EAAY6X,EAAKC,EAAY,IAAIC,OAC5C5U,MAAO3C,EAAcqX,EAAKC,EAAY,IAAIvX,WAC1C+V,SAAU9V,EAAcqX,EAAKC,EAAY,IAAIvX,WAC7CsJ,OAAQrJ,EAAcqX,EAAKC,EAAY,IAAIvX,WAC3C6V,eAAgB5V,EAAcqX,EAAKC,EAAY,IAAIvX,WACnDiW,gBAAiBqB,EAAKC,EAAY,GAClC3B,KAAMhW,EAAkB0X,EAAKC,EAAY,IAAIvX,YAE/C8K,EAAOkC,KAAKpJ,GA5CW,wBA+CzBkH,EAAS,GA/CgB,2DAkD3BtM,QAAQC,IAAR,MACAqM,EAAS,GAnDkB,iCAqDtBA,GArDsB,2DAAH,0DAyDtB2L,GAAqB,uCAAG,WAC5B/Y,EACA2D,EACAoE,EACAiH,GAJ4B,yCAAAhM,EAAA,+DAMHU,EAAuB1D,EAAS2D,GAAjDjD,EANoB,EAMpBA,aAEF+Q,EAAgBF,GAAqBvR,EAAS2D,GARxB,SAUN8N,EAAcsI,cAAc,UAVtB,cAUtB5K,EAVsB,OAY5BH,EAAY1G,SAAS0G,GACfgL,EAAU,CAAEC,MAAOlS,GAbG,SAcP0J,EAAcyI,eACjC,QACAF,EACAhL,EACAG,EAAQgL,QAlBkB,cActBlL,EAdsB,iBAwBlBwC,EAAcnD,gBAxBI,iBAqB1BxE,EArB0B,EAqB1BA,WACAyD,EAtB0B,EAsB1BA,SACAxB,EAvB0B,EAuB1BA,sBAGIqB,EAAS,GAENxK,EAAI,EA5Be,aA4BZA,EAAIqM,EAAO5L,QA5BC,wBA6BpB6C,EAAO+I,EAAOrM,GA7BM,UA+BR+U,GAChBlG,EACA/Q,EACAwF,EAAKkU,aACLlU,EAAK2I,YACL3I,EAAKqS,gBACLzO,EACAyD,EACAxB,GAvCwB,QA+BpB3G,EA/BoB,OAyC1BgI,EAAOiN,QAAQjV,GAzCW,QA4BOxC,IA5BP,iDA2CrBwK,GA3CqB,4CAAH,4DA+CrB6L,GAAyB,uCAAG,WAChCjZ,EACA2D,EACAoE,EACAiH,GAJgC,qCAAAhM,EAAA,+DAMPU,EAAuB1D,EAAS2D,GAAjDjD,EANwB,EAMxBA,aAEF+Q,EAAgBF,GAAqBvR,EAAS2D,GARpB,SAUV8N,EAAcsI,cAAc,UAVlB,cAU1B5K,EAV0B,OAWhCH,EAAY1G,SAAS0G,GACfgL,EAAU,CAAEC,MAAOlS,GAZO,SAaX0J,EAAcyI,eACjC,YACAF,EACAhL,EACAG,EAAQgL,QAjBsB,cAa1BlL,EAb0B,iBAmBHwC,EAAcnD,gBAnBX,iBAmBxBxE,EAnBwB,EAmBxBA,WAEFsD,EAAS,GAENxK,EAAI,EAvBmB,aAuBhBA,EAAIqM,EAAO5L,QAvBK,wBAwBxB6C,EAAO+I,EAAOrM,GAxBU,UA0BZ4V,GAChBtS,EAAKkU,aACLlU,EAAKqS,gBACL7X,EACAoJ,GA9B4B,QA0BxB1E,EA1BwB,OAgC9BgI,EAAOiN,QAAQjV,GAhCe,QAuBGxC,IAvBH,iDAkCzBwK,GAlCyB,4CAAH,4DAsCzB4L,GAA0B,uCAAG,WACjChZ,EACA2D,EACAoE,GAHiC,6CAAA/E,EAAA,6DAK7BoK,EAAS,GAEPqF,EAAKtB,KACLsI,EAR2B,UAQbzZ,EARa,YAQF2D,EARE,0BAS3BgV,EAT2B,UASd3Y,EATc,YASH2D,EATG,YASY/B,EAC3CmG,GAV+B,uBAYF0K,EAAGnC,UAAU,CAAC,GAAD,OAAIqI,EAAJ,UAAqBc,IAZhC,sCAY1BrU,EAZ0B,UAa3BsU,EAAQzX,EAAYmD,GAbO,YAe3BsU,GAASA,GAAS,GAfS,iBAiB7B,IADItJ,EAAW,GACNxN,EAAI8W,EAAO9W,EAAI,EAAGA,IACnByO,EADwB,UACfsH,EADe,YACJ/V,EAAEN,YAC5B8N,EAAWA,EAASkJ,OAAO,CAAC,GAAD,OACtBjI,EADsB,wBAEtBA,EAFsB,wBAGtBA,EAHsB,oBAItBA,EAJsB,uBAKtBA,EALsB,qBAMtBA,EANsB,6BAOtBA,EAPsB,8BAQtBA,EARsB,WAnBA,OA+BvBiJ,EAAyBlK,EAAS/M,OAAS,EA/BpB,UAgCVoP,EAAGnC,UAAUF,GAhCH,QAiC7B,IADMwJ,EAhCuB,OAiCpBhX,EAAI,EAAGA,EAAI0X,EAAwB1X,IAEpCsD,EAAO,CACX+R,UAAWlW,EAAY6X,EAFnBC,EAAgB,EAAJjX,IAEwBkX,OACxCxB,UAAWvW,EAAY6X,EAAKC,EAAY,IAAIC,OAC5C5U,MAAO3C,EAAcqX,EAAKC,EAAY,IAAIvX,WAC1C+V,SAAU9V,EAAcqX,EAAKC,EAAY,IAAIvX,WAC7CsJ,OAAQrJ,EAAcqX,EAAKC,EAAY,IAAIvX,WAC3C6V,eAAgB5V,EAAcqX,EAAKC,EAAY,IAAIvX,WACnDiW,gBAAiBqB,EAAKC,EAAY,GAClC3B,KAAMhW,EAAkB0X,EAAKC,EAAY,IAAIvX,YAE/C8K,EAAOkC,KAAKpJ,GA7Ce,wBAgD7BkH,EAAS,GAhDoB,2DAmD/BtM,QAAQC,IAAR,MACAqM,EAAS,GApDsB,iCAsD1BA,GAtD0B,2DAAH,2D,8EC9ShCmN,OAAOC,UAAUhb,QAAU,SAASib,GAClC,GAAGA,EAAI,IAAMA,EAAI,EACb,MAAM,IAAIC,WAAW,sDAGzB,IAAIP,EAASI,OAAOzS,MACpB,GAAIjF,MAAMsX,IAAWA,GAAUQ,KAAKC,IAAI,GAAI,IACxC,OAAOT,EAAO7X,WAElB,GAAoB,oBAARmY,GAA8B,GAAPA,EAC/B,OAAQE,KAAKE,MAAMV,GAAS7X,WAEhC,IAAI8K,EAAS+M,EAAO7X,WAChBwY,EAAY1N,EAAO2N,MAAM,KAE7B,GAAGD,EAAUzX,OAAO,EAEhB,OAAO2X,EAAO5N,GAElB,IAAI6N,EAASH,EAAU,GACnBI,EAAUJ,EAAU,GACpBK,EAAUD,EAAQ7b,OAAOob,EAAK,GAElC,GAAGS,EAAQ7X,QAAUoX,EAEjB,OAAOrN,EAEX,GAAG8N,EAAQ7X,OAASoX,EAEhB,OAAOO,EAAO5N,GAIlB,GADAA,EAAS6N,EAAS,IAAMC,EAAQ7b,OAAO,EAAGob,GACvCnS,SAAS6S,EAAS,KAAK,EAAE,CAExB,IAAIpc,EAAQ4b,KAAKC,IAAI,GAAIH,GACrBW,EAAab,OAAOnN,EAAOiO,QAAQ,IAAI,KAC3CD,IAEAhO,EAAS4N,GADTI,GAAcrc,GACa,IAE/B,OAAOqO,EAEP,SAAS4N,EAAOM,GACZ,IAAIC,EAASD,EAAIE,QAAQ,KACzB,IAAe,IAAZD,EAAc,CAEbD,GAAO,IACP,IAAI,IAAI1Y,EAAI,EAAEA,EAAE6X,EAAI7X,IAChB0Y,GAAO,IAEX,OAAOA,EAIP,IADA,IAAIG,EAAOhB,GAAOa,EAAIjY,OAASkY,EAAS,GAChCG,EAAI,EAAEA,EAAED,EAAKC,IACjBJ,GAAO,IAEX,OAAOA,K,+GCxDXK,EAAaC,aAAkB,kBAAM,iCACrCC,EAAYD,aAAkB,kBAAM,iCAY3BE,MAVf,WAEE,OAAGC,YACM,cAACJ,EAAD,IAENK,WACM,cAACH,EAAD,SADT,G,yFCHKI,EAAa9a,EADR1B,IAAQE,OACbsc,UA2DQC,EApDb,aAAc,IAAD,gCAFbC,OAAS,GAEI,KAQbC,YAAc,mBAAQ,EAAKD,OAAOtV,SARrB,KAUbwV,QAVa,sBAUF,4BAAArZ,EAAA,sEACSuD,YAAc,MAAK,SAAAM,GAEhCA,GAGD,EAAKyV,YANA,cACHlX,EADG,yBASF,IAAI6D,QAAJ,uCAAY,WAAOP,EAAQC,GAAf,mBAAA3F,EAAA,0DACdoC,EAAI+B,QADU,uBAERnH,EAAmBoF,EAAnBpF,QAAQ6G,EAAWzB,EAAXyB,QAFA,SAGM,EAAKjH,IAAII,EAAQ6G,GAHvB,OAGT0V,EAHS,OAIf7T,EAAQ6T,GAJO,sBAMf5T,EAAO,MANQ,2CAAZ,0DATE,2CAVE,KA8Bb/I,IA9Ba,uCA8BP,WAAOI,EAAQ6G,GAAf,iBAAA7D,EAAA,sEACkBqE,YAAqBrH,EAAQ6G,GAD/C,cACEtH,EADF,OAEE4c,EAAS,CAACnc,UAAQ6G,UAAQtH,UAAQD,cAAgBA,YAAcC,IACnE0c,EAAUjc,IACX6F,OAAO6N,OAAOyI,EAAdtW,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAyBoW,EAAUjc,IAAnC,IAA4Cwc,WAAY,KAE1D,EAAKL,OAASA,EANV,kBAQGA,GARH,2CA9BO,6DAyCbxc,IAAM,WACJ,OAAO,EAAKwc,QA1CD,KA6CbG,OAAS,WACP,EAAKH,OAAS,KACdM,eAAeC,WAxDD,iBAyDdjX,OAAOwB,SAASC,UA/ChByV,YAAmB7U,KAAK,CACtBqU,OAASS,IACThd,IAAMid,IACNR,QAAUQ,O,kCCdVC,EAAe3b,EAAO1B,IAAQE,OAAf,OAEfod,EAAcC,IAAMD,YAELE,E,WAKnB,aAAc,yBAJdC,MAAQ,EAIK,KAHbC,OAASJ,EAAYI,SAGR,KAFbC,QAAS,EAGPT,YAAmB7U,KAAK,CACtBoV,MAAQN,IACRS,MAAQR,IACRS,UAAYT,IACZU,MAAQV,IACRW,OAASX,M,oFAIb,WAAgBlc,GAAhB,iBAAAqC,EAAA,0DACKrC,EADL,uBAEUoC,EAAM+Z,EAAanc,EAAO8c,eAFpC,SAGsBT,IAAMrd,IAAIoD,EAAI,CAC9B2G,OAAS,CACP/I,OAASA,GAEX+c,YAAa5V,KAAKqV,OAAOQ,QAP/B,QAGUvY,EAHV,SAUcA,EAAIoE,OAAwB,IAAhB1B,KAAKsV,SACzBtV,KAAKoV,MAAQ3a,YAAc6C,EAAIoE,KAAKtE,OAAO4N,YAXjD,gD,0EAgBA,SAAMnS,GAAQ,IAAD,OACPmH,KAAK8V,UACP9V,KAAKsV,QAAS,EACdtV,KAAKqV,OAASJ,EAAYI,SAC1BrV,KAAK8V,QAAUjJ,aAAY,kBAAM,EAAK2I,UAAU3c,KAAQ,Q,mBAK5D,WACEmH,KAAKsV,QAAS,EACdtV,KAAKqV,OAAOC,SACZvI,cAAc/M,KAAK8V,SACnB9V,KAAK8V,QAAU,S,KC1CbrB,EAAS,IAAIL,EACb2B,EAAa,IAAIZ,EAEvBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUzB,OAAQA,EAAQsB,WAAYA,EAAtC,SACE,cAAC,EAAD,UAINI,SAASC,eAAe,SAI1BzY,OAAO8W,OAASA,G,0vBCrBV4B,E,wKAEJ,WACEC,IAAUf,U,kCAEZ,WACEe,IAAUC,S,oBAEZ,WACE,OACE,4B,GAVoBC,IAAMC,WAsBjB3C,IAPW,SAAC4C,GACzB,OAAOC,IAAS,CACdC,OAAQF,EACRG,QAAS,kBAAI,cAACR,EAAD,U","file":"static/js/main.b1963c73.chunk.js","sourcesContent":["\n\nimport BigNumber from 'bignumber.js'\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n","export const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/be8f2596352a4ea2986472ec46f5c6e1',\n      'https://mainnet.infura.io/v3/2ded4661ec3d4e6f9bb1c9a27a160436',\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/2ded4661ec3d4e6f9bb1c9a27a160436',\n      'https://ropsten.infura.io/v3/be8f2596352a4ea2986472ec46f5c6e1',\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/be8f2596352a4ea2986472ec46f5c6e1',\n      'https://kovan.infura.io/v3/2ded4661ec3d4e6f9bb1c9a27a160436',\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n","/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '5552805',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n      },\n      {\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6759703',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n      },\n      {\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11949485',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11860122',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '2558057',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n      },\n    ];\n  }\n  // develop environment\n  // console.log('-- test ---')\n  return [\n    {\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\n      initialBlock: '9986748',\n      bTokenSymbol: 'USDT',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '3',\n    },\n    {\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\n      initialBlock: '7796732',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n    },\n    {\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\n      initialBlock: '8108595',\n      bTokenSymbol: 'BUSD',\n      symbol: 'COIN',\n      unit: 'COIN',\n      chainId: '97',\n    },\n    {\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\n      initialBlock: '3663362',\n      bTokenSymbol: 'HUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '256',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP ONSEN',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  } else {\n    return [\n      {\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '8309032',\n        chainId: '97',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  }\n};\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getAnnualBlockNumberConfig = () => ({\n  1: '2367422',\n  56: '10497304',\n  128: '10511369',\n  3: '2367422',\n  97: '10497304',\n  256: '10511369',\n});\n","export const getDBProviderUrlsConfig = () => [\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  ChainProviderUrls,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getAnnualBlockNumberConfig,\n  getDeriContractAddressConfig,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n  return false;\n};\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server');\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    default:\n      throw new Error('The networkId is not valid');\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  console.log(\n    `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      pool: pool[0].pool,\n      bToken: pool[0].bToken,\n      pToken: pool[0].pToken,\n      lToken: pool[0].lToken,\n      dToken: pool[0].dToken,\n      MinningVault: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (env = 'dev', chainId, poolAddress) => {\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      if (symbol !== 'BTCUSD') {\n        return addSymbolParam('https://oracle3.deri.finance/price', symbol);\n      } else {\n        return addSymbolParam('https://oracle.deri.finance/price', symbol);\n      }\n    }\n    return 'https://oracle.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  try {\n    let url = getOracleUrl(DeriEnv.get(), chainId, poolAddress);\n    // const { symbol } = getPoolContractAddress(chainId, poolAddress);\n    // if (symbol && symbol != '') {\n    //   url = `${url}?symbol=${symbol}`;\n    // }\n    const priceResponse = await fetch(url);\n    const priceResponseJson = await priceResponse.json();\n    return deriToNatural(priceResponseJson.price);\n  } catch (err) {\n    console.log(`fetch BTCUSD price error: ${err}`);\n  }\n  return '0';\n};\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  try {\n    let url = getOracleUrl(DeriEnv.get(), chainId, poolAddress);\n    // const { symbol } = getPoolContractAddress(chainId, poolAddress);\n    // if (symbol && symbol != '') {\n    //   url = `${url}?symbol=${symbol}`;\n    // }\n    console.log('oracle url', url);\n    const priceResponse = await fetch(url);\n    const priceResponseJson = await priceResponse.json();\n    return priceResponseJson;\n  } catch (err) {\n    console.log(`fetch Oracle info error: ${err}`);\n  }\n  return {};\n};\n\nexport const getChainProviderUrl = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const chains = ChainProviderUrls.filter((item) => item.chainId === chainId);\n  if (chains.length === 1) {\n    try {\n      // const url = await getAliveHttpServer(chains[0].provider_urls)\n      return chains[0].provider_urls[0];\n    } catch (err) {\n      throw new Error(\n        `Cannot find the alive chain provider url with chainId: ${chainId}`\n      );\n    }\n    // return chains[0].provider_urls[0];\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  let res = chainId;\n  if (typeof chainId === 'number') {\n    res = chainId.toString();\n  }\n  return res;\n};\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return (chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    console.log(\n      `==== web3Factory(${chainId}), please caution the access limits ===`\n    );\n    const providerUrl = getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    //console.log('accounts', accounts);\n    // const chainId = parseInt(\n    //   await window.ethereum.request({ method: 'net_version' })\n    // );\n    const chainId = hexToNumber(\n      await window.ethereum.request({ method: 'eth_chainId' })\n    );\n    //console.log('chainId', chainId);\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    if (isProvider) {\n      this.web3 = web3Factory(chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    return await this.contract.methods[method](...args).call();\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    //const gas = await this._estimatedGas(method, args);\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, args, accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { bg, getAnnualBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) =>\n  bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) =>\n  ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  console.log(annualBlockCount);\n  const res = bg(fundingRate).times(annualBlockCount);\n  // if (chainId === \"1\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"56\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"128\") {\n  //   res = bg(fundingRate).times(10511369);\n  // } else if (chainId === \"3\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"97\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"256\") {\n  //   res = bg(fundingRate).times(10511369);\n  // }\n  return res;\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => volume.abs().times(price).times(multiplier).times(minInitialMarginRatio);\n\nexport const calculatePnl = (price, volume, multiplier, cost) =>\n  volume.times(price).times(multiplier).minus(cost);\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + 4999,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += 5000;\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    //console.log(allowance.toString());\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  // for slp pool use\n  // async balanceOf(poolAddress) {\n  //   //const res = await this._call('balanceOf', [poolAddress])\n  //   let result\n  //   const [res, decimals] = await Promise.all([\n  //     this._balance(this.poolAddress),\n  //     this.decimals(),\n  //   ])\n  //   result = bg(res, -decimals)\n  //   return result\n  // }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async getPositionInfo(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async balance(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport { web3Factory } from '../factory/web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = web3Factory('97');\n    this.contract = new this.web3.eth.Contract(\n      DB_CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (\n      !(this.providerUrl && (await checkHttpServerIsAlive(this.providerUrl)))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n    }\n    this._init();\n  }\n\n  async getValues(keyArray) {\n    if (!this.contract) {\n      await this.updateProviderUrl();\n    }\n    return await this.contract.methods.getValues(keyArray).call();\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport { web3Factory } from '../factory/web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  async updateProviderUrl() {\n    if (\n      !(this.providerUrl && (await checkHttpServerIsAlive(this.providerUrl)))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n    }\n    this._init();\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = web3Factory('97');\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async signature(accountAddress) {\n    if (!this.contract) {\n      await this.updateProviderUrl();\n    }\n    return await this.contract.methods['signature'](accountAddress).call();\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI['abi'],\n      this.contractAddress\n    );\n  }\n  async mintDToken(accountAddress, ...args) {\n    //return this._transact('claim', args)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    //console.log('res', res);\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    //console.log('toWormholeAddress', toWormholeAddress)\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n","import { databaseFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp),\n      trade: deriToNatural(harvestTrade),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToString(total),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToString(apy),\n        volume1h: deriToString(volume1h),\n        volume24h: deriToString(volume24h),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getSlpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToString(apy),\n        volume1h: deriToString(volume1h),\n        volume24h: deriToString(volume24h),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getClpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToString(apy),\n        volume1h: deriToString(volume1h),\n        volume24h: deriToString(volume24h),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToString(volume1h),\n        volume24h: deriToString(volume24h),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      const res = await getBTCUSDPrice(chainId, poolAddress);\n      if (res !== '') {\n        _price = res;\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 2000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy, getUserInfoAll } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiResultCache';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateMaxWithdrawMargin,\n  calculateLiquidationPrice,\n  processFundingRate,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  const symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n\n  return {\n    volume: volume.toString(),\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n    margin: margin.toString(),\n    marginHeld: calculateMarginHeld(\n      price,\n      volume,\n      multiplier,\n      minInitialMarginRatio\n    ).toString(),\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n    liquidationPrice: calculateLiquidationPrice(\n      volume,\n      margin,\n      cost,\n      multiplier,\n      minMaintenanceMarginRatio\n    ).toString(),\n  };\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get sstimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get Estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.isUnlocked(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","import {\n  getPoolContractAddress,\n  naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: naturalToDeri(price).toString(),\n    notional: naturalToDeri(national).toString(),\n    volume: naturalToDeri(volume).toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nconst getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// eslint-disable-next-line no-extend-native\nNumber.prototype.toFixed = function(len){\n  if(len>20 || len<0){\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\n  }\n  // .123转为0.123\n  var number = Number(this);\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\n      return number.toString();\n  }\n  if (typeof (len) == 'undefined' || len == 0) {\n      return (Math.round(number)).toString();\n  }\n  var result = number.toString(),\n      numberArr = result.split('.');\n\n  if(numberArr.length<2){\n      //整数的情况\n      return padNum(result);\n  }\n  var intNum = numberArr[0], //整数部分\n      deciNum = numberArr[1],//小数部分\n      lastNum = deciNum.substr(len, 1);//最后一个数字\n  \n  if(deciNum.length == len){\n      //需要截取的长度等于当前长度\n      return result;\n  }\n  if(deciNum.length < len){\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\n      return padNum(result)\n  }\n  //需要截取的长度小于当前长度，需要判断最后一位数字\n  result = intNum + '.' + deciNum.substr(0, len);\n  if(parseInt(lastNum, 10)>=5){\n      //最后一位数字大于5，要进位\n      var times = Math.pow(10, len); //需要放大的倍数\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\n      changedInt++;//整数进位\n      changedInt /= times;//整数转为小数，注：有可能还是整数\n      result = padNum(changedInt+'');\n  }\n  return result;\n  //对数字末尾加0\n  function padNum(num){\n      var dotPos = num.indexOf('.');\n      if(dotPos === -1){\n          //整数的情况\n          num += '.';\n          for(var i = 0;i<len;i++){\n              num += '0';\n          }\n          return num;\n      } else {\n          //小数的情况\n          var need = len - (num.length - dotPos - 1);\n          for(var j = 0;j<need;j++){\n              num += '0';\n          }\n          return num;\n      }\n  }\n}","import {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App() {\n  \n  if(isBrowser){\n    return <DesktopApp/>\n  }\n  if(isMobile){\n    return <MobileApp/>\n  }\n}\n\nexport default App;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js\";\nimport config from '../config.json'\nimport { formatBalance } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\nconst walletKey = 'mm_wallet_key'\nconst env = DeriEnv.get();\nconst {chainInfo} = config[env]\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      set : action,\n      connect : action      \n    })\n  }\n\n  isConnected = () => !!this.detail.account;\n\n  connect =  async () => {\n    const res = await connectWallet(null,account => {\n      //如果还有账号，切换这个这个账号，否则清除sessionStorage\n      if(account) {\n        //@todo\n      } else {\n        this.remove();\n      }\n    });\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.set(chainId,account);        \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  set = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n    }\n    this.detail = detail;\n    // sessionStorage.setItem(walletKey,JSON.stringify(wallet))\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  remove = () => {\n    this.detail = null;\n    sessionStorage.removeItem(walletKey);\n    window.location.reload();\n  }\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action } from \"mobx\";\nimport axios from \"axios\";\nimport { DeriEnv,deriToNatural } from \"../lib/web3js\";\nimport config from '../config.json'\n\nconst oracleConfig = config[DeriEnv.get()]['oracle']\n\nconst CancelToken = axios.CancelToken;\n\nexport default class IndexPrice {\n  index = 0.00\n  source = CancelToken.source();\n  cancel = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      start : action,\n      loadIndex : action,\n      pause : action,\n      resume : action\n    })\n  }\n\n  async loadIndex(symbol) {\n    if(symbol){\n      const url = oracleConfig[symbol.toUpperCase()]\n      const res = await axios.get(url,{ \n        params : {\n          symbol : symbol\n        },\n        cancelToken: this.source.token,\n      }\n      );\n      if(res && res.data && this.cancel === false){\n        this.index = deriToNatural(res.data.price).toNumber();\n      } \n    }     \n  }\n\n  start(symbol){\n    if(!this.inteval) {\n      this.cancel = false;\n      this.source = CancelToken.source();\n      this.inteval = setInterval(() => this.loadIndex(symbol),1000)\n    }\n  }\n\n\n  pause() {\n    this.cancel = true\n    this.source.cancel();\n    clearInterval(this.inteval)\n    this.inteval = null;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\n//note dont remove zhe line\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\nimport IndexPrice from './model/IndexPrice';\n\nconst wallet = new Wallet();\nconst indexPrice = new IndexPrice();\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider wallet={wallet} indexPrice={indexPrice}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nwindow.wallet = wallet\n\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent"],"sourceRoot":""}