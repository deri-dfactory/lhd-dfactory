{"version":3,"sources":["lib/web3js/utils.js","utils/LoadableComponent.js","model/Oracle.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/walletApi.js","lib/web3js/indexV2.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/apiGlobals.js","lib/web3js/apiV2/contractTransactionApiV2.js","lib/web3js/api/contractQueryApi.js","lib/polyfill/numberPolyfill.js","lib/web3js/api/slpPoolApi.js","App.js","model/Wallet.js","model/Position.js","model/IndexPrice.js","model/Contract.js","model/Config.js","model/Trading.js","index.js","lib/web3js/api/clpPoolApi.js","lib/web3js/config/database.js","lib/web3js/api/databaseApi.js","lib/web3js/factory/web3.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","utils/utils.js","lib/web3js/config/env.js"],"names":["BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","Web3","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","i","isNaN","checkHttpServerIsAlive","url","a","fetch","ok","getAliveHttpServer","urls","length","Error","MAX_VALUE","getNetworkName","chainId","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","pool","getContractAddressConfig","DeriEnv","get","filter","c","p","bTokenAddress","bToken","pTokenAddress","pToken","lTokenAddress","lToken","dTokenAdress","dToken","MinningVaultAddress","MiningVault","bTokenSymbol","symbol","unit","initialBlock","console","log","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","getAnnualBlockNumberConfig","parseInt","getSlpContractAddress","getSlpContractAddressConfig","getClpContractAddress","getClpContractAddressConfig","getLpContractAddress","getLpContractAddressConfig","type","getDeriContractAddress","getDeriContractAddressConfig","deriAddress","Deri","wormholeAddress","Wormhole","getOracleUrl","env","addSymbolParam","getOracleInfo","priceResponse","json","priceResponseJson","getBTCUSDPrice","responseJson","price","getChainProviderUrl","getChainProviderUrlsConfig","format","bigNumber","toFormat","replaceAll","res","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","Oracle","index","kData","ws","paused","makeAutoObservable","this","observable","setIndex","action","initWebSocket","WebSocket","transports","path","on","callback","uid","resume","setSymbol","data","obj","time","low","Number","high","open","close","volume","time_type","emit","bars","history","map","el","loadIndex","setPause","provider_urls","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","1","56","128","3","97","256","getRestServerConfig","calculateLiquidityUsed","tradersNetVolume","multiplier","liquidity","poolMarginRatio","abs","calculateFundingRate","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","calculateShareValue","lTokenTotalSupply","eq","calculateMaxRemovableShares","lTokenBalance","tradersNetCost","minPoolMarginRatio","shareValue","removable","plus","minus","calculateEntryPrice","cost","calculateMarginHeld","minInitialMarginRatio","calculatePnl","calculateMaxWithdrawMargin","margin","held","pnl","calculateLiquidationPrice","minMaintenanceMarginRatio","tmp","gt","isOrderValid","newVolume","amount","minMargin","poolMaxVolume","negated","success","message","connectWallet","handleChainChanged","handleAccountChanged","undefined","window","ethereum","request","method","accounts","account","Array","isArray","location","reload","error","getUserWalletBalance","walletAddress","web3","metaMaskWeb3","eth","getBalance","balance","fromWei","unlock","accountAddress","bTokenFactory","tx","transaction","depositMargin","pPool","perpetualPoolFactory","withdrawMargin","pTokenFactory","getPositionInfo","getParameters","maxWithdrawMargin","_transactPool","addLiquidity","removeLiquidity","shares","lTokenFactory","Promise","all","totalSupply","getStateValues","maxRemovableShares","tradeWithMargin","orderValidation","closePosition","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","s","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","processTradeEvent","perpetualPool","info","blockNumber","txHash","feeRatio","tradeVolume","_getTimeStamp","timeStamp","direction","timestamp","transactionFee","_calculateFee","notional","baseToken","transactionHash","processLiquidateEvent","national","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","item","returnValues","unshift","getLiquidateHistoryOnline","getHttpBase","fetchJson","resp","getSpecification2","getLiquidityUsed2","getPositionInfo2","getLiquidityInfo2","getWalletBalance2","getTradeHistory2","tradeFromBlock","tradeHistoryBlock","liquidateFromBlock","liquidateHistoryBlock","tradeHistory","trim","tradeHistoryOnline","liquidateHistoryOnline","concat","sort","b","fundingRateCache","resourceMap","contractAddress","key","Object","keys","includes","set","resource","priceCache","_accountAddress","_price","_interval","_update","update","self","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","wsInstance","_ws","io","id","err","getOrSet","wsOnPromise","event","resolve","reject","JSON","parse","sendTradeTxToWorkerQuene","methodCall","send","tradeWithMargin2","closePosition2","depositMargin2","withdrawMargin2","addLiquidity2","removeLiquidity2","addSlpLiquidity2","addSlpLiquidity","removeSlpLiquidity2","removeSlpLiquidity","addClpLiquidity2","addClpLiquidity","removeClpLiquidity2","removeClpLiquidity","isUnlocked","getEstimatedFee","parameters","getFundingRate","catch","getPoolInfoApy","poolInfo","fundingRatePerBlock","volume24h","fundingRate0","toExponential","getEstimatedFundingRate","newNetVolume","fundingRate1","getEstimatedLiquidityUsed","liquidityUsed1","prototype","len","RangeError","Math","pow","round","numberArr","split","padNum","intNum","deciNum","lastNum","substr","changedInt","replace","num","dotPos","indexOf","need","j","getSlpLiquidityInfo","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","poolLiquidity","isSlpUnlocked","unlockSlp","getSlpWalletBalance","DesktopApp","MobileApp","App","isBrowser","isMobile","chainInfo","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","formatBalance","assign","supported","remove","sessionStorage","removeItem","Position","axios","CancelToken","setInfo","spec","position","interval","load","Contract","getSpecification","chainid","Config","makeObservable","setAll","configs","Trading","contract","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setPaused","computed","fundingRateTip","volumeDisplay","configInfo","oracle","positionInfo","contractInfo","eqInNumber","find","onConfigChange","cur","pause","loadFundingRate","curVolume","contractValue","dynBalance","unrealizedPnl","leverage","available","exchanged","marginHeld","trading","ReactDOM","render","StrictMode","document","getElementById","getClpLiquidityInfo","clpPool","clpPoolFactory","isClpUnlocked","unlockClp","getClpWalletBalance","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getUserInfo","userAddress","db","databaseFactory","getValues","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","total","userInfoHarvest","userInfoTotal","getPoolLiquidity","apy","volume1h","getSlpPoolInfoApy","getUserInfoInPool","getUserInfoAllForAirDrop","v1","r1","s1","v2","r2","s2","web3Instance","web3Factory","web3InstanceMap","providerUrl","providers","HttpProvider","MAX_GAS_AMOUNT","isProvider","methods","call","gas","estimateGas","from","_transactionReceipt","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","getGasPrice","txRaw","to","numberToHex","encodeABI","params","_getTransactionReceipt","POOL_ABI","PerpetualPool","_call","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","priceDelayAllowance","signed","gasPrice","args1","args2","liquidityUsed","getBlock","eventName","getPastEvents","es","e","push","CONTRACT_ABI","BTokenContract","allowance","_transact","address","_balance","decimals","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","_init","keyArray","updateProviderUrl","DatabaseWormholeContract","MiningVaultPool","SlpPool","ClpPool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","deriFactory","lpPoolInstanceMap","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","deriNatural","formatAddress","str1","str2","_deriEnv"],"mappings":"uqCAeAA,IAAUC,OAAO,CACfC,eAAgB,GAChBC,cAAeH,IAAUI,WACzBC,eAAgB,MAYX,IAAMC,EAAK,SAACC,GAAqB,IAAdC,EAAa,uDAAN,EAC/B,OAAa,IAATA,EACKR,IAAUO,GAEfC,EAAO,EACFR,IAAUO,GAAOE,MAAMT,IAAU,IAAD,OAAK,IAAIU,OAAOF,MAElDR,IAAUO,GAAOI,IAAIX,IAAU,IAAD,OAAK,IAAIU,QAAQF,OAU3CI,EAAM,SAACC,EAAQC,GAC1B,OAAID,EAAOE,IAAID,GACND,EAEFC,GAUIE,EAAM,SAACH,EAAQC,GAC1B,OAAID,EAAOI,IAAIH,GACND,EAEFC,GAeII,EAAoB,SAACX,GAAD,OAAWY,IAAKC,MAAMF,kBAAkBX,IAE5Dc,EAAc,SAACd,GAAD,OAAWY,IAAKC,MAAME,UAAUf,IAE9CgB,EAAc,SAAChB,GAAD,OAAWY,IAAKC,MAAMG,YAAYhB,IAEhDiB,EAAoB,SAACjB,GAAD,OAAWY,IAAKC,MAAMI,kBAAkBjB,IAa5DkB,EAAgB,SAAClB,GAAD,OAAWD,EAAGC,EAAO,IAAImB,QAAQ,IAEjDC,EAAwB,SAACpB,GAAD,gBAChCD,EAAGC,GAAOqB,GAAG,GAAGnB,MAAM,KAAKiB,QAAQ,GAAGG,WADN,MAGxBC,EAAgB,SAACvB,GAAD,OAAWD,EAAGC,GAAQ,KAKtCwB,EAAe,SAACxB,GAAD,OAAWD,EAAGC,GAAOsB,YAEpCG,EAAa,SAACzB,GACzB,OAA6B,IAAzBD,EAAGC,GAAO0B,YAMHC,EAAsB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACjCA,EAAKC,MACH,SAACC,GAAD,OAEEC,MAAMD,EAAER,aAAgC,MAAjBQ,EAAER,eAsBlBU,EAAsB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEXC,MAAMF,GAFK,kBAIrBG,GAJqB,0CAKzB,GALyB,yFAU7B,GAV6B,yDAAH,sDAYtBC,EAAkB,uCAAG,4CAAAH,EAAA,sDAAOI,EAAP,+BAAc,GACrCR,EAAI,EADmB,YAChBA,EAAIQ,EAAKC,QADO,wBAExBN,EAAMK,EAAKR,GAFa,SAGpBE,EAAuBC,GAHH,2DAIrBA,GAJqB,OACCH,IADD,6BAO1B,IAAIU,MAAM,+BAAgCF,GAPhB,4CAAH,qDAWlBG,EACX,qEACWC,EAAiB,SAACC,GAE7B,IAAIC,EACJ,OAFAD,EAAUE,EAAiBF,IAGzB,IAAK,IACHC,EAAc,WACd,MACF,IAAK,KACHA,EAAc,MACd,MACF,IAAK,MACHA,EAAc,OACd,MACF,IAAK,IACHA,EAAc,UACd,MACF,IAAK,KACHA,EAAc,QACd,MACF,IAAK,KACHA,EAAc,aACd,MACF,IAAK,MACHA,EAAc,cACd,MACF,QACE,MAAM,IAAIJ,MAAM,8BAEpB,OAAOI,GAkFIE,EAAyB,SAACH,EAASI,GAC9CJ,EAAUE,EAAiBF,GAC3B,IAGMK,EAHQC,YAAyBC,IAAQC,OAAOC,QACpD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEJS,QAAO,SAACE,GAAD,OAAOA,EAAEN,OAASD,KAE5C,OAAIC,EAAKT,OAAS,EACT,CACLQ,YAAaC,EAAK,GAAGA,KACrBO,cAAeP,EAAK,GAAGQ,OACvBC,cAAeT,EAAK,GAAGU,OACvBC,cAAeX,EAAK,GAAGY,OACvBC,aAAcb,EAAK,GAAGc,OACtBC,oBAAqBf,EAAK,GAAGgB,YAC7BC,aAAcjB,EAAK,GAAGiB,aACtBC,OAAQlB,EAAK,GAAGkB,OAChBC,KAAMnB,EAAK,GAAGmB,KACdC,aAAcpB,EAAK,GAAGoB,eAG1BC,QAAQC,IAAR,mEAC8D3B,EAD9D,YACyEI,IAElE,KAGIwB,EAAgC,SAAC5B,GAC5CA,EAAUE,EAAiBF,GAC3B,IAAM6B,EAAQvB,YAAyBC,IAAQC,OAAOC,QACpD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEvB,GAAI6B,EAAMjC,OAAS,GACbiC,EAAM,GAAGR,YACX,OAAOQ,EAAM,GAAGR,aAiBTS,EAAuB,SAAC9B,GACnC,IAAM+B,EAAeC,cACrB,GAAID,EAAa/B,GACf,OAAOiC,SAASF,EAAa/B,IAE/B0B,QAAQC,IAAR,4DAAiE3B,KAGtDkC,EAAwB,SAAClC,EAASI,GAC7CJ,EAAUE,EAAiBF,GAC3B,IAGMK,EAHQ8B,YAA4B5B,IAAQC,OAAOC,QACvD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEJS,QAAO,SAACE,GAAD,OAAOA,EAAEN,OAASD,KAC5C,OAAIC,EAAKT,OAAS,EACT,CACLQ,YAAaC,EAAK,GAAGA,KACrBO,cAAeP,EAAK,GAAGQ,OACvBC,cAAeT,EAAK,GAAGU,OACvBC,cAAeX,EAAK,GAAGY,OACvBC,aAAcb,EAAK,GAAGc,OACtBC,oBAAqBf,EAAK,GAAGgB,cAGjCK,QAAQC,IAAR,kEAC6D3B,EAD7D,YACwEI,IAEjE,KAGIgC,EAAwB,SAACpC,EAASI,GAC7CJ,EAAUE,EAAiBF,GAC3B,IAGMK,EAHQgC,YAA4B9B,IAAQC,OAAOC,QACvD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEJS,QAAO,SAACE,GAAD,OAAOA,EAAEN,OAASD,KAC5C,OAAIC,EAAKT,OAAS,EACT,CACLQ,YAAaC,EAAK,GAAGA,KACrBO,cAAeP,EAAK,GAAGQ,OACvBG,cAAeX,EAAK,GAAGY,SAG3BS,QAAQC,IAAR,kEAC6D3B,EAD7D,YACwEI,IAEjE,KAGIkC,EAAuB,SAACtC,EAASI,GAC5CJ,EAAUE,EAAiBF,GAC3B,IAGMK,EAHQkC,YAA2BhC,IAAQC,OAAOC,QACtD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEJS,QAAO,SAACE,GAAD,OAAOA,EAAEN,OAASD,KAC5C,OAAIC,EAAKT,OAAS,EACT,CACLQ,YAAaC,EAAK,GAAGA,KACrBO,cAAeP,EAAK,GAAGQ,OACvBG,cAAeX,EAAK,GAAGY,OACvBuB,KAAMnC,EAAK,GAAGmC,OAGlBd,QAAQC,IAAR,iEAC4D3B,EAD5D,YACuEI,IAEhE,KAGIqC,EAAyB,SAACzC,GACrCA,EAAUE,EAAiBF,GAC3B,IAAMK,EAAOqC,YAA6BnC,IAAQC,OAAOC,QACvD,SAACC,GAAD,OAAOA,EAAEV,UAAYA,KAEvB,OAAIK,EAAKT,OAAS,EACT,CACL+C,YAAatC,EAAK,GAAGuC,KACrBC,gBAAiBxC,EAAK,GAAGyC,SACzBxB,aAAcjB,EAAK,GAAGiB,eAG1BI,QAAQC,IAAR,mEAC8D3B,IAEvD,KAGI+C,EAAe,SAAC/C,EAASI,GACpC,IAAM4C,EAAMzC,IAAQC,MACZe,EAAWpB,EAAuBH,EAASI,GAA3CmB,OACF0B,EAAiB,SAAC3D,GAAD,IAAMiC,EAAN,uDAAa,SAAb,gBAA6BjC,EAA7B,mBAA2CiC,IAClE,MAAY,SAARyB,GAA0B,eAARA,EAEhBzB,EAEO0B,EADM,WAAX1B,EACoB,qCAEA,oCAFsCA,GAKzD,oCAEHA,EACK0B,EAAe,qCAAsC1B,GAGvD,sCAIE2B,EAAa,uCAAG,WAAOlD,EAASI,GAAhB,mBAAAb,EAAA,sEAErBD,EAAMyD,EAAa/C,EAASI,GAFP,SAIGZ,MAAMF,GAJT,cAInB6D,EAJmB,gBAKOA,EAAcC,OALrB,cAKnBC,EALmB,yBAMlBA,GANkB,wCAQnB,IAAIxD,MAAJ,0CARmB,0DAAH,wDAYbyD,EAAc,uCAAG,WAAOtD,EAASI,GAAhB,eAAAb,EAAA,+EAEC2D,EAAclD,EAASI,GAFxB,cAEpBmD,EAFoB,yBAGnB3E,EAAc2E,EAAaC,OAAO7E,YAHf,sCAKpB,IAAIkB,MAAJ,2CALoB,yDAAH,wDAUd4D,EAAmB,uCAAG,WAAMzD,GAAN,eAAAT,EAAA,yDACjCS,EAAUE,EAAiBF,MACrBL,EAAO+D,YAA2B1D,IAC/BJ,OAAS,GAHe,gCAIlBF,EAAmBC,GAJD,qDAMzB,IAAIE,MAAJ,2DACgDG,IAPvB,2CAAH,sDAYnB2D,EAAS,SAACC,GAAD,OACpBA,EAAUC,WAAWC,WAAW,IAAK,IAAInF,YAE9BuB,EAAmB,SAACF,GAC/B,IAAI+D,EAAM/D,EAIV,MAHuB,kBAAZA,IACT+D,EAAM/D,EAAQrB,YAEToF,I,q+BC7dHC,E,wKAEJ,WACEC,IAAUC,U,kCAEZ,WACED,IAAUE,S,oBAEZ,WACE,OACE,4B,GAVoBC,IAAMC,WAsBjBC,IAPW,SAACC,GACzB,OAAOC,IAAS,CACdC,OAAQF,EACRG,QAAS,kBAAI,cAACV,EAAD,S,8GCpBIW,E,WAOnB,aAAc,yBANdpD,OAAS,SAMI,KALbqD,MAAQ,EAKK,KAJbC,MAAQ,GAIK,KAHbC,GAAK,KAGQ,KAFbC,QAAS,EAGPC,6BAAmBC,KAAK,CACtBL,MAAQM,aACRL,MAAQK,aACRC,SAAWC,WAEbH,KAAKI,gB,iDAGP,WACiB,OAAZJ,KAAKH,KACNG,KAAKH,GAAK,IAAIQ,IAAU,yBAA0B,CAChDC,WAAY,CAAC,aACbC,KAAM,WAERP,KAAKH,GAAGW,GAAG,WAAU,kBAAM/D,QAAQC,IAAI,iC,kBAU3C,SAAKJ,EAAOmE,EAASC,GAAK,IAAD,OACvBV,KAAKU,IAAMA,EACXV,KAAKW,SACLX,KAAKY,UAAUtE,GACf0D,KAAKH,GAAGW,GAAG,gBAAe,SAAAK,GACxB,IAAMC,EAAM,GACRC,EAAOF,EAAKE,KACZF,EAAKvE,SAAW,EAAKA,SACvBwE,EAAIC,KAAOA,EACXD,EAAIE,IAAMC,OAAOJ,EAAKG,KACtBF,EAAII,KAAOD,OAAOJ,EAAKK,MACvBJ,EAAIK,KAAOF,OAAOJ,EAAKM,MACvBL,EAAIM,MAAQH,OAAOJ,EAAKO,OACxBN,EAAIO,OAASJ,OAAOJ,EAAKQ,QACzBP,EAAIQ,UAAYT,EAAKS,UACrBR,EAAIxE,OAASuE,EAAKvE,OACd,EAAKwD,SACP,EAAKI,SAASY,EAAIM,OAClBX,EAASK,EAAIM,MAAMN,QAIzBd,KAAKH,GAAG0B,KAAK,YAAa,CAAC,OAAUjF,EAAQ,UAAa,MAAO,KAAQ,Q,6BAG3E,SAAgBoE,GACdV,KAAKH,GAAG0B,KAAK,eAAgB,CAC3BjF,OAAS0D,KAAK1D,OAAQ,UAAc,MAAOkF,KAAO,O,yBAKtD,SAAYlF,EAAOmE,GACjBT,KAAKH,GAAGW,GAAG,iBAAiB,SAAAK,GAC1B,IAAMY,EAAUZ,EAAKa,KAAI,SAAAC,GACvB,MAAO,CACLZ,KAAMY,EAAGZ,KACTC,IAAKC,OAAOU,EAAGX,KACfE,KAAMD,OAAOU,EAAGT,MAChBC,KAAMF,OAAOU,EAAGR,MAChBC,MAAOH,OAAOU,EAAGP,OACjBC,OAAQJ,OAAOU,EAAGN,YAGnBZ,GACDA,EAASgB,Q,mBAMf,SAAMnF,GAAQ,IAAD,OACX0D,KAAKI,gBACLJ,KAAK4B,UAAUtF,GACf0D,KAAKH,GAAGW,GAAG,gBAAe,SAAAK,GACxB,IAAMC,EAAM,GACRC,EAAOF,EAAKE,KACZF,EAAKvE,SAAW,EAAKA,SACvBwE,EAAIC,KAAOA,EACXD,EAAIE,IAAMC,OAAOJ,EAAKG,KACtBF,EAAII,KAAOD,OAAOJ,EAAKK,MACvBJ,EAAIK,KAAOF,OAAOJ,EAAKM,MACvBL,EAAIM,MAAQH,OAAOJ,EAAKO,OACxBN,EAAIO,OAASJ,OAAOJ,EAAKQ,QACzB,EAAKnB,SAASY,EAAIM,a,oBAKxB,WACEpB,KAAK6B,UAAS,K,mBAGhB,WACE7B,KAAK6B,UAAS,K,sBAGhB,SAASlC,GACHK,KAAKF,SACPE,KAAKL,MAAQA,K,uBAIjB,SAAUrD,GACR0D,KAAK1D,OAASA,I,sBAGhB,SAASwD,GACPE,KAAKF,OAASA,M,gdC3ELrB,EAA6B,SAAC1D,GACzC,IAgDM+D,EAhDoB,CACxB,CACEgD,cAAe,CACb,iEAEF/G,QAAS,KAEX,CACE+G,cAAe,CACb,mCACA,oCACA,sCAEF/G,QAAS,MAEX,CACE+G,cAAe,CAAC,sCAChB/G,QAAS,OAEX,CACE+G,cAAe,CACb,iEAEF/G,QAAS,KAEX,CACE+G,cAAe,CACb,+DAEF/G,QAAS,MAEX,CACE+G,cAAe,CACb,kDACA,kDACA,kDACA,kDACA,kDACA,mDAEF/G,QAAS,MAEX,CACE+G,cAAe,CAAC,sCAChB/G,QAAS,QAIiBS,QAAO,SAACtB,GAAD,OAAOA,EAAEa,UAAaA,KAE3D,GAAI+D,EAAInE,OAAS,EACf,OAAOmE,EAAI,GAAGgD,cAEd,MAAM,IAAIlH,MAAJ,0DAA6DG,KCtF1DM,EAA2B,WAAkB,IAAjB0C,EAAgB,uDAAV,MAE7C,MAAY,SAARA,EAEK,CACL,CACE3C,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,MAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdH,aAAc,OACdC,OAAQ,OACRC,KAAM,OACNxB,QAAS,MAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdH,aAAc,OACdC,OAAQ,QACRC,KAAM,QACNxB,QAAS,MAGX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,WACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,KAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,WACdH,aAAc,MACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,KAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,QAMR,CACL,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRQ,aAAc,UACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,KAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRQ,aAAc,UACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,MAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRQ,aAAc,UACdH,aAAc,OACdC,OAAQ,OACRC,KAAM,OACNxB,QAAS,MAEX,CACEK,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRQ,aAAc,UACdH,aAAc,OACdC,OAAQ,SACRC,KAAM,MACNxB,QAAS,SAmBFmC,EAA8B,WAAkB,IAAjBa,EAAgB,uDAAV,MAChD,MAAY,SAARA,EACK,CACL,CACE3C,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbrB,QAAS,IACTsB,aAAc,yBAIpBI,QAAQC,IAAI,gEACL,KAeIU,EAA8B,WAAkB,IAAjBW,EAAgB,uDAAV,MAChD,MAAY,SAARA,EACK,CACL,CACE3C,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdzB,QAAS,KACTsB,aAAc,UACdC,OAAQ,WAIL,CACL,CACElB,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdzB,QAAS,KACTsB,aAAc,UACdC,OAAQ,YAMHgB,EAA6B,WAAkB,IAAjBS,EAAgB,uDAAV,MAC/C,MAAY,SAARA,EACK,CACL,CACE3C,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbrB,QAAS,IACTsB,aAAc,sBACdkB,KAAM,OAER,CACEnC,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdzB,QAAS,KACTsB,aAAc,UACdC,OAAQ,SACRiB,KAAM,QAIH,CACL,CACEnC,KAAM,6CACNQ,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,OAAQ,6CACRE,YAAa,6CACbI,aAAc,UACdzB,QAAS,KACTsB,aAAc,UACdC,OAAQ,SACRiB,KAAM,SAMDwE,EAAqC,SAAChH,GACjD,IAMMiH,EANU,CACZ,CACEC,kBAAmB,6CACnBlH,QAAS,OAGgBS,QAAO,SAACtB,GAAD,OAAOA,EAAEa,UAAYA,KAC3D,GAAIiH,EAAerH,OAAS,EAC1B,OAAOqH,EAAe,GAAGC,kBAEzB,MAAM,IAAIrH,MAAJ,oEAAuEG,KAepE0C,EAA+B,WAAkB,IAAjBM,EAAgB,uDAAV,MACjD,MAAY,SAARA,EACK,CACL,CACEJ,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,KAEX,CACE4C,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,MAEX,CACE4C,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,QAIR,CACL,CACE4C,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,KAEX,CACE4C,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,MAEX,CACE4C,KAAM,6CACNE,SAAU,6CACVxB,aAAc,OACdtB,QAAS,SAKFgC,EAA6B,iBAAO,CAC/CmF,EAAG,UACHC,GAAI,WACJC,IAAK,WACLC,EAAG,UACHC,GAAI,WACJC,IAAK,a,QC9VMC,EAAsB,WAAkB,IAAjBzE,EAAgB,uDAAV,MACxC,MAAY,SAARA,GAA0B,eAARA,EAEb,2BAGA,iC,iaCTE0E,EAAyB,SACpCC,EACAnE,EACAoE,EACAC,EACAC,GALoC,OAOpC1K,YACIuK,EAAmBnE,EAAQoE,EAAcC,EAAaC,GACxDC,OAESC,EAAuB,SAClCL,EACAnE,EACAoE,EACAC,EACAI,GALkC,OAOhCN,EAAmBnE,EAAQoE,EAAcC,EAC3CI,GAEWC,EAAqB,SAAClI,EAASmI,GAC1C,IAAMC,EAAmBtG,YAAqB9B,GAgB9C,OAfA0B,QAAQC,IAAIyG,GACAhL,YAAG+K,GAAa5K,MAAM6K,ICtBvBC,EAAsB,SAACC,EAAmBT,GAApB,OACjCS,EAAkBC,GAAG,GAAKnL,YAAG,GAAKyK,EAAUpK,IAAI6K,IACrCE,EAA8B,SACzCC,EACAH,EACAT,EACAF,EACAe,EACAd,EACAe,EACAnF,GAEA,IAAMoF,EAAaP,EAAoBC,EAAmBT,GACpDxK,EAAQsK,EAAiBpK,MAAMiG,GAAOjG,MAAMqK,GAC5CiB,EAAYhB,EACfiB,KAAKJ,GACLK,MAAM1L,GACN0L,MAAM1L,EAAM0K,MAAMxK,MAAMoL,IAE3B,OADejL,YAAII,YAAI2K,EAAeI,EAAUpL,IAAImL,IAAcxL,YAAG,KAI1D4L,EAAsB,SAAC1C,EAAQ2C,EAAMrB,GAAf,OACjCtB,EAAOiC,GAAG,GAAKnL,YAAG,GAAK6L,EAAKxL,IAAI6I,GAAQ7I,IAAImK,IAEjCsB,EAAsB,SACjC1F,EACA8C,EACAsB,EACAuB,GAJiC,OAK9B7C,EAAOyB,MAAMxK,MAAMiG,GAAOjG,MAAMqK,GAAYrK,MAAM4L,IAE1CC,EAAe,SAAC5F,EAAO8C,EAAQsB,EAAYqB,GAA5B,OAC1B3C,EAAO/I,MAAMiG,GAAOjG,MAAMqK,GAAYmB,MAAME,IAEjCI,EAA6B,SACxC7F,EACA8C,EACAgD,EACAL,EACArB,EACAuB,GAEA,GAAI7C,EAAOiC,GAAG,GACZ,OAAOe,EAET,IAAMC,EAAOL,EACX1F,EACA8C,EACAsB,EACAuB,GAEIK,EAAMJ,EAAa5F,EAAO8C,EAAQsB,EAAYqB,GAEpD,OADqBvL,YAAI4L,EAAOR,KAAKU,GAAKT,MAAMQ,EAAKhM,MAAM,OAAQH,YAAG,KAI3DqM,EAA4B,SACvCnD,EACAgD,EACAL,EACArB,EACA8B,GAEA,IAAMC,EAAMV,EAAKF,MAAMO,GAAQ7L,IAAI6I,GAAQ7I,IAAImK,GAC3C7D,EAAMuC,EAAOsD,GAAG,GAChBD,EAAIlM,IAAIL,YAAG,GAAG2L,MAAMW,IACpBC,EAAIlM,IAAIL,YAAG,GAAG0L,KAAKY,IAEvB,OADA3F,EAAMrG,YAAIqG,EAAK3G,YAAG,KAIPyM,EAAe,SAC1BrG,EACA8F,EACAhD,EACAuB,EACAF,EACAC,EACAe,EACAQ,EACAW,EACAC,GAEA,IAAMC,EAAY1D,EACfwC,KAAKgB,GACL/B,MACAxK,MAAMiG,GACNjG,MAAMqK,GACNrK,MAAM4L,GACHc,EAAgBpC,EACnBpK,IAAIkL,GACJlL,IAAI+F,GACJ/F,IAAImK,GACP,OAAI0B,EAAOR,KAAKiB,GAAQlM,IAAImM,GAExBF,EAAU/L,IAAIkM,EAAclB,MAAMpB,KAClCmC,EAAUjM,IAAIoM,EAAcC,UAAUnB,MAAMpB,IAErC,CAAEwC,SAAS,GAEb,CAAEA,SAAS,EAAOC,QAAS,+BAE7B,CAAED,SAAS,EAAOC,QAAS,gC,4LCxEvBC,EAAa,uCAAG,WAC3BC,EACAC,GAF2B,mBAAAhL,EAAA,8DAIIiL,IAA3B,YAAOC,OAAOC,UAJS,iCAKFD,OAAOC,SAASC,QAAQ,CAC7CC,OAAQ,wBANe,cAKnBC,EALmB,YAYTxM,IAZS,SAajBoM,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,gBAbjB,0BAYnB5K,GAZmB,cAgBnB8K,EAAUC,MAAMC,QAAQH,IAAaA,EAAS,GAGpDJ,OAAOC,SAASjF,GAAG,mBAAmB,SAACoF,GACrC,IAAIC,EAEFA,EADED,EAASjL,OAAS,EACViL,EAAS,GAET,GAEwB,oBAAzBN,EACTA,EAAqBO,GAErBL,OAAOQ,SAASC,YAIpBT,OAAOC,SAASjF,GAAG,gBAAgB,SAACzF,GAClC,IAAI+D,EAAM1F,YAAY2B,GACY,oBAAvBsK,EACTA,EAAmBvG,GAEnB0G,OAAOQ,SAASC,YAtCK,kBA0ClB,CAAEf,SAAS,EAAMW,UAAS9K,YA1CR,iCA4CpB,CACLmK,SAAS,EACTgB,MAAO,oDA9CkB,4CAAH,wDA0DbC,EAAoB,uCAAG,WAAOpL,EAASqL,GAAhB,mBAAA9L,EAAA,6DAE5B+L,EAAOC,cAFqB,SAGZD,EAAKE,IAAIC,WAAWJ,GAHR,cAG5BK,EAH4B,OAI5B3H,EAAM9F,IAAKC,MAAMyN,QAAQD,GAJG,kBAK3B3H,GAL2B,2CAAH,yD,yHC7FjC,g1E,6YC2Ca6H,EAAM,uCAAG,WAAO5L,EAASI,EAAayL,GAA7B,uBAAAtM,EAAA,+DACMY,YAAuBH,EAASI,GAAlDQ,EADY,EACZA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAFjC,kBAODS,EAAO+K,OAAOC,GAPb,OAOZE,EAPY,OAQlBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GARlB,gDAUlBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAVX,iCAYbpH,GAZa,yDAAH,0DA4BNkI,EAAa,uCAAG,WAC3BjM,EACAI,EACAyL,EACA9B,GAJ2B,eAAAxK,EAAA,6DAMrB2M,EAAQC,YAAqBnM,EAASI,GANjB,SAOd8L,EAAMD,cAAcJ,EAAgBtN,YAAcwL,IAPpC,mFAAH,4DAuBbqC,EAAc,uCAAG,WAC5BpM,EACAI,EACAyL,EACA9B,GAJ4B,2CAAAxK,EAAA,+DAOFY,YAAuBH,EAASI,GAAlDU,EAPoB,EAOpBA,cACFoL,EAAQC,YAAqBnM,EAASI,GAEtCW,EAASsL,YAAcrM,EAASc,EAAeV,GAVzB,SAaRkD,YAAetD,EAASI,GAbhB,cAatBoD,EAbsB,gBAcWzC,EAAOuL,gBAAgBT,GAdlC,uBAcpBvF,EAdoB,EAcpBA,OAAQgD,EAdY,EAcZA,OAAQL,EAdI,EAcJA,KAdI,UAewBiD,EAAMK,gBAf9B,oBAepB3E,EAfoB,EAepBA,WAAYuB,EAfQ,EAeRA,sBAEdqD,EAAoBnD,YACxB7F,EACA8C,EACAgD,EACAL,EACArB,EACAuB,IAEE/L,YAAG2M,GAAQhM,IAAIyO,GAzBS,4CA2BPN,EAAMO,cACrB,gEACA,CAAClO,YAAcwL,IACf8B,GA9BsB,QA2BlBE,EA3BkB,OAgCxBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAhCZ,mDAkCxBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAlCL,gCAqC1BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,0BArCL,iCAuCrBpH,GAvCqB,2DAAH,4DAuFd2I,EAAY,uCAAG,WAC1B1M,EACAI,EACAyL,EACA9B,GAJ0B,mBAAAxK,EAAA,6DAMpB2M,EAAQC,YAAqBnM,EAASI,GANlB,kBAUP8L,EAAMO,cACrB,8DACA,CAAClO,YAAcwL,IACf8B,GAbsB,OAUlBE,EAVkB,OAexBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAfZ,gDAiBxBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAjBL,iCAmBnBpH,GAnBmB,yDAAH,4DAmCZ4I,EAAe,uCAAG,WAC7B3M,EACAI,EACAyL,EACAe,GAJ6B,mDAAArN,EAAA,+DAMHY,YAAuBH,EAASI,GAAlDY,EANqB,EAMrBA,cACFkL,EAAQC,YAAqBnM,EAASI,GAEtCa,EAAS4L,YAAc7M,EAASgB,EAAeZ,GATxB,SAWTkD,YAAetD,EAASI,GAXf,cAWvBoD,EAXuB,gBAYoBsJ,QAAQC,IAAI,CAC3D9L,EAAOyK,QAAQG,GACf5K,EAAO+L,gBAdoB,0CAYtBvE,EAZsB,KAYPH,EAZO,eAgBoB4D,EAAMK,gBAhB1B,wBAgBrB3E,EAhBqB,EAgBrBA,WAAYe,EAhBS,EAgBTA,mBAhBS,UAqBnBuD,EAAMe,iBArBa,oBAkB3BpF,EAlB2B,EAkB3BA,UACAF,EAnB2B,EAmB3BA,iBACAe,EApB2B,EAoB3BA,eAGIwE,EAAqB1E,YACzBC,EACAH,EACAT,EACAF,EACAe,EACAd,EACAe,EACAnF,IAGEpG,YAAGwP,GAAQ7O,IAAImP,GAlCU,4CAoCRhB,EAAMO,cACrB,iEACA,CAAClO,YAAcqO,IACff,GAvCuB,QAoCnBE,EApCmB,OAyCzBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAzCX,mDA2CzBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IA3CJ,gCA8C3BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,0BA9CJ,iCAgDtBpH,GAhDsB,2DAAH,4DAiEfoJ,EAAe,uCAAG,WAC7BnN,EACAI,EACAyL,EACA/B,GAJ6B,+DAAAvK,EAAA,6DAK7BwK,EAL6B,+BAKpB,IALoB,SAOTzG,YAAetD,EAASI,GAPf,cAOvBoD,EAPuB,SAQHrD,YAAuBH,EAASI,GAAlDU,EARqB,EAQrBA,cACFoL,EAAQC,YAAqBnM,EAASI,GAEtCW,EAASsL,YAAcrM,EAASc,EAAeV,GAXxB,SAiBnB8L,EAAMK,gBAjBa,uBAc3B3E,EAd2B,EAc3BA,WACAuB,EAf2B,EAe3BA,sBACAR,EAhB2B,EAgB3BA,mBAhB2B,UAkBiBuD,EAAMe,iBAlBvB,wBAkBrBpF,EAlBqB,EAkBrBA,UAAWF,EAlBU,EAkBVA,iBAlBU,UAmBI5G,EAAOuL,gBAAgBT,GAnB3B,oBAmBrBvF,EAnBqB,EAmBrBA,OAAQgD,EAnBa,EAmBbA,SAEV8D,EAAkBvD,YACtBrG,EACA8F,EACAhD,EACAuB,EACAF,EACAC,EACAe,EACAQ,EACA/L,YAAG0M,GACH1M,YAAG2M,KAEeI,QAjCS,4CAmCR+B,EAAMO,cACrB,wEACA,CAAClO,YAAcuL,GAAYvL,YAAcwL,IACzC8B,GAtCuB,QAmCnBE,EAnCmB,OAwCzBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAxCX,mDA0CzBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IA1CJ,gCA6C3BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAOiC,EAAgBhD,SA7CpB,iCA+CtBrG,GA/CsB,2DAAH,4DA8DfsJ,EAAa,uCAAG,WAAOrN,EAASI,EAAayL,GAA7B,6BAAAtM,EAAA,+DACDY,YAAuBH,EAASI,GAAlDU,EADmB,EACnBA,cACFoL,EAAQC,YAAqBnM,EAASI,GAEtCW,EAASsL,YAAcrM,EAASc,EAAeV,GAJ1B,SAMJW,EAAOuL,gBAAgBT,GANnB,oBAO3BvF,GADMA,EANqB,EAMrBA,QACU4D,WAEJ3B,GAAG,GATY,2CAWN2D,EAAMO,cACrB,wEACA,CAAClO,YAAc+H,GAAS,KACxBuF,GAdqB,QAWjBE,EAXiB,OAgBvBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAhBb,kDAkBvBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAlBN,gCAqBzBpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,wBArBN,iCAuBpBpH,GAvBoB,0DAAH,0DAqCbuJ,EAAU,uCAAG,WAAOtN,EAAS6L,GAAhB,mCAAAtM,EAAA,sEAEDgO,YAAe1B,GAFd,UAElB2B,EAFkB,OAGlBzD,EAASxL,YAAciP,EAASzD,QAC9B0D,EAAaD,EAAbC,SACAC,EAAUF,EAAVE,MACAC,EAAMH,EAANG,EACAC,EAAMJ,EAANI,EACAC,EAAML,EAANK,GACJL,EAASM,MATW,sBAUhBC,EAAqBnM,YAA8B5B,IAVnC,wBAYdgO,EAAcC,YAAuBjO,EAAS+N,GAZhC,oBAeDC,EAAYV,WAC3BzB,EACA9B,EACA0D,EACAC,EACAC,EACAC,EACAC,GAtBgB,QAeZ9B,EAfY,OAwBlBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAxBlB,mDA0BlBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IA1BX,gCA6BpBpH,EAAM,CACJoG,SAAS,EACTgB,MAAM,iDAAD,OAAmDnL,IA/BtC,gCAmCtB+D,EAAM,CACJoG,SAAS,EACTgB,MAAO,yBArCa,iCAwCjBpH,GAxCiB,2DAAH,yD,6UCjXjBmK,EAAiB,uCAAG,WACxBC,EACA7M,EACA8M,EACAC,EACAC,EACA1G,EACA2G,GAPwB,+BAAAhP,EAAA,6DASlBiP,EAAc5P,YAAcwP,EAAKI,aATf,SAUAL,EAAcM,cAAcJ,GAV5B,cAUlBK,EAVkB,OAYlBC,EAAYH,EAAY5E,GAAG,GAAK,OAAS,QACzCpG,EAAQ5E,YAAcwP,EAAK5K,OAC3BwC,EAdkB,WAcP0I,EAAUE,UAdH,OAelBC,EAAiBV,EAAcW,cACnCN,EACAhL,EACAoE,EACA2G,GAEIQ,EAAWP,EAAYzG,MAAMxK,MAAMiG,GAAOjG,MAAMqK,GAChDtB,EAASkI,EAAYzG,MAErBhE,EAAM,CACV4K,YACAK,UAAW1N,EACXkC,MAAOA,EAAM7E,WACboQ,SAAUA,EAASpQ,WACnB2H,OAAQA,EAAO3H,WACfkQ,eAAgBA,EAAelQ,WAC/BsQ,gBAAiBX,EAAO3P,WACxBqH,QAhCsB,kBAmCjBjC,GAnCiB,4CAAH,kEAsCjBmL,EAAqB,uCAAG,WAC5Bd,EACAE,EACAhN,EACAsG,GAJ4B,uBAAArI,EAAA,6DAOtB+G,EAAS1H,YAAcwP,EAAK9H,QAAQyB,MAGpC6G,EAVsB,UAUPR,EAAKQ,UAVE,OAWtBpL,EAAQ5E,YAAcwP,EAAK5K,OAG3B2L,EAAW7I,EAAO/I,MAAMiG,GAAOjG,MAAMqK,GAGrC7D,EAAM,CACV4K,UAAW,cACXK,UAAW1N,EACXkC,MAAOA,EAAM7E,WACboQ,SAAUI,EAASxQ,WACnB2H,OAAQA,EAAO3H,WACfkQ,eAAgB,IAChBI,gBAAiBX,EAAO3P,WACxBqH,KAAM4I,GAzBoB,kBA+BrB7K,GA/BqB,2CAAH,4DAyKdqL,EAAqB,uCAAG,WACnCpP,EACAI,EACAyL,EACAwD,GAJmC,yCAAA9P,EAAA,+DAMVY,YAAuBH,EAASI,GAAjDkB,EAN2B,EAM3BA,aAEF6M,EAAgBhC,YAAqBnM,EAASI,GARjB,SAUb+N,EAAcmB,cAAc,UAVf,cAU7BC,EAV6B,OAYnCF,EAAYpN,SAASoN,GACfG,EAAU,CAAEC,MAAO5D,GAbU,SAcdsC,EAAcuB,eACjC,QACAF,EACAH,EACAE,EAAQI,QAlByB,cAc7BC,EAd6B,iBAwBzBzB,EAAc5B,gBAxBW,iBAqBjC3E,EArBiC,EAqBjCA,WACA2G,EAtBiC,EAsBjCA,SACApF,EAvBiC,EAuBjCA,sBAGI0G,EAAS,GAEN1Q,EAAI,EA5BsB,aA4BnBA,EAAIyQ,EAAOhQ,QA5BQ,wBA6B3BkQ,EAAOF,EAAOzQ,GA7Ba,UA+Bf+O,EAChBC,EACA7M,EACAwO,EAAKC,aACLD,EAAKzB,YACLyB,EAAKb,gBACLrH,EACA2G,EACApF,GAvC+B,QA+B3BpF,EA/B2B,OAyCjC8L,EAAOG,QAAQjM,GAzCkB,QA4BA5E,IA5BA,iDA2C5B0Q,GA3C4B,4CAAH,4DA+CrBI,EAAyB,uCAAG,WACvCjQ,EACAI,EACAyL,EACAwD,GAJuC,qCAAA9P,EAAA,+DAMdY,YAAuBH,EAASI,GAAjDkB,EAN+B,EAM/BA,aAEF6M,EAAgBhC,YAAqBnM,EAASI,GARb,SAUjB+N,EAAcmB,cAAc,UAVX,cAUjCC,EAViC,OAWvCF,EAAYpN,SAASoN,GACfG,EAAU,CAAEC,MAAO5D,GAZc,SAalBsC,EAAcuB,eACjC,YACAF,EACAH,EACAE,EAAQI,QAjB6B,cAajCC,EAbiC,iBAmBVzB,EAAc5B,gBAnBJ,iBAmB/B3E,EAnB+B,EAmB/BA,WAEFiI,EAAS,GAEN1Q,EAAI,EAvB0B,aAuBvBA,EAAIyQ,EAAOhQ,QAvBY,wBAwB/BkQ,EAAOF,EAAOzQ,GAxBiB,UA0BnB+P,EAChBY,EAAKC,aACLD,EAAKb,gBACL3N,EACAsG,GA9BmC,QA0B/B7D,EA1B+B,OAgCrC8L,EAAOG,QAAQjM,GAhCsB,QAuBJ5E,IAvBI,iDAkChC0Q,GAlCgC,4CAAH,4DCjQhCK,EAAc,WAClB,OAAOzI,YAAoBlH,IAAQC,QAG/B2P,EAAS,uCAAG,WAAO7Q,GAAP,eAAAC,EAAA,sEACGC,MAAMF,GADT,cACV8Q,EADU,gBAEHA,EAAKhN,OAFF,mFAAH,sDAaFiN,EAAiB,uCAAG,WAAOrQ,EAASI,GAAhB,eAAAb,EAAA,6DAC/BmC,QAAQC,IAAI,OADmB,SAEbwO,EAAU,GAAD,OAAID,IAAJ,0BAAmC9P,IAF/B,YAEzB2D,EAFyB,UAGpBA,EAAIoG,QAHgB,yCAItBpG,EAAI+B,MAJkB,gCAMxB/B,GANwB,2CAAH,wDAiCjBuM,EAAiB,uCAAG,WAAOtQ,EAASI,GAAhB,eAAAb,EAAA,sEACb4Q,EAAU,GAAD,OAAID,IAAJ,2BAAoC9P,IADhC,YACzB2D,EADyB,UAEpBA,EAAIoG,QAFgB,yCAGtBpG,EAAI+B,MAHkB,gCAKxB/B,GALwB,2CAAH,wDAuCjBwM,EAAgB,uCAAG,WAC9BvQ,EACAI,EACAyL,GAH8B,eAAAtM,EAAA,sEAKZ4Q,EAAU,GAAD,OACtBD,IADsB,0BACSlQ,EADT,YACoBI,EADpB,YACmCyL,IANhC,YAKxB9H,EALwB,UAQnBA,EAAIoG,QARe,yCASrBpG,EAAI+B,MATiB,gCAWvB/B,GAXuB,2CAAH,0DAuBhByM,EAAiB,uCAAG,WAC/BxQ,EACAI,EACAyL,GAH+B,eAAAtM,EAAA,sEAKb4Q,EAAU,GAAD,OACtBD,IADsB,2BACUlQ,EADV,YACqBI,EADrB,YACoCyL,IANhC,YAKzB9H,EALyB,UAQpBA,EAAIoG,QARgB,yCAStBpG,EAAI+B,MATkB,gCAWxB/B,GAXwB,2CAAH,0DAuBjB0M,EAAiB,uCAAG,WAC/BzQ,EACAI,EACAyL,GAH+B,eAAAtM,EAAA,sEAKb4Q,EAAU,GAAD,OACtBD,IADsB,2BACUlQ,EADV,YACqBI,EADrB,YACoCyL,IANhC,YAKzB9H,EALyB,UAQpBA,EAAIoG,QARgB,yCAStBpG,EAAI+B,MATkB,gCAWxB/B,GAXwB,2CAAH,0DAsIjB2M,EAAgB,uCAAG,WAC9B1Q,EACAI,EACAyL,GAH8B,6CAAAtM,EAAA,sEAMZ4Q,EAAU,GAAD,OACtBD,IADsB,0BACSlQ,EADT,YACoBI,EADpB,YACmCyL,IAPhC,WAMxB9H,EANwB,SASnBA,EAAIoG,UACbwG,EAAiB1O,SAAS8B,EAAI+B,KAAK8K,mBACnCC,EAAqB5O,SAAS8B,EAAI+B,KAAKgL,uBACvCC,EAAehN,EAAI+B,KAAKiL,cAE1BA,EAAeA,EAAatQ,QAAO,SAACtB,GAAD,OAAOA,KAAGwH,KAAI,SAACxH,GAChD,MAAO,CACLwP,UAAWxP,EAAEwP,UAAUqC,OACvBhC,UAAW7P,EAAE6P,UAAUgC,OACvBxN,MAAO5E,YAAcO,EAAEqE,OAAO7E,WAC9BoQ,SAAUnQ,YAAcO,EAAE4P,UAAUpQ,WACpC2H,OAAQ1H,YAAcO,EAAEmH,QAAQ3H,WAChCkQ,eAAgBjQ,YAAcO,EAAE0P,gBAAgBlQ,WAChDsQ,gBAAiB9P,EAAE8P,gBACnBjJ,KAAM7G,EAAE6G,KAAKrH,eAGM,IAAnBgS,GAA+C,IAAvBE,EA1BE,iCA4B+B/D,QAAQC,IAAI,CACrEqC,EACEpP,EACAI,EACAyL,EACA8E,EAAiB,GAEnBV,EACEjQ,EACAI,EACAyL,EACAgF,EAAqB,KAvCG,0CA4BrBI,EA5BqB,KA4BDC,EA5BC,KA0CtBrB,EAASoB,EACZE,OAAOD,GACPC,OAAOJ,GA5CkB,kBA6CrBlB,EAAOuB,MAAK,SAAC7R,EAAG8R,GAAJ,OAAUpP,SAASoP,EAAErL,MAAQ/D,SAAS1C,EAAEyG,UA7C/B,iBA+CH7F,YAAuBH,EAASI,GAAjDqB,EA/CoB,EA+CpBA,aACRkP,EAAiB1O,SAASR,GAC1BoP,EAAqB5O,SAASR,GAjDF,UAkD+BqL,QAAQC,IAAI,CACrEqC,EACEpP,EACAI,EACAyL,EACA8E,EAAiB,GAEnBV,EACEjQ,EACAI,EACAyL,EACAgF,EAAqB,KA7DG,2CAkDrBI,EAlDqB,KAkDDC,EAlDC,KAgEtBrB,EAASoB,EAAmBE,OAAOD,GAhEb,kBAiErBrB,EAAOuB,MAAK,SAAC7R,EAAG8R,GAAJ,OAAUpP,SAASoP,EAAErL,MAAQ/D,SAAS1C,EAAEyG,UAjE/B,4CAAH,2D,sPCzQhBsL,EAAoB,WAC/B,IAAIC,EAAc,GAClB,MAAO,CACL/Q,IADK,SACDR,EAASwR,GACX,IAAMC,EAAG,UAAMzR,EAAN,YAAiBwR,GAC1B,GAAIE,OAAOC,KAAKJ,GAAaK,SAASH,GACpC,OAAOF,EAAYE,GAErB/P,QAAQC,IAAR,0CAA+C8P,KAGjDI,IATK,SASD7R,EAASwR,EAAiBM,GAC5B,IAAML,EAAG,UAAMzR,EAAN,YAAiBwR,GAC1BD,EAAYE,GAAOK,IAbQ,GA0CpBC,GAxBuB,WAClC,IAAIC,EAAkB,GADY,GAwBT,WACzB,IAAIC,EAAS,GACTC,EAAY,KAChB,MAAO,CACL1R,IADK,WAKH,MAHe,KAAXyR,GACFvQ,QAAQC,IAAI,6BAEPsQ,GAEHE,QAPD,SAOSnS,EAASI,GAAc,OAAD,mIAEdkD,YAAetD,EAASI,GAFV,OAGpB,MADN2D,EAF0B,UAI9BkO,EAASlO,GAJqB,gDAOhCrC,QAAQC,IAAR,oCAPgC,4DAUpCyQ,OAjBK,SAiBEpS,EAASI,GACd,IAAMiS,EAAOpN,KACbiN,EAAYI,aAAY,WAEtBD,EAAKF,QAAQnS,EAASI,KACrB,MAELmS,MAxBK,WAyBCL,GACFM,cAAcN,GAEhBD,EAAS,KA/BY,IA2CdQ,EAAgC,WAC3C,IAAIC,EAAc,GAClB,MAAO,CACLlS,IADK,WAKH,OAHKkS,EAAY9K,YACflG,QAAQC,IAAI,iDAEP+Q,GAEHN,OAPD,SAOQpS,EAASI,GAAc,OAAD,mHAC3B+N,EAAgBhC,YAAqBnM,EAASI,GADnB,SAEf+N,EAAc5B,gBAFC,cAE3BxI,EAF2B,QAGzB6D,aACN8K,EAAc3O,GAJiB,kBAM1BA,GAN0B,+CATM,GAqBhC4O,EAAc,WACzB,IAAIC,EAAM,KACV,MAAO,CACLpS,IADK,WAEH,GAAIoS,EACF,OAAOA,EAEPlR,QAAQC,IAAI,oDAGhBkQ,IARK,SAQDvS,GACF,IACE,IAAMwF,EAAK+N,aAAGvT,EAAK,CACjBiG,WAAY,CAAC,aACbC,KAAM,QAERV,EAAGW,GAAG,WAAW,WACf/D,QAAQC,IAAI,iBAAkBmD,EAAGgO,OAE/BhO,EACF8N,EAAM9N,EAENpD,QAAQC,IAAI,mDAEd,MAAOoR,GACPrR,QAAQC,IAAI,oBAAqBoR,KAGrCC,SA1BK,SA0BI1T,GAIP,OAHKsT,GACH3N,KAAK4M,IAAIvS,GAEJsT,IAhCc,I,mkBCnGrBK,EAAc,SAACnO,EAAIoO,GACvB,OAAO,IAAIpG,SAAQ,SAACqG,EAASC,GAC3BtO,EAAGW,GAAGyN,GAAO,SAASpN,GACpBqN,EAAQE,KAAKC,MAAMxN,WAInByN,EAAwB,uCAAG,WAAMC,GAAN,iBAAAjU,EAAA,6DACzBuF,EAAK6N,IAAWK,SAASvL,YAAoBlH,IAAQC,QAD5B,SAEzBsE,EAAG2O,KAAKD,GAFiB,uBAGbP,EAAYnO,EAAI,oBAHH,cAGzBf,EAHyB,yBAKxBA,GALwB,2CAAH,sDAQjB2P,EAAgB,uCAAG,WAC9B1T,EACAI,EACAyL,EACA/B,GAJ8B,6BAAAvK,EAAA,6DAK9BwK,EAL8B,+BAKrB,IALqB,SAOZoD,YAAgBnN,EAASI,EAAayL,EAAgB/B,EAAWC,GAPrD,YAOxBhG,EAPwB,QAQtBoG,QARsB,iCASfoJ,EAAyB,qBAAD,OAAsBvT,EAAtB,YAAiCI,EAAjC,YAAgDyL,EAAhD,MATT,yEAWrB9H,GAXqB,4CAAH,4DAehB4P,EAAc,uCAAG,WAC5B3T,EACAI,EACAyL,EACA/B,GAJ4B,6BAAAvK,EAAA,6DAK5BwK,EAL4B,+BAKnB,IALmB,SAOVsD,YAAcrN,EAASI,EAAayL,EAAgB/B,EAAWC,GAPrD,YAOtBhG,EAPsB,QAQpBoG,QARoB,iCASboJ,EAAyB,kBAAD,OAAmBvT,EAAnB,YAA8BI,EAA9B,YAA6CyL,EAA7C,MATX,yEAWnB9H,GAXmB,4CAAH,4DAed6P,EAAc,uCAAG,WAC5B5T,EACAI,EACAyL,GAH4B,6BAAAtM,EAAA,6DAI5BwK,EAJ4B,+BAInB,IAJmB,SAMVkC,YAAcjM,EAASI,EAAayL,EAAgB9B,GAN1C,YAMtBhG,EANsB,QAOpBoG,QAPoB,iCAQboJ,EAAyB,kBAAD,OAAmBvT,EAAnB,YAA8BI,EAA9B,YAA6CyL,EAA7C,MARX,yEAUnB9H,GAVmB,4CAAH,0DAcd8P,EAAe,uCAAG,WAC7B7T,EACAI,EACAyL,GAH6B,6BAAAtM,EAAA,6DAI7BwK,EAJ6B,+BAIpB,IAJoB,SAMXqC,YAAepM,EAASI,EAAayL,EAAgB9B,GAN1C,YAMvBhG,EANuB,QAOrBoG,QAPqB,iCAQdoJ,EAAyB,mBAAD,OAAoBvT,EAApB,YAA+BI,EAA/B,YAA8CyL,EAA9C,MARV,yEAUpB9H,GAVoB,4CAAH,0DAcf+P,EAAa,uCAAG,WAC3B9T,EACAI,EACAyL,GAH2B,6BAAAtM,EAAA,6DAI3BwK,EAJ2B,+BAIlB,IAJkB,SAMT2C,YAAa1M,EAASI,EAAayL,EAAgB9B,GAN1C,YAMrBhG,EANqB,QAOnBoG,QAPmB,iCAQZoJ,EAAyB,iBAAD,OAAkBvT,EAAlB,YAA6BI,EAA7B,YAA4CyL,EAA5C,MARZ,yEAUlB9H,GAVkB,4CAAH,0DAcbgQ,EAAgB,uCAAG,WAC9B/T,EACAI,EACAyL,GAH8B,6BAAAtM,EAAA,6DAI9BqN,EAJ8B,+BAIrB,IAJqB,SAMZD,YAAgB3M,EAASI,EAAayL,EAAgBe,GAN1C,YAMxB7I,EANwB,QAOtBoG,QAPsB,iCAQfoJ,EAAyB,oBAAD,OAAqBvT,EAArB,YAAgCI,EAAhC,YAA+CyL,EAA/C,MART,yEAUrB9H,GAVqB,4CAAH,0DAchBiQ,EAAgB,uCAAG,WAC9BhU,EACAI,EACAyL,GAH8B,6BAAAtM,EAAA,6DAI9BwK,EAJ8B,+BAIrB,IAJqB,SAMZkK,YAAgBjU,EAASI,EAAayL,EAAgB9B,GAN1C,YAMxBhG,EANwB,QAOtBoG,QAPsB,iCAQfoJ,EAAyB,qBAAD,OAAsBvT,EAAtB,YAAiCI,EAAjC,YAAgDyL,EAAhD,MART,yEAUrB9H,GAVqB,4CAAH,0DAchBmQ,EAAmB,uCAAG,WACjClU,EACAI,EACAyL,GAHiC,6BAAAtM,EAAA,6DAIjCqN,EAJiC,+BAIxB,IAJwB,SAMfuH,YAAmBnU,EAASI,EAAayL,EAAgBe,GAN1C,YAM3B7I,EAN2B,QAOzBoG,QAPyB,iCAQlBoJ,EAAyB,wBAAD,OAAyBvT,EAAzB,YAAoCI,EAApC,YAAmDyL,EAAnD,MARN,yEAUxB9H,GAVwB,4CAAH,0DAanBqQ,EAAgB,uCAAG,WAC9BpU,EACAI,EACAyL,GAH8B,6BAAAtM,EAAA,6DAI9BwK,EAJ8B,+BAIrB,IAJqB,SAMZsK,YAAgBrU,EAASI,EAAayL,EAAgB9B,GAN1C,YAMxBhG,EANwB,QAOtBoG,QAPsB,iCAQfoJ,EAAyB,qBAAD,OAAsBvT,EAAtB,YAAiCI,EAAjC,YAAgDyL,EAAhD,MART,yEAUrB9H,GAVqB,4CAAH,0DAchBuQ,EAAmB,uCAAG,WACjCtU,EACAI,EACAyL,GAHiC,6BAAAtM,EAAA,6DAIjCqN,EAJiC,+BAIxB,IAJwB,SAMf2H,YAAmBvU,EAASI,EAAayL,EAAgBe,GAN1C,YAM3B7I,EAN2B,QAOzBoG,QAPyB,iCAQlBoJ,EAAyB,wBAAD,OAAyBvT,EAAzB,YAAoCI,EAApC,YAAmDyL,EAAnD,MARN,yEAUxB9H,GAVwB,4CAAH,2D,qSCwFnByQ,EAAU,uCAAG,WAAOxU,EAASI,EAAayL,GAA7B,mBAAAtM,EAAA,+DACEY,YAAuBH,EAASI,GAAlDQ,EADgB,EAChBA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAF7B,SAIXS,EAAO2T,WAAW3I,GAJP,mFAAH,0DA8CV4I,EAAe,uCAAG,WAAOzU,EAASI,EAAakG,GAA7B,uBAAA/G,EAAA,yDAEzBiE,EAAQuO,IAAWvR,MACnBkU,EAAajC,IAA6BjS,MAChC,KAAVgD,EAJyB,gCAKrBuO,IAAWK,OAAOpS,EAASI,GALN,OAM3BoD,EAAQuO,IAAWvR,MANQ,UAUxBkU,EAAW9M,WAVa,iCAWR6K,IAA6BL,OAC9CpS,EACAI,GAbyB,OAW3BsU,EAX2B,sBAiBrB9M,GAjBqB,EAiBI8M,GAAzB9M,WAAY2G,EAjBS,EAiBTA,SAjBS,kBAkBtBnR,YAAGkJ,GACPyB,MACAxK,MAAMiG,GACNjG,MAAMqK,GACNrK,MAAMgR,GACN5P,YAvB0B,4CAAH,0DAuCfgW,EAAc,uCAAG,WAAO3U,EAASI,GAAhB,6BAAAb,EAAA,6DACtB4O,EAAgBhC,YAAqBnM,EAASI,GADxB,SAGV+N,EACfwG,iBACAC,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,iBAAkBoR,MALpB,cAGtBhP,EAHsB,OAM5BuN,IAAiBO,IAAI7R,EAASI,EAAa2D,GANf,SAOL8Q,YAAe7U,EAASI,GAPnB,UAOtB0U,EAPsB,QASxB/Q,EATwB,wBAYxBoE,EAIEpE,EAJFoE,YACA4M,EAGEhR,EAHFgR,oBACAlN,EAEE9D,EAFF8D,UACAF,EACE5D,EADF4D,iBAEIrB,EAASwO,EAASE,UAjBE,kBAoBnB,CACLC,aAAcxW,YAAsB0J,GACpC4M,oBAAqBjY,YAAUiY,GAAqBG,cAAc,IAClErN,UAAWA,EAAUlJ,WACrB2H,OAAQ1H,YAAc0H,GAAQ3H,WAC9BgJ,iBAAkBA,EAAiBhJ,aAzBX,4CAAH,wDAwCdwW,EAAuB,uCAAG,WACrCnV,EACAI,EACAgV,GAHqC,qBAAA7V,EAAA,yDAOrCwE,EAAMuN,IAAiB9Q,IAAIR,EAASI,GAPC,uBAS7B+N,EAAgBhC,YAAqBnM,EAASI,GATjB,SAUvB+N,EAAcwG,iBAVS,OAUnC5Q,EAVmC,kBAYjCA,EAZiC,oBAa7B2Q,EAAa,CACjBtX,YAAG2G,EAAI4D,kBAAkBmB,KAAK1L,YAAGgY,IAAezW,WAChDoF,EAAIP,MACJO,EAAI6D,WACJ7D,EAAI8D,UACJ9D,EAAIkE,yBAEFjJ,IAAmB,WAAnB,EAAuB0V,GApBQ,0CAqB1B,CACLW,aAAc,MAtBiB,eA0BnCA,EAAerN,IAAoB,WAApB,EAAwB0M,GACvCW,EAAenN,YAAmBlI,EAASqV,GA3BR,kBA4B5B,CACLA,aAAc5W,YAAsB4W,KA7BH,4CAAH,0DAoEvBC,EAAyB,uCAAG,WACvCtV,EACAI,EACAgV,GAHuC,qBAAA7V,EAAA,yDAMvCwE,EAAMuN,IAAiB9Q,IAAIR,EAASI,GANG,uBAQ/B+N,EAAgBhC,YAAqBnM,EAASI,GARf,SASzB+N,EACTwG,iBACAC,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,mBAAoBoR,MAXb,OASrChP,EATqC,kBAanCA,EAbmC,oBAc/B2Q,EAAa,CACjBtX,YAAG2G,EAAI4D,kBAAkBmB,KAAK1L,YAAGgY,IAAezW,WAChDoF,EAAIP,MACJO,EAAI6D,WACJ7D,EAAI8D,UACJ9D,EAAI+D,kBAEF9I,IAAmB,WAAnB,EAAuB0V,GArBU,0CAsB5B,CACLa,eAAgB,MAvBiB,eA0B/BA,EAAiB7N,IAAsB,WAAtB,EAA0BgN,GA1BZ,kBA2B9B,CACLa,eAAgB9W,YAAsB8W,KA5BH,4CAAH,2D,8ECzbtCrP,OAAOsP,UAAUhX,QAAU,SAASiX,GAClC,GAAGA,EAAI,IAAMA,EAAI,EACb,MAAM,IAAIC,WAAW,sDAGzB,IAAI/F,EAASzJ,OAAOjB,MACpB,GAAI7F,MAAMuQ,IAAWA,GAAUgG,KAAKC,IAAI,GAAI,IACxC,OAAOjG,EAAOhR,WAElB,GAAoB,oBAAR8W,GAA8B,GAAPA,EAC/B,OAAQE,KAAKE,MAAMlG,GAAShR,WAEhC,IAAIkR,EAASF,EAAOhR,WAChBmX,EAAYjG,EAAOkG,MAAM,KAE7B,GAAGD,EAAUlW,OAAO,EAEhB,OAAOoW,EAAOnG,GAElB,IAAIoG,EAASH,EAAU,GACnBI,EAAUJ,EAAU,GACpBK,EAAUD,EAAQE,OAAOX,EAAK,GAElC,GAAGS,EAAQtW,QAAU6V,EAEjB,OAAO5F,EAEX,GAAGqG,EAAQtW,OAAS6V,EAEhB,OAAOO,EAAOnG,GAIlB,GADAA,EAASoG,EAAS,IAAMC,EAAQE,OAAO,EAAGX,GACvCxT,SAASkU,EAAS,KAAK,EAAE,CAExB,IAAI5Y,EAAQoY,KAAKC,IAAI,GAAIH,GACrBY,EAAanQ,OAAO2J,EAAOyG,QAAQ,IAAI,KAC3CD,IAEAxG,EAASmG,GADTK,GAAc9Y,GACa,IAE/B,OAAOsS,EAEP,SAASmG,EAAOO,GACZ,IAAIC,EAASD,EAAIE,QAAQ,KACzB,IAAe,IAAZD,EAAc,CAEbD,GAAO,IACP,IAAI,IAAIpX,EAAI,EAAEA,EAAEsW,EAAItW,IAChBoX,GAAO,IAEX,OAAOA,EAIP,IADA,IAAIG,EAAOjB,GAAOc,EAAI3W,OAAS4W,EAAS,GAChCG,EAAI,EAAEA,EAAED,EAAKC,IACjBJ,GAAO,IAEX,OAAOA,K,6RC5CJK,EAAmB,uCAAG,WACjC5W,EACAI,EACAyL,GAHiC,+BAAAtM,EAAA,2DAKP2C,YAAsBlC,EAASI,KAAjDQ,EALyB,EAKzBA,eALyB,wBAQzBiW,EAAUC,YAAe9W,EAASI,GAElCS,EAASiL,YAAc9L,EAASY,EAAeR,GAVtB,SAYkB0M,QAAQC,IAAI,CAC3DlM,EAAO6K,QAAQtL,GACfS,EAAO6K,QAAQG,GACfgL,EAAQE,aAAalL,KAfQ,0CAYxBhE,EAZwB,KAYbmP,EAZa,KAYEpK,EAZF,uBAkBxB,CACLqK,cAAepP,EAAUlJ,WACzBqY,cAAeA,EAAcrY,WAC7BiO,OAAQA,EAAOjO,aArBc,eAwBjC+C,QAAQC,IAAI,oCAxBqB,kBAyB1B,IAzB0B,4CAAH,0DAyCnBsS,EAAe,uCAAG,WAC7BjU,EACAI,EACAyL,EACA9B,GAJ6B,uBAAAxK,EAAA,2DAOH2C,YAAsBlC,EAASI,KAAjDQ,EAPqB,EAOrBA,eAPqB,wBAUrBiW,EAAUC,YAAe9W,EAASI,GAEzB0L,YAAc9L,EAASY,EAAeR,GAZ1B,kBAeRyW,EAAQnK,aAAab,EAAgB9B,GAf7B,OAenBgC,EAfmB,OAgBzBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAhBX,kDAkBzBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAlBJ,gCAqB3BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,4CArBJ,iCAuBtBpH,GAvBsB,0DAAH,4DAuCfoQ,EAAkB,uCAAG,WAChCnU,EACAI,EACAyL,EACA9B,GAJgC,uBAAAxK,EAAA,2DAON2C,YAAsBlC,EAASI,KAAjDQ,EAPwB,EAOxBA,eAPwB,wBAUxBiW,EAAUC,YAAe9W,EAASI,GAEzB0L,YAAc9L,EAASY,EAAeR,GAZvB,kBAeXyW,EAAQlK,gBAAgBd,EAAgB9B,GAf7B,OAetBgC,EAfsB,OAgB5BhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAhBR,kDAkB5BhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAlBD,gCAqB9BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,4CArBD,iCAuBzBpH,GAvByB,0DAAH,4DAmClBmT,EAAa,uCAAG,WAAOlX,EAASI,EAAayL,GAA7B,mBAAAtM,EAAA,+DACD2C,YAAsBlC,EAASI,GAAjDQ,EADmB,EACnBA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAF1B,SAIdS,EAAO2T,WAAW3I,GAJJ,mFAAH,0DAmBbsL,EAAS,uCAAG,WAAOnX,EAASI,EAAayL,GAA7B,uBAAAtM,EAAA,+DACG2C,YAAsBlC,EAASI,GAAjDQ,EADe,EACfA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAF9B,kBAOJS,EAAO+K,OAAOC,GAPV,OAOfE,EAPe,OAQrBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GARf,gDAUrBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAVR,iCAYhBpH,GAZgB,yDAAH,0DAuBTqT,EAAmB,uCAAG,WACjCpX,EACAI,EACAyL,GAHiC,qBAAAtM,EAAA,+DAKP2C,YAAsBlC,EAASI,GAAjDQ,EALyB,EAKzBA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GANpB,SAQXS,EAAO6K,QAAQG,GARJ,cAQ3BH,EAR2B,yBAS1BA,EAAQ/M,YATkB,2CAAH,2D,iHCzK1B0Y,EAAa/S,aAAkB,kBAAM,iCACrCgT,EAAYhT,aAAkB,kBAAM,iCAY3BiT,MAVf,WAEE,OAAGC,YACM,cAACH,EAAD,IAENI,WACM,cAACH,EAAD,SADT,G,yFCHKI,EAAa3a,EADRwD,UAAQC,OACbkX,UAmDQC,EA5Cb,aAAc,IAAD,gCAFbC,OAAS,GAEI,KAQbC,YAAc,mBAAQ,EAAKD,OAAO9M,SARrB,KAUbgN,QAVa,sBAUF,4BAAAvY,EAAA,sEACS8K,0BADT,cACHtG,EADG,yBAEF,IAAI+I,QAAJ,uCAAY,WAAOqG,EAAQC,GAAf,mBAAA7T,EAAA,0DACdwE,EAAIoG,QADU,uBAERnK,EAAmB+D,EAAnB/D,QAAQ8K,EAAW/G,EAAX+G,QAFA,SAGM,EAAKiN,kBAAkB/X,EAAQ8K,GAHrC,OAGTkN,EAHS,OAIf7E,EAAQ6E,GAJO,sBAMf5E,EAAO,MANQ,2CAAZ,0DAFE,2CAVE,KAuBb2E,kBAvBa,uCAuBO,WAAO/X,EAAQ8K,GAAf,iBAAAvL,EAAA,sEACI6L,+BAAqBpL,EAAQ8K,GADjC,cACZY,EADY,OAEZkM,EAAS,CAAC5X,UAAQ8K,UAAQY,UAAQuM,cAAgBA,YAAcvM,IACnEgM,EAAU1X,IACX0R,OAAOwG,OAAON,EAAdlG,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAyBgG,EAAU1X,IAAnC,IAA4CmY,WAAY,KAE1D,EAAKP,OAASA,EANI,kBAOXA,GAPW,2CAvBP,6DAiCbpX,IAAM,WACJ,OAAO,EAAKoX,QAlCD,KAqCbQ,OAAS,WACP,EAAKR,OAAS,KACdS,eAAeC,WAhDD,iBAiDd7N,OAAOQ,SAASC,UAvChBlG,6BAAmBC,KAAK,CACtB2S,OAAS1S,aACT6S,kBAAoB3S,SACpB0S,QAAU1S,Y,kCChBKmT,GCEAxb,EAAOwD,UAAQC,OAAf,OAEDgY,IAAMC,Y,WDAvB,aAAc,yBAFdrK,KAAO,GAGLpJ,6BAAmBC,KAAK,CACrBmJ,KAAOlJ,aACPwT,QAAUtT,W,+EAKf,WAAW4S,EAAOW,EAAKjT,GAAvB,eAAAnG,EAAA,sEACwB+M,0BAAgB0L,EAAOJ,OAAO5X,QAAQ2Y,EAAKtY,KAAK2X,EAAOJ,OAAO9M,SADtF,cACO8N,EADP,UAGG3T,KAAKyT,QAAQE,GACVlT,GACDA,EAASkT,IAGb3T,KAAKf,MAAM8T,EAAOW,EAAKjT,GARxB,kBASQkT,GATR,gD,8EAYA,SAAMZ,EAAOW,EAAKjT,GAAU,IAAD,OACrBT,KAAK4T,WACR5T,KAAK4T,SAAWpO,OAAO6H,aAAY,kBAAM,EAAKwG,KAAKd,EAAOW,EAAKjT,KAAU,Q,mBAI5E,WACC8M,cAAcvN,KAAK4T,UACnB5T,KAAK4T,SAAW,O,oBAGjB,c,qBAIA,SAAQzK,GACNnJ,KAAKmJ,KAAOA,M,eEzCI2K,E,2HAEnB,WAAWf,EAAOjb,GAAlB,eAAAwC,EAAA,yDACM0F,KAAKmJ,QAASnJ,KAAKmJ,MAAQrR,EAAOwE,SAAW0D,KAAKmJ,KAAK7M,QAD7D,gCAEuByX,2BAAiBhB,EAAOJ,OAAOqB,QAAQlc,EAAOsD,MAFrE,OAEU+N,EAFV,OAGInJ,KAAKyT,QAAQtK,GAHjB,gCAKSnJ,KAAKmJ,MALd,gD,8EAQA,SAAQA,GACNnJ,KAAKmJ,KAAOA,M,KCVK8K,E,WAGnB,aAAc,yBAFdnM,IAAM,GAGJoM,yBAAelU,KAAK,CAClB8H,IAAM7H,aACNkU,OAAShU,W,+EAIb,4BAAA7F,EAAA,sEACwBe,mCAAyBC,UAAQC,OADzD,cACQ6Y,EADR,OAEEpU,KAAKmU,OAAOC,GAFd,kBAGSA,GAHT,gD,0EAMA,SAAOtM,GACL9H,KAAK8H,IAAMA,M,sBCqBMuM,E,WAcnB,aAAc,yBAbdtB,OAAS,KAaI,KAZbqB,QAAU,GAYG,KAXbtc,OAAS,KAWI,KAVboL,YAAc,KAUD,KATbvD,MAAQ,KASK,KARb0B,OAAS,GAQI,KAPbvB,QAAS,EAOI,KANbuE,OAAS,GAMI,KALbsP,SAAW,GAKE,KAJbW,SAAW,GAIE,KAHbpR,YAAc,GAGD,KAFbqR,sBAAwB,OAGtBL,yBAAelU,KAAK,CAClBL,MAAQM,aACRoB,OAASpB,aACToE,OAASpE,aACTiD,YAAcjD,aACd0T,SAAW1T,aACXqU,SAAWrU,aACXH,OAASG,aACTsU,sBAAwBtU,aACxBuU,UAAWrU,SACXsU,WAAatU,SACbuU,UAAYvU,SACZD,SAAWC,SACXwU,YAAcxU,SACdyU,YAAczU,SACd0U,UAAY1U,SACZ2U,yBAA2B3U,SAC3B4U,eAAiB5U,SACjB6U,UAAY7U,SACZ2E,OAASmQ,WAETC,eAAiBD,WACjBvL,UAAYuL,WACZE,cAAgBF,aAElBjV,KAAKoV,WAAa,IAAInB,EACtBjU,KAAKqV,OAAS,IAAI3V,IAClBM,KAAKsV,aAAe,IAAIhC,EACxBtT,KAAKuV,aAAe,IAAIzB,E,+EAM1B,WAAWf,GAAX,eAAAzY,EAAA,yDACM0F,KAAK+S,QAAUA,EAAOJ,OAAO9M,UAAY7F,KAAK+S,OAAOJ,OAAO9M,QADlE,uBAEI7F,KAAKwU,UAAUzB,GAFnB,SAIsB/S,KAAKoV,WAAWvB,OAJtC,OAIU/L,EAJV,OAKI9H,KAAKyU,WAAW3M,EAAItM,QAAO,SAAAC,GAAC,OAAI+Z,YAAWzC,EAAOJ,OAAO5X,QAAQU,EAAEV,aACnEiF,KAAK0U,UAAU5M,EAAI2N,MAAK,SAAAha,GAAC,OAAI+Z,YAAWzC,EAAOJ,OAAO5X,QAAQU,EAAEV,aAChEiF,KAAK0V,eAAe1V,KAAK+S,OAAO/S,KAAKlI,QAPzC,gD,kHAWA,WAAawE,GAAb,eAAAhC,EAAA,uDACQqb,EAAM3V,KAAKoU,QAAQqB,MAAK,SAAA3d,GAAM,OAAIA,EAAOwE,SAAWA,QAExD0D,KAAK4V,QACL5V,KAAK0U,UAAUiB,GACf3V,KAAK0V,eAAe1V,KAAK+S,OAAO4C,GAChC3V,KAAKW,SACLX,KAAK6U,UAAU,KAPnB,gD,0HAWA,WAAqB9B,EAAOjb,GAA5B,0BAAAwC,EAAA,sEAE0B0F,KAAKsV,aAAazB,KAAKd,EAAOjb,GAAO,SAAA6b,GACzD,EAAKiB,YAAYjB,MAHvB,cAESA,EAFT,OAKG3T,KAAK4U,YAAYjB,GAEjB3T,KAAKqV,OAAOxB,KAAK7T,KAAKlI,OAAOwE,QAAO,SAAAqD,GACnC,EAAKO,SAASP,MARlB,SAW0BK,KAAKuV,aAAa1B,KAAKd,EAAOjb,GAXxD,cAWSwc,EAXT,OAYGtU,KAAK2U,YAAYL,GAZpB,UAe6BtU,KAAK6V,gBAAgB9C,EAAOjb,GAfzD,QAeSoL,EAfT,OAgBGlD,KAAK+U,eAAe7R,GAhBvB,iD,qHAmBA,4BAAA5I,EAAA,sEACyB0F,KAAKsV,aAAazB,KAAK7T,KAAK+S,OAAO/S,KAAKlI,QADjE,OACQ6b,EADR,OAEE3T,KAAK4U,YAAYjB,GACjB3T,KAAK+S,OAAOD,kBAAkB9S,KAAK+S,OAAOJ,OAAO5X,QAAQiF,KAAK+S,OAAOJ,OAAO9M,SAC5E7F,KAAK6U,UAAU,IAJjB,gD,yEAUA,WACE7U,KAAKgV,WAAU,GACfhV,KAAKqV,OAAOO,QACZ5V,KAAKsV,aAAaM,U,oBAMpB,WACE5V,KAAKgV,WAAU,GACfhV,KAAKqV,OAAO1U,SACZX,KAAKsV,aAAa3U,W,uBAGpB,SAAUoS,GACR/S,KAAK+S,OAASA,I,wBAGhB,SAAWqB,GACTpU,KAAKoU,QAAUA,I,uBAGjB,SAAUtc,GACRkI,KAAKlI,OAASA,I,sBAGhB,SAAS6H,GACPK,KAAKL,MAAQA,I,yBAGf,SAAYgU,GACV3T,KAAK2T,SAAWA,I,yBAGlB,SAAYW,GACVtU,KAAKsU,SAAWA,I,4BAGlB,SAAepR,GACblD,KAAKkD,YAAcA,I,uBAGrB,SAAU7B,GACRrB,KAAKqB,OAASA,I,uBAGhB,SAAUvB,GACRE,KAAKF,OAASA,I,sCAGhB,SAAyB4J,GACvB1J,KAAKuU,sBAAwB7K,I,uBAG/B,SAAUrF,GAER,GADArE,KAAKqE,OAASA,EACXrE,KAAKsU,SAAS,CACf,IAAMjT,GAAWgD,IAAarE,KAAKL,OAAWK,KAAKsU,SAAS3R,YAAgB3C,KAAKsU,SAASpQ,uBACtF/J,MAAMkH,KACRrB,KAAK6U,UAAUnE,KAAK5N,IAAIzB,IACxB5E,QAAQC,IAAI,UAAU2E,O,yBAK5B,WACE,MAAmB,KAAhBrB,KAAKqB,QAAiBlH,MAAM6F,KAAKqB,QAC3B,GACiB,KAAhBrB,KAAKqE,QACNrE,KAAKqB,OAAUqP,KAAK5N,KAAK9C,KAAK2T,SAAStS,QAC3BrE,SAAS0T,KAAK5N,IAAI9C,KAAKqB,QAAUqP,KAAK5N,IAAI9C,KAAK2T,SAAStS,SAGxDrE,SAAS0T,KAAK5N,IAAI9C,KAAK2T,SAAStS,QAAUqP,KAAK5N,IAAI9C,KAAKqB,SAIpErB,KAAKqB,S,kBAMhB,WACE,GAAGrB,KAAKL,OAASK,KAAK2T,UAAY3T,KAAKsU,UAA4B,KAAhBtU,KAAKqB,OAAc,CAEpE,IAAIyU,EAAYpF,KAAK5N,IAAI9C,KAAKqB,QAEX,KAAhBrB,KAAKqE,SAC4B,SAA/BrE,KAAKuU,uBACDvU,KAAK2T,SAAStS,OAAU,EAC3ByU,IAA0B9V,KAAK2T,SAAStS,OAExCyU,EAAYpF,KAAK5N,IAAI9C,KAAK2T,SAAStS,QAAUyU,EAI7CA,GADG9V,KAAK2T,SAAStS,OAAU,GACZrB,KAAK2T,SAAStS,OAAUyU,EAE3BpF,KAAK5N,IAAI9C,KAAK2T,SAAStS,UAAYyU,GAIrD,IAAMC,EAAgBrF,KAAK5N,IAAIgT,GAAa9V,KAAKL,MAAQK,KAAKsU,SAAS3R,WACjEqT,GAAehW,KAAK2T,SAAStP,SAAYrE,KAAK2T,SAASsC,cACvD5R,EAAS0R,EAAgB/V,KAAKsU,SAASpQ,sBACvCgS,IAAaH,GAAiBC,GAAYzc,QAAQ,GAClDkN,IAAauP,GAAgB3R,GAAS9K,QAAQ,GAGpD,MAAO,CACLyc,aACA3R,SACA8R,UALgB1P,EAAU,EAAIA,EAAU,EAMxC2P,UALgBL,EAAgB/V,KAAKL,MAMrCuW,YAEG,GAAGlW,KAAK2T,UAAY3T,KAAK2T,SAAStP,OAAO,CAC9C,IAAM2R,IAAgBhW,KAAK2T,SAAStP,SAAYrE,KAAK2T,SAASsC,eAAgB1c,QAAQ,GAChF8K,IAAWrE,KAAK2T,SAAS0C,YAAY9c,QAAQ,GAEnD,MAAO,CACLyc,aACA3R,SACA8R,YAJmBH,GAAgB3R,GAAS9K,QAAQ,IAOxD,MAAO,K,qBAGT,WAEE,GAAmB,KAAhByG,KAAKqE,OAAc,CACpB,IAAKrE,KAAK2T,SAAStS,OAAU,EAC3B,OAAGqP,KAAK5N,IAAI9C,KAAKqB,QAAUqP,KAAK5N,IAAI9C,KAAK2T,SAAStS,QACzC,OAEA,QAEJ,IAAKrB,KAAK2T,SAAStS,OAAU,EAElC,OAAKrB,KAAKqB,OAAUqP,KAAK5N,KAAK9C,KAAK2T,SAAStS,QACnC,QAEA,OAIb,OAAO,I,oEAIT,WAAsB0R,EAAOjb,GAA7B,eAAAwC,EAAA,0DACKyY,IAAUjb,EADf,gCAEsB4X,YAAeqD,EAAOJ,OAAO5X,QAAQjD,EAAOsD,MAFlE,cAEU0D,EAFV,yBAGWA,GAHX,2C,mFAOA,WACE,OAAGkB,KAAKkD,aAAelD,KAAKkD,YAAY4M,qBAAuB9P,KAAKlI,OAC3D,sCAA+BkI,KAAKkD,YAAY4M,qBAAhD,mDACqC9P,KAAKkD,YAAY4M,oBADtD,YAC6E9P,KAAKlI,OAAOuE,aADzF,eAGF,O,KClSL0W,EAAS,IAAIL,EAMb4D,EAAU,IAAIjC,EAEpBkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAU1D,OAAQA,EAASuD,QAASA,EAApC,SACE,cAAC,EAAD,UAINI,SAASC,eAAe,U,qSCXbC,EAAmB,uCAAG,WACjC7b,EACAI,EACAyL,GAHiC,iCAAAtM,EAAA,+DAKP6C,YAAsBpC,EAASI,GAAjDY,EALyB,EAKzBA,cACF8a,EAAUC,YAAe/b,EAASI,GAElCa,EAAS4L,YAAc7M,EAASgB,EAAeZ,GARpB,SAWgB0M,QAAQC,IAAI,CAC3D9L,EAAOyK,QAAQG,GACf5K,EAAO+L,gBAbwB,0CAW1BvE,EAX0B,KAWXH,EAXW,eAeLwT,EAAQ7O,iBAfH,wBAezBpF,EAfyB,EAezBA,UAfyB,kBAkB1B,CACLmF,YAAa1E,EAAkB3J,WAC/BsY,cAAepP,EAAUlJ,WACzBiO,OAAQnE,EAAc9J,WACtBiK,YAAaN,EAAkBC,GAAG,GAC9BnL,YAAG,GACHyK,EAAUpK,IAAI6K,IAChB3J,WACFuO,mBAAoBzE,EAAc9J,aA1BH,4CAAH,0DA2CnB0V,EAAe,uCAAG,WAC7BrU,EACAI,EACAyL,EACA9B,GAJ6B,qBAAAxK,EAAA,2DAOH6C,YAAsBpC,EAASI,IAP5B,EAOrBQ,cAPqB,wBASrBkb,EAAUC,YAAe/b,EAASI,GATb,kBAYR0b,EAAQpP,aAAab,EAAgB9B,GAZ7B,OAYnBgC,EAZmB,OAazBrK,QAAQC,IAAIoK,EAAZ,YAAuBA,IACvBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAdX,kDAgBzBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAhBJ,gCAmB3BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,4CAnBJ,iCAqBtBpH,GArBsB,0DAAH,4DAqCfwQ,EAAkB,uCAAG,WAChCvU,EACAI,EACAyL,EACA9B,GAJgC,qBAAAxK,EAAA,2DAON6C,YAAsBpC,EAASI,IAPzB,EAOxBQ,cAPwB,wBASxBkb,EAAUC,YAAe/b,EAASI,GATV,kBAWX0b,EAAQnP,gBAAgBd,EAAgB9B,GAX7B,OAWtBgC,EAXsB,OAY5BhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAZR,kDAc5BhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAdD,gCAiB9BpH,EAAM,CAAEoG,SAAS,EAAOgB,MAAO,4CAjBD,iCAmBzBpH,GAnByB,0DAAH,4DA+BlBiY,EAAa,uCAAG,WAAOhc,EAASI,EAAayL,GAA7B,mBAAAtM,EAAA,+DACD6C,YAAsBpC,EAASI,GAAjDQ,EADmB,EACnBA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAF1B,SAIdS,EAAO2T,WAAW3I,GAJJ,mFAAH,0DAmBboQ,EAAS,uCAAG,WAAOjc,EAASI,EAAayL,GAA7B,uBAAAtM,EAAA,+DACG6C,YAAsBpC,EAASI,GAAjDQ,EADe,EACfA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GAF9B,kBAOJS,EAAO+K,OAAOC,GAPV,OAOfE,EAPe,OAQrBhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GARf,gDAUrBhI,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAVR,iCAYhBpH,GAZgB,yDAAH,0DAuBTmY,EAAmB,uCAAG,WACjClc,EACAI,EACAyL,GAHiC,qBAAAtM,EAAA,+DAKP6C,YAAsBpC,EAASI,GAAjDQ,EALyB,EAKzBA,cACFC,EAASiL,YAAc9L,EAASY,EAAeR,GANpB,SAQXS,EAAO6K,QAAQG,GARJ,cAQ3BH,EAR2B,yBAS1BA,EAAQ/M,YATkB,2CAAH,2D,gCC9KhC,sGAAO,IAAMwd,EAA0B,iBAAM,CAC3C,kDACA,kDACA,kDACA,kDACA,kDACA,oDAGWC,EAAqB,WAAmC,IAAlCpZ,EAAiC,uDAA3B,MAAOqZ,EAAoB,uCAClE,MAAa,SAARrZ,GAA0B,eAARA,IAAyBqZ,EAKzC,6CAHE,8CAMEC,EAA6B,WAAmC,IAAlCtZ,EAAiC,uDAA3B,MAAOqZ,EAAoB,uCAC1E,MAAa,SAARrZ,GAA0B,eAARA,IAAyBqZ,EAKzC,6CAHE,+C,6RCVEE,EAAW,uCAAG,WAAOC,GAAP,mCAAAjd,EAAA,6DACnBkd,EAAKC,aAAgB,GAC3BF,EAAcxe,YAAkBwe,GAFP,SAGPC,EACfE,UAAU,CAAC,GAAD,OACNH,EADM,4BAENA,EAFM,2BAGNA,EAHM,6BAINA,EAJM,0BAKNA,EALM,sBAMNA,EANM,sBAONA,EAPM,sBAQNA,EARM,kBAUV5H,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,cAAeoR,MAdpB,YAGnBhP,EAHmB,6CAgBoCA,EAhBpC,GAgBhB/D,EAhBgB,KAgBP+J,EAhBO,KAgBC0D,EAhBD,KAgBWC,EAhBX,KAgBkBC,EAhBlB,KAgBqBC,EAhBrB,KAgBwBC,EAhBxB,KAgB2BC,EAhB3B,uBAiBhB,CACL9N,QAASnB,YAAamB,GACtB+J,OAAQnL,YAAcmL,GAAQpL,WAC9B8O,SAAU5O,YAAa4O,GACvBC,MAAO7O,YAAa6O,GACpBC,EAAG9O,YAAa8O,GAChBC,IACAC,IACAC,MAAOhP,YAAWgP,KAzBG,2CAAH,sDA8BX8O,EAAkB,uCAAG,WAAOJ,GAAP,uBAAAjd,EAAA,6DAC1Bkd,EAAKC,aAAgB,GAC3BF,EAAcxe,YAAkBwe,GAFA,SAGdC,EACfE,UAAU,CAAC,GAAD,OACNH,EADM,+BAENA,EAFM,0BAIV5H,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,qBAAsBoR,MARpB,YAG1BhP,EAH0B,6CAUIA,EAVJ,GAUvB8Y,EAVuB,KAUZC,EAVY,uBAWvB,CACLC,GAAIne,YAAcie,GAAWle,WAC7Bqe,MAAOpe,YAAcke,GAAcne,aAbP,2CAAH,sDAkBlBse,EAAgB,uCAAG,WAAOT,GAAP,qBAAAjd,EAAA,6DACxBkd,EAAKC,aAAgB,GAC3BF,EAAcxe,YAAkBwe,GAFF,SAGZC,EACfE,UAAU,CAAC,GAAD,OAAIH,EAAJ,kBACV5H,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,mBAAoBoR,MALpB,YAGxBhP,EAHwB,6CAOZA,EAPY,GAOrBmZ,EAPqB,uBAQrB,CACLA,MAAOte,YAAcse,GAAOve,aATF,2CAAH,sDAgChB4O,EAAc,uCAAG,WAAOiP,GAAP,mBAAAjd,EAAA,sEACLgd,EAAYC,GADP,cACtBhP,EADsB,gBAEEoP,EAAmBJ,GAFrB,cAEtBW,EAFsB,gBAGAF,EAAiBT,GAHjB,cAGtBY,EAHsB,yBAIrB1L,OAAOwG,OAAO1K,EAAU2P,EAAiBC,IAJpB,4CAAH,sDAiBdC,EAAgB,uCAAG,WAAOrd,EAASI,GAAhB,yBAAAb,EAAA,6DAExBkd,EAAKC,cAFmB,kBAIVD,EACfE,UAAU,CAAC,GAAD,OAAI3c,EAAJ,YAAeI,EAAf,gBACVwU,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,mBAAoBoR,MANtB,UAItBhP,EAJsB,SAOT5D,YAAuBH,EAASI,GAA3CmB,EAPoB,EAOpBA,QACJwC,EARwB,qCASNA,EATM,GASnB8D,EATmB,uBAUnB,CACLA,UAAWjJ,YAAciJ,GAAWlJ,WACpC4C,WAZwB,yDAgB5BG,QAAQC,IAAR,MAhB4B,0DAAH,wDA+BhBkT,EAAc,uCAAG,WAAO7U,EAASI,GAAhB,2BAAAb,EAAA,6DACtBkd,EAAKC,aAAgB,GADC,SAKpBzc,EAAcF,YAAeC,GALT,SAMRyc,EACfE,UAAU,CAAC,GAAD,OACN1c,EADM,YACSG,EADT,kBAENH,EAFM,YAESG,EAFT,wBAGNH,EAHM,YAGSG,EAHT,iBAKVwU,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,iBAAkBoR,MAZtB,YAMpBhP,EANoB,6CAcWA,EAdX,GAcjBuZ,EAdiB,KAcZC,EAdY,KAcFvI,EAdE,uBAejB,CACLsI,IAAK1e,YAAc0e,GAAK3e,WACxB4e,SAAU3e,YAAc2e,GAAU5e,WAClCqW,UAAWpW,YAAcoW,GAAWrW,aAlBd,yDAsB1B+C,QAAQC,IAAR,MAtB0B,0DAAH,wDAqCd6b,EAAiB,uCAAG,WAAOxd,EAASI,GAAhB,2BAAAb,EAAA,6DACzBkd,EAAKC,aAAgB,GADI,SAGvBzc,EAAcF,YAAeC,GAHN,SAIXyc,EACfE,UAAU,CAAC,GAAD,OACN1c,EADM,YACSG,EADT,kBAENH,EAFM,YAESG,EAFT,wBAGNH,EAHM,YAGSG,EAHT,iBAKVwU,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,iBAAkBoR,MAVnB,YAIvBhP,EAJuB,6CAYQA,EAZR,GAYpBuZ,EAZoB,KAYfC,EAZe,KAYLvI,EAZK,uBAapB,CACLsI,IAAK1e,YAAc0e,GAAK3e,WACxB4e,SAAU3e,YAAc2e,GAAU5e,WAClCqW,UAAWpW,YAAcoW,GAAWrW,aAhBX,yDAoB7B+C,QAAQC,IAAR,MApB6B,0DAAH,wDAsEjB8b,EAAiB,uCAAG,WAAOzd,EAASI,EAAaoc,GAA7B,yBAAAjd,EAAA,6DACzBkd,EAAKC,aAAgB,GAE3BF,EAAcxe,YAAkBwe,GAHD,SAKvBvc,EAAcF,YAAeC,GALN,SAMXyc,EACfE,UAAU,CAAC,GAAD,OACN1c,EADM,YACSG,EADT,YACwBoc,EADxB,wBAENvc,EAFM,YAESG,EAFT,YAEwBoc,EAFxB,iBAIV5H,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,oBAAqBoR,MAXtB,YAMvBhP,EANuB,8CAaGA,EAbH,GAapBwZ,EAboB,KAaVvI,EAbU,uBAcpB,CACLuI,SAAU3e,YAAc2e,GAAU5e,WAClCqW,UAAWpW,YAAcoW,GAAWrW,aAhBX,0DAoB7B+C,QAAQC,IAAR,MApB6B,0DAAH,0DAwBjB+b,EAAwB,uCAAG,WAAOlB,GAAP,yCAAAjd,EAAA,6DAChCkd,EAAKC,cACXF,EAAcxe,YAAkBwe,GAFM,SAGpBC,EACfE,UAAU,CAAC,GAAD,OACNH,EADM,4BAENA,EAFM,2BAGNA,EAHM,6BAINA,EAJM,0BAKNA,EALM,uBAMNA,EANM,uBAONA,EAPM,uBAQNA,EARM,uBASNA,EATM,uBAUNA,EAVM,uBAWNA,EAXM,kBAgBV5H,OAAM,SAAC7B,GAAD,OAASrR,QAAQC,IAAI,2BAA4BoR,MApBpB,YAGhChP,EAHgC,6CAqChCA,EArCgC,IAuBlC/D,EAvBkC,KAwBlC+J,EAxBkC,KAyBlC0D,EAzBkC,KA0BlCC,EA1BkC,KA2BlCiQ,EA3BkC,KA4BlCC,EA5BkC,KA6BlCC,EA7BkC,KA8BlCC,EA9BkC,KA+BlCC,EA/BkC,KAgClCC,EAhCkC,KAiClClQ,EAjCkC,wBAsC7B,CACL9N,QAASnB,YAAamB,GACtB+J,OAAQnL,YAAcmL,GAAQpL,WAC9B8O,SAAU5O,YAAa4O,GACvBC,MAAO7O,YAAa6O,GACpBiQ,GAAI9e,YAAa8e,GACjBC,KACAC,KACAC,GAAIjf,YAAaif,GACjBC,KACAC,KACAlQ,MAAOhP,YAAWgP,KAjDgB,2CAAH,uD,wIC3QxBvC,EAAgB,WAC3B,IAAI0S,EAAe,KACnB,OAAO,WACL,GAAqB,OAAjBA,EACF,OAAOA,EAET,IAAI3S,EACJ,QAA+Bd,IAA3B,YAAOC,OAAOC,UAIhB,MAAM,IAAI7K,MAAM,iCAGlB,OANEyL,EAAO,IAAIrN,IAAKwM,OAAOC,UAKzBuT,EAAe3S,EACRA,GAdkB,GAkBhB4S,EAAe,WAC1B,IAAMC,EAAkB,GACxB,OAAO,SAACne,GACN,GAAI0R,OAAOC,KAAKwM,GAAiBvM,SAAS5R,GACxC,OAAOme,EAAgBne,GAEzB0B,QAAQC,IAAR,2BACsB3B,EADtB,4CAGA,IAAMoe,EAAc3a,YAAoBzD,GAClCsL,EAAO,IAAIrN,IAAK,IAAIA,IAAKogB,UAAUC,aAAaF,IAEtD,OADAD,EAAgBne,GAAWsL,EACpBA,GAZiB,I,uiBClBtBiT,EAAiB,OAEVxF,EAAb,WACE,WAAY/Y,EAASwR,EAAiBgN,GAAa,oBACjDvZ,KAAKjF,QAAUA,EACfiF,KAAKuM,gBAAkBA,EAErBvM,KAAKqG,KADHkT,EACUN,YAAYle,GAEZuL,cAPlB,8CAUE,SAAWM,GAET,OADA5G,KAAK4G,eAAiBA,EACf5G,OAZX,qBAcE,SAAQ7E,GAEN,OADA6E,KAAK7E,YAAcA,EACZ6E,OAhBX,0DAkBE,WAAY2F,GAAZ,6BAAArL,EAAA,6DAAoBN,EAApB,+BAA2B,GAA3B,UACe,EAAAgG,KAAKsU,SAASkF,SAAQ7T,GAAtB,oBAAiC3L,IAAMyf,OADtD,wFAlBF,yHAsBE,WAAoB9T,GAApB,mCAAArL,EAAA,sDAA4BN,EAA5B,+BAAmC,GAAI4M,EAAvC,uBAGM8S,EAAM,EACDxf,EAAI,EAJf,YAIkBA,EAAI,IAJtB,2CAMkB,EAAA8F,KAAKsU,SAASkF,SAAQ7T,GAAtB,oBAAiC3L,IAAM2f,YAAY,CAC7DC,KAAMhT,IAPd,cAMM8S,EANN,OASMA,EAAM1c,SAAe,KAAN0c,GATrB,+DAI0Bxf,IAJ1B,8BAea,GAAPwf,IAAUA,EAAMJ,GAChBI,EAAMJ,IAAgBI,EAAMJ,GAhBlC,kBAiBSI,GAjBT,0DAtBF,2FA0CE,SAAuB5S,GACrB,IAAMsG,EAAOpN,KACb,OAAO,SAAS6Z,EAAoB3L,EAASC,GAC3Cf,EAAK/G,KAAKE,IAAIuT,sBAAsBhT,GAAI,SAACZ,EAAO6T,GAC1C7T,EACFiI,EAAOjI,GACc,OAAZ6T,EACTC,YAAW,kBAAMH,EAAoB3L,EAASC,KAAS,MAC3B,IAAnB4L,EAAQE,QACjBF,EAAQG,aAAe,qBACvB/L,EAAO4L,IAEP7L,EAAQ6L,SAtDlB,8DA2DE,WAAgBpU,EAAQ3L,EAAM4M,GAA9B,yBAAAtM,EAAA,sEAIgCuN,QAAQC,IAAI,CACxC9H,KAAKma,cAAcxU,EAAQ3L,EAAM4M,GACjC5G,KAAKqG,KAAKE,IAAI6T,gBANlB,0CAISV,EAJT,UAQMW,EAAQ,CACV,CACET,KAAMhT,EACN0T,GAAIta,KAAKuM,gBACTmN,IAAK1gB,IAAKC,MAAMshB,YAAYb,GAC5BthB,MAAOY,IAAKC,MAAMshB,YAAY,KAC9B1Z,MAAM,EAAAb,KAAKsU,SAASkF,SAAQ7T,GAAtB,oBAAiC3L,IAAMwgB,cAdnD,SAiBiBhV,OAAOC,SAASC,QAAQ,CACrCC,OAAQ,sBACR8U,OAAQJ,IAnBZ,cAiBMvT,EAjBN,iBAqBe,IAAIe,QAAQ7H,KAAK0a,uBAAuB5T,IArBvD,0FA3DF,kE,eCWM6T,EAAS,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,gBAAgB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,iBAAiB,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,wBAAwB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,4BAA4B,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,yBAAyB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,kBAAkB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,uBAAuB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,SAAS,KAAO,mBAAmB,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,iBAAiB,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,UAAU,CAAC,aAAe,aAAa,KAAO,aAAa,KAAO,cAAc,CAAC,aAAe,cAAc,KAAO,cAAc,KAAO,gBAAgB,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,WAAW,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAGrgUC,EAAb,kDACE,WAAY7f,EAASwR,EAAiBgN,GAAa,IAAD,8BAChD,cAAMxe,EAASwR,EAAiBgN,IAC3BjF,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAAS6G,EAAU,EAAKpO,iBAFV,EADpD,iFAME,sBAAAjS,EAAA,sEACe0F,KAAK6a,MAAM,UAD1B,wFANF,yHAUE,gCAAAvgB,EAAA,6DAEQwgB,EAAe3iB,YAAG,GAF1B,kBAIsB6H,KAAK6a,MAAM,kBAJjC,OAIU/b,EAJV,OAMI8L,EAAS,CACPmQ,gBAAiBphB,YAAcmF,EAAIic,iBACnCC,qBAAsB7iB,YAAG2G,EAAIkc,sBAC7BpY,UAAWjJ,YAAcmF,EAAI8D,WAC7BF,iBAAkB/I,YAAcmF,EAAI4D,kBACpCe,eAAgB9J,YAAcmF,EAAI2E,iBAXxC,gDAcImH,EAAS,CACPmQ,gBAAiBD,EACjBE,qBAAsBF,EACtBlY,UAAWkY,EACXrX,eAAgBqX,EAChBpY,iBAAkBoY,GAEpBre,QAAQC,IAAR,iCArBJ,iCAuBSkO,GAvBT,yDAVF,wHAoCE,gCAAAtQ,EAAA,6DAEQwgB,EAAe3iB,YAAG,GAF1B,kBAIsB6H,KAAK6a,MAAM,iBAJjC,OAIU/b,EAJV,OAMI8L,EAAS,CACPjI,WAAYhJ,YAAcmF,EAAI6D,YAC9B2G,SAAU3P,YAAcmF,EAAIwK,UAC5B5F,mBAAoB/J,YAAcmF,EAAI4E,oBACtCQ,sBAAuBvK,YAAcmF,EAAIoF,uBACzCO,0BAA2B9K,YAAcmF,EAAI2F,2BAC7CwW,gBAAiBthB,YAAcmF,EAAImc,iBACnCC,mBAAoBvhB,YAAcmF,EAAIoc,oBACtClY,uBAAwBrJ,YAAcmF,EAAIkE,wBAC1CmY,qBAAsBxhB,YAAcmF,EAAIqc,sBACxCC,qBAAsBzhB,YAAcmF,EAAIsc,sBACxCC,oBAAqB1hB,YAAcmF,EAAIuc,qBACvCC,oBAAqBnjB,YAAG2G,EAAIwc,sBAlBlC,gDAqBI1Q,EAAS,CACPjI,WAAYmY,EACZxR,SAAUwR,EACVpX,mBAAoBoX,EACpB5W,sBAAuB4W,EACvBrW,0BAA2BqW,EAC3BG,gBAAiBH,EACjBI,mBAAoBJ,EACpB9X,uBAAwB8X,EACxBK,qBAAsBL,EACtBM,qBAAsBN,EACtBO,oBAAqBP,EACrBQ,oBAAqBR,GAEvBre,QAAQC,IAAR,gCAnCJ,iCAqCSkO,GArCT,yDApCF,0FA4EE,SAAuB9D,GACrB,IAAMsG,EAAOpN,KACb,OAAO,SAAS6Z,EAAoB3L,EAASC,GAC3Cf,EAAK/G,KAAKE,IAAIuT,sBAAsBhT,GAAI,SAACZ,EAAO6T,GAC1C7T,EACFiI,EAAOjI,GACa,MAAX6T,EACTC,YAAW,kBAAMH,EAAoB3L,EAASC,KAAS,MAC3B,IAAnB4L,EAAQE,QACjBF,EAAQG,aAAe,qBACvB/L,EAAO4L,IAEP7L,EAAQ6L,SAxFlB,kEA6FE,WAAoBpU,EAAQ3L,EAAM4M,GAAlC,mBAAAtM,EAAA,sDAGMof,EAAM,EACDxf,EAAI,EAJf,YAIkBA,EAAI,IAJtB,2CAMkB,EAAA8F,KAAKsU,SAASkF,SAAQ7T,GAAtB,oBAAiC3L,IAAM2f,YAAY,CAC7DC,KAAMhT,IAPd,cAMM8S,EANN,OASMA,EAAM1c,SAAe,KAAN0c,GATrB,+DAI0Bxf,IAJ1B,8BAea,GAAPwf,IAAUA,EAAM,QAChBA,EAAM,SAAQA,EAAM,QAhB1B,kBAiBSA,GAjBT,0DA7FF,6HAiHE,WAAoB/T,GAApB,+CAAArL,EAAA,6DAA4BN,EAA5B,+BAAmC,GAAI4M,EAAvC,gCAGuB3I,YAAc+B,KAAKjF,QAASiF,KAAKuM,iBAHxD,cAGQ8I,EAHR,OAIMkG,EAAS,CAAClG,EAAO1L,UAAW0L,EAAO9W,MAAO8W,EAAO3M,EAAG2M,EAAO1M,EAAG0M,EAAOzM,GAJ3E,SAMgCf,QAAQC,IAAI,CACxC9H,KAAKma,cAAcxU,EAAnB,sBAA+B3L,GAASuhB,GAAS3U,GACjD5G,KAAKqG,KAAKE,IAAI6T,gBARlB,0CAMSV,EANT,KAMc8B,EANd,KAUE/e,QAAQC,IAAR,mBAAwB8e,EAAW,IAAnC,QAGInB,EAAQ,CACV,CACET,KAAMhT,EACN0T,GAAIta,KAAKuM,gBACTmN,IAAK1gB,IAAKC,MAAMshB,YAAYb,GAC5BthB,MAAOY,IAAKC,MAAMshB,YAAY,KAC9B1Z,MAAM,EAAAb,KAAKsU,SAASkF,SAAQ7T,GAAtB,oBAAiC3L,GAAjC,OAA0CuhB,IAAQf,cAnB9D,UAsBiBhV,OAAOC,SAASC,QAAQ,CACrCC,OAAQ,sBACR8U,OAAQJ,IAxBZ,eAsBMvT,EAtBN,iBA0Be,IAAIe,QAAQ7H,KAAK0a,uBAAuB5T,IA1BvD,0FAjHF,0HA8IE,oDAAAxM,EAAA,sEAEgB+D,YAAe2B,KAAKjF,QAASiF,KAAKuM,iBAFlD,cAEEhO,EAFF,yBAIkDyB,KAAKgI,iBAJvD,uBAIYtF,EAJZ,EAIYA,iBAAkBE,EAJ9B,EAI8BA,UAJ9B,UASc5C,KAAKsH,gBATnB,wBAMM3E,EANN,EAMMA,WACAK,EAPN,EAOMA,uBACAU,EARN,EAQMA,mBAGI+X,EAAQ,CACZ/Y,EACAnE,EACAoE,EACAC,EACAI,GAEEjJ,IAAmB,WAAnB,EAAuB0hB,IACzBvY,EAAc,IACd4M,EAAsB,MAEtBA,EAAsB/M,IAAoB,WAApB,EAAwB0Y,GAC9CvY,EAAcD,YAAmBjD,KAAKjF,QAAS+U,IAE3C4L,EAAQ,CACZhZ,EACAnE,EACAoE,EACAC,EACAc,GAGAiY,EADE5hB,IAAmB,WAAnB,EAAuB2hB,GACT,IAEAjZ,IAAsB,WAAtB,EAA0BiZ,GAnChD,kBAqCW,CACLnd,QACAoE,WAAYA,EAAWjJ,WACvBwJ,YAAaA,EACb4M,oBAAqBA,EACrBpN,iBAAkBA,EAAiBhJ,WACnCkJ,UAAWA,EAAUlJ,WACrBsJ,uBAAwBA,EAAuBtJ,WAC/CiiB,cAAeA,EACf9Y,gBAAiBa,EAAmBhK,aA9C1C,wCAiDI+C,QAAQC,IAAI,kCAAZ,MAjDJ,+DA9IF,wHAoME,WAAoBkK,EAAgB9B,GAApC,iBAAAxK,EAAA,6DAEEmC,QAAQC,IAAI,iBAFd,kBAKmBsD,KAAKwH,cAClB,+DACA,CAAC1C,GACD8B,GARN,OAKQE,EALR,OAUIhI,EAAM,CAAEoG,SAAS,EAAM6B,YAAaD,GAVxC,gDAYIrK,QAAQC,IAAI,QACZoC,EAAM,CAAEoG,SAAS,EAAOgB,MAAM,EAAD,IAbjC,iCAeSpH,GAfT,yDApMF,2HAqNE,WAAoBsK,GAApB,SAAA9O,EAAA,sEACe0F,KAAKqG,KAAKE,IAAIqV,SAASxS,GADtC,wFArNF,0HAwNE,WAAqByS,GAArB,2CAAAvhB,EAAA,sDAAgCkB,EAAhC,+BAAyC,GAAI4O,EAA7C,+BAAyD,EAAGkQ,EAA5D,+BAAiE,EAC3D3P,EAAS,GAKX7F,EADmB,OAAjB9E,KAAKjF,QACE,KAEA,KAEPqP,EAAYtF,EAASwV,IACvBxV,EAASwV,EAAKlQ,GAXlB,YAaSA,GAAakQ,GAbtB,iCAemBta,KAAKsU,SAASwH,cAAcD,EAAW,CACpDrgB,OAAQA,EACR4O,YACAE,QAASF,EAAYtF,IAlB3B,OAeQiX,EAfR,qBAoBkBA,GApBlB,IAoBI,2BAASC,EAAS,QAChBrR,EAAOsR,KAAKD,GArBlB,+BAuBI5R,GAAatF,EAAS,GACNA,EAASwV,IACvBxV,EAASwV,EAAKlQ,GAzBpB,gDA4BSO,GA5BT,iDAxNF,yHAsPE,WAAoBvB,GAApB,SAAA9O,EAAA,sEACe0F,KAAKqG,KAAKE,IAAIqV,SAASxS,GADtC,wFAtPF,kFAyPE,SAAc/H,EAAQ9C,EAAOoE,EAAY2G,GACvC,OAAOnR,YAAGkJ,GACPyB,MACAxK,MAAMiG,GACNjG,MAAMqK,GACNrK,MAAMgR,GACN5P,eA/PP,GAAmCoa,GCf7BoI,EAAa,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,mBAAmB,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,WAAW,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,YAAY,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,QAAQ,KAAO,WAAW,CAAC,KAAO,MAAM,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,UAAU,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,UAAU,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,qBAAqB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,MAAM,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,QAAQ,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,MAAM,KAAO,WAAW,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,iBAAiB,KAAO,WAAW,CAAC,KAAO,YAAY,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,SAAS,KAAO,WAAW,CAAC,KAAO,WAAW,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,KAAO,YAAY,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,gBAAgB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,SAAS,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,eAAe,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,WAAW,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,mBAAmB,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,KAAO,QAAQ,KAAO,UAAU,CAAC,KAAO,UAAU,KAAO,WAAW,SAAU,EAAM,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,aAAa,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,iBAAiB,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,SAAS,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,mBAAmB,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,WAAW,KAAO,YAAY,KAAO,sBAAsB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,iBAAiB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,QAAQ,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,GAAG,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,GAAG,KAAO,UAAU,KAAO,UAGhhOC,EAAb,kDACE,WAAYphB,EAASwR,EAAiBpR,EAAaoe,GAAa,IAAD,8BAC7D,cAAMxe,EAASwR,EAAiBgN,IAC3Bpe,YAAcA,EACnB,EAAKmZ,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBALsD,EADjE,qFAUE,WAAiB3F,GAAjB,eAAAtM,EAAA,sEACwB0F,KAAK6a,MAAM,YAAa,CAC5CjU,EACA5G,KAAK7E,cAHT,cACMihB,EADN,OAKEA,EAAYziB,YAAcyiB,GAL5B,kBAOSA,EAAUzX,GAAG,IAPtB,gDAVF,kHAoBE,WAAaiC,GAAb,SAAAtM,EAAA,sEACe0F,KAAKqc,UAChB,UACA,CAACrc,KAAK7E,YAAaN,KACnB+L,GAJJ,wFApBF,kHA4BE,sBAAAtM,EAAA,sEACe0F,KAAK6a,MAAM,UAD1B,wFA5BF,mHAgCE,sBAAAvgB,EAAA,sEACe0F,KAAK6a,MAAM,YAD1B,wFAhCF,mHAmCE,WAAeyB,GAAf,SAAAhiB,EAAA,sEACe0F,KAAK6a,MAAM,YAAa,CAACyB,IADxC,wFAnCF,mHAuCE,WAAcA,GAAd,qBAAAhiB,EAAA,sEACgCuN,QAAQC,IAAI,CACxC9H,KAAKuc,SAASD,GACdtc,KAAKwc,aAHT,0CACS1d,EADT,KACc0d,EADd,uBAKSrkB,YAAG2G,GAAM0d,IALlB,gDAvCF,4DAAoC1I,GCH9BoI,EAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,QAAQ,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,WAAW,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,OAAO,KAAO,WAAW,KAAO,SAAS,KAAO,iBAAiB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,mBAAmB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,OAAO,KAAO,UAAU,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,WAAW,KAAO,SAAS,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,cAAc,KAAO,WAAW,KAAO,oBAAoB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,SAAS,KAAO,SAAS,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,OAAO,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,sBAAsB,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,sBAAsB,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG5yNO,EAAb,kDACE,WAAY1hB,EAASwR,EAAiBpR,EAAaoe,GAAa,IAAD,8BAC7D,cAAMxe,EAASwR,EAAiBgN,IAC3Bpe,YAAcA,EACnB,EAAKmZ,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBALsD,EADjE,0FAUE,WAAsB3F,GAAtB,iBAAAtM,EAAA,6DAGMsQ,EAAS,GAHf,kBAKsB5K,KAAK6a,MAAM,uBAAwB,CAACjU,IAL1D,OAKU9H,EALV,OAOI8L,EAAS,CACPvJ,OAAQ1H,YAAcmF,EAAI,IAC1BkF,KAAMrK,YAAcmF,EAAI,IACxB4d,oBAAqB/iB,YAAcmF,EAAI,IACvCuF,OAAQ1K,YAAcmF,EAAI,IAC1B6d,oBAAqBxkB,YAAG2G,EAAI,KAZlC,gDAeI8L,EAAS,CACPvJ,OAAQlJ,YAAG,GACX6L,KAAM7L,YAAG,GACTukB,oBAAqBvkB,YAAG,GACxBkM,OAAQlM,YAAG,GACXwkB,oBAAqBxkB,YAAG,IAE1BsE,QAAQC,IAAR,kCAtBJ,iCAwBSkO,GAxBT,yDAVF,kHAqCE,WAAahE,GAAb,SAAAtM,EAAA,sEACe0F,KAAK6a,MAAM,SAAU,CAACjU,IADrC,wFArCF,4DAAoCkN,GCH9BoI,EAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,QAAQ,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,WAAW,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,QAAQ,KAAO,GAAG,KAAO,UAAU,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,aAG9uGU,EAAb,kDACE,WAAY7hB,EAASwR,EAAiBpR,EAAaoe,GAAa,IAAD,8BAC7D,cAAMxe,EAASwR,EAAiBgN,IAC3Bpe,YAAcA,EACnB,EAAKmZ,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBALsD,EADjE,kFAUE,WAAc3F,GAAd,eAAAtM,EAAA,kEAIcX,IAJd,SAIkCqG,KAAK6a,MAAM,YAAa,CAACjU,IAJ3D,0BAIQ9H,GAJR,gCAMSA,GANT,gDAVF,uHAmBE,4BAAAxE,EAAA,kEACcX,IADd,SACkCqG,KAAK6a,MAAM,eAD7C,0BACQ/b,GADR,gCAGSA,GAHT,gDAnBF,2DAAoCgV,G,QCF9B+I,EAAkB,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,WAAW,KAAO,OAAO,KAAO,aAAa,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,YAAY,KAAO,GAAG,KAAO,cAAc,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,WAAa,CAAC,CAAC,aAAe,SAAS,KAAO,MAAM,KAAO,UAAU,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,aAAe,2BAA2B,KAAO,QAAQ,KAAO,YAAY,KAAO,YAAY,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG/vCC,EAAb,WACE,WAAYvQ,EAAiB4M,GAAc,oBACzCnZ,KAAKmZ,YAAcA,EACnBnZ,KAAKuM,gBAAkBA,EACnBvM,KAAKmZ,aACPnZ,KAAK+c,QALX,yCAQE,WAEE/c,KAAKqG,KAAO,IAAIrN,IAAK,IAAIA,IAAKogB,UAAUC,aAAarZ,KAAKmZ,cAC1DnZ,KAAKsU,SAAW,IAAItU,KAAKqG,KAAKE,IAAIuN,SAChC+I,EACA7c,KAAKuM,mBAbX,sEAiBE,sBAAAjS,EAAA,yDACO0F,KAAKmZ,YADZ,gCAE6B1e,YAAmByc,eAFhD,OAEIlX,KAAKmZ,YAFT,OAGInZ,KAAK+c,QAHT,+BAKI/c,KAAKmZ,aALT,uCAMY/e,YAAuB4F,KAAKmZ,aANxC,wEAQ6B1e,YAAmByc,eARhD,QAQIlX,KAAKmZ,YART,OASInZ,KAAK+c,QATT,iDAjBF,oHA8BE,WAAgBC,GAAhB,SAAA1iB,EAAA,sEACQ0F,KAAKid,oBADb,uBAEejd,KAAKsU,SAASkF,QAAQ9B,UAAUsF,GAAUvD,OAFzD,wFA9BF,8DCHMyC,EAAe,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,WAAa,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,aAAe,2BAA2B,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,QAAQ,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,YAAY,KAAO,SAAS,KAAO,cAAc,KAAO,iBAAiB,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAGz1EgB,EAAb,WACE,WAAY3Q,EAAiB4M,GAAc,oBACzCnZ,KAAKmZ,YAAcA,EACnBnZ,KAAKuM,gBAAkBA,EACnBvM,KAAKmZ,aACPnZ,KAAK+c,QALX,4FAQE,sBAAAziB,EAAA,8DAEM0F,KAAKmZ,aAFX,qCAEiC/e,YAAuB4F,KAAKmZ,aAF7D,kEAI6B1e,YAAmByc,eAJhD,OAIIlX,KAAKmZ,YAJT,cAMEnZ,KAAK+c,QANP,iDARF,yEAgBE,WAEE/c,KAAKqG,KAAO4S,YAAY,MACxBjZ,KAAKsU,SAAW,IAAItU,KAAKqG,KAAKE,IAAIuN,SAChCoI,EACAlc,KAAKuM,mBArBX,8DAwBE,WAAgB3F,GAAhB,SAAAtM,EAAA,yDACO0F,KAAKsU,SADZ,gCAEUtU,KAAKid,oBAFf,uBAIejd,KAAKsU,SAASkF,QAAd,UAAmC5S,GAAgB6S,OAJlE,wFAxBF,8DCJMyC,EAA4G,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,aAGhlIiB,EAAb,kDACE,WAAYpiB,EAASwR,EAAiBgN,GAAa,IAAD,8BAChD,cAAMxe,EAASwR,EAAiBgN,IAC3BjF,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBAJyC,EADpD,qFAQE,WAAiB3F,GAAjB,uCAAAtM,EAAA,qEAAoCN,EAApC,iCAAoCA,EAApC,0BAIoBgG,KAAKma,cACrB,QADgB,CAEfvT,GAFe,OAEI5M,GACpB4M,GAPJ,cAIQ8S,EAJR,OASEjd,QAAQC,IAAIgd,GACRW,EAAQ,CACV,CACET,KAAMhT,EACN0T,GAAIta,KAAKuM,gBACTmN,IAAK1gB,IAAKC,MAAMshB,YAAYb,GAC5BthB,MAAOY,IAAKC,MAAMshB,YAAY,KAC9B1Z,MAAM,EAAAb,KAAKsU,SAASkF,SAAd,eACJ5S,GADI,OAED5M,IACHwgB,cAnBR,SAuBiBhV,OAAOC,SAASC,QAAQ,CACrCC,OAAQ,sBACR8U,OAAQJ,IAzBZ,cAuBMvT,EAvBN,iBA2Be,IAAIe,QAAQ7H,KAAK0a,uBAAuB5T,IA3BvD,0FARF,4DAAqCgN,GCH/BoI,EAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,YAAY,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,KAAK,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,KAAK,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,aAG3mFja,EAAb,kDACE,WAAYlH,EAASwR,EAAiBgN,GAAa,IAAD,8BAChD,cAAMxe,EAASwR,EAAiBgN,IAC3BjF,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBAJyC,EADpD,+EAQE,WAAW3F,GAAX,uCAAAtM,EAAA,qEAA8BN,EAA9B,iCAA8BA,EAA9B,0BAEoBgG,KAAKma,cACrB,QADgB,CAEfvT,GAFe,OAEI5M,GACpB4M,GALJ,cAEQ8S,EAFR,OAQMW,EAAQ,CACV,CACET,KAAMhT,EACN0T,GAAIta,KAAKuM,gBACTmN,IAAK1gB,IAAKC,MAAMshB,YAAYb,GAC5BthB,MAAOY,IAAKC,MAAMshB,YAAY,KAC9B1Z,MAAM,EAAAb,KAAKsU,SAASkF,SAAd,eACJ5S,GADI,OAED5M,IACHwgB,cAjBR,SAqBiBhV,OAAOC,SAASC,QAAQ,CACrCC,OAAQ,sBACR8U,OAAQJ,IAvBZ,cAqBMvT,EArBN,iBAyBe,IAAIe,QAAQ7H,KAAK0a,uBAAuB5T,IAzBvD,0FARF,4DAAuCgN,G,gBCHjCoI,EAAe,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,qBAAqB,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,iBAAiB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,iBAAiB,KAAO,YAAY,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,oBAAoB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,uBAAuB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,MAAM,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,iBAAiB,KAAO,WAAW,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,cAAc,KAAO,SAAS,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,MAAM,KAAO,YAAY,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,UAAU,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,wBAAwB,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,iBAAiB,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,mBAAmB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,cAAc,KAAO,SAAS,KAAO,MAAM,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,wBAAwB,KAAO,YAAY,KAAO,YAAY,KAAO,cAAc,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,qBAAqB,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,WAAW,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,YAAY,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,WAAW,QAAU,GAAG,gBAAkB,aAAa,KAAO,aAG1rMkB,EAAb,kDACE,WAAYriB,EAASwR,EAAiBgN,GAAa,IAAD,8BAChD,cAAMxe,EAASwR,EAAiBgN,IAC3BjF,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBAJyC,EADpD,uFAQE,WAAmB3F,EAAgB9B,GAAnC,eAAAxK,EAAA,6DACQN,EAAO,CAAC,IAAKV,YAAcwL,IADnC,SAEe9E,KAAKqc,UAAU,UAAWriB,EAAM4M,GAF/C,wFARF,6HAYE,WAAsBA,EAAgB9B,GAAtC,eAAAxK,EAAA,6DACQN,EAAO,CAAC,IAAKV,YAAcwL,IADnC,SAEe9E,KAAKqc,UAAU,WAAYriB,EAAM4M,GAFhD,wFAZF,0HAgBE,WAAmBA,GAAnB,eAAAtM,EAAA,sEAGoB0F,KAAK6a,MAAM,WAAY,CAAC,IAAKjU,IAHjD,YAGQ9H,EAHR,UAIaA,EAAIgG,OAJjB,yCAKWnL,YAAcmF,EAAIgG,SAL7B,cAOIrI,QAAQC,IAAI,4BAPhB,kBAQW,KARX,gDAhBF,4DAA6BoX,GCHvBoI,EAAe,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,YAAY,KAAO,kBAAkB,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,eAAe,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,kBAAkB,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,qBAAqB,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,SAAS,KAAO,UAAU,KAAO,UAAU,CAAC,aAAe,aAAa,KAAO,aAAa,KAAO,cAAc,CAAC,aAAe,aAAa,KAAO,cAAc,KAAO,eAAe,KAAO,aAAa,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,aAG7pHmB,EAAb,kDACE,WAAYtiB,EAASwR,EAAiBgN,GAAa,IAAD,8BAChD,cAAMxe,EAASwR,EAAiBgN,IAC3BjF,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBAJyC,EADpD,uFAQE,WAAmB3F,EAAgB9B,GAAnC,eAAAxK,EAAA,6DACQN,EAAO,CAACV,YAAcwL,IAD9B,SAEe9E,KAAKqc,UAAU,eAAgBriB,EAAM4M,GAFpD,wFARF,6HAaE,WAAsBA,EAAgB9B,GAAtC,eAAAxK,EAAA,6DACQN,EAAO,CAACV,YAAcwL,IAD9B,SAEe9E,KAAKqc,UAAU,kBAAmBriB,EAAM4M,GAFvD,wFAbF,2HAkBE,4BAAAtM,EAAA,sEACoB0F,KAAK6a,MAAM,iBAD/B,cACQ/b,EADR,yBAES,CACLmc,gBAAiBthB,YAAcmF,EAAImc,iBACnCC,mBAAoBvhB,YAAcmF,EAAIoc,sBAJ1C,gDAlBF,yHA0BE,4BAAA5gB,EAAA,sEACoB0F,KAAK6a,MAAM,kBAD/B,cACQ/b,EADR,yBAGS,CACL8D,UAAWjJ,YAAcmF,KAJ7B,gDA1BF,uHAkCE,4BAAAxE,EAAA,sEACoB0F,KAAK6a,MAAM,kBAD/B,YACQ/b,EADR,UAEaA,EAAI8D,UAFjB,yCAGWjJ,YAAcmF,EAAI8D,YAH7B,aAKQ,IAAIhI,MAAJ,mDACwCoF,KAAK7E,cANrD,gDAlCF,2DAA6B2Y,GCHvBoI,EAAa,CAAC,CAAC,OAAS,GAAG,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,KAAO,SAAS,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,QAAQ,KAAO,GAAG,KAAO,UAAU,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,OAAO,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,OAAO,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,KAAK,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,aAAa,KAAO,aAG33GoB,EAAb,kDACE,WAAYviB,EAASwR,EAAiBpR,EAAaoiB,GAAc,IAAD,8BAC9D,cAAMxiB,EAASwR,EAAiBgR,IAC3BpiB,YAAcA,EACnB,EAAKmZ,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBALuD,EADlE,qFAUE,WAAiB3F,GAAjB,eAAAtM,EAAA,sEACwB0F,KAAK6a,MAAM,YAAa,CAC5CjU,EACA5G,KAAK7E,cAHT,cACMihB,EADN,yBAKSziB,YAAcyiB,GAAWzX,GAAG,IALrC,gDAVF,kHAiBE,WAAaiC,GAAb,SAAAtM,EAAA,sEAEe0F,KAAKqc,UAChB,UACA,CAACrc,KAAK7E,YAAaN,KACnB+L,GALJ,wFAjBF,oHA0BE,sBAAAtM,EAAA,sEACe0F,KAAK6a,MAAM,YAD1B,wFA1BF,mHA8BE,WAAeyB,GAAf,SAAAhiB,EAAA,sEACe0F,KAAK6a,MAAM,YAAa,CAACyB,IADxC,wFA9BF,mHAkCE,WAAcA,GAAd,qBAAAhiB,EAAA,sEACgCuN,QAAQC,IAAI,CACxC9H,KAAKuc,SAASD,GACdtc,KAAKwc,aAHT,0CACS1d,EADT,KACc0d,EADd,uBAKSrkB,YAAG2G,GAAM0d,IALlB,gDAlCF,4DAAkC1I,GCH5BoI,EAAa,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,WAAW,CAAC,aAAe,OAAO,KAAO,iBAAiB,KAAO,SAAS,gBAAkB,aAAa,KAAO,eAAe,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,QAAQ,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,aAAe,UAAU,KAAO,UAAU,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,aAAa,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,SAAS,KAAO,SAAS,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,qBAAqB,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,SAAU,EAAM,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,mBAAmB,KAAO,SAAS,CAAC,OAAS,GAAG,KAAO,iBAAiB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,eAAe,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,QAAQ,KAAO,IAAI,KAAO,SAAS,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,IAAI,KAAO,YAAY,KAAO,QAAQ,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,aAAa,KAAO,YAAY,KAAO,SAAS,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,uBAAuB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,qBAAqB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,YAAY,KAAO,YAAY,KAAO,mBAAmB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,gBAAgB,KAAO,YAAY,KAAO,gBAAgB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,eAAe,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,OAAO,KAAO,GAAG,KAAO,SAAS,gBAAkB,OAAO,KAAO,aAG5lLsB,EAAb,kDACE,WAAYziB,EAASwR,EAAiBgR,GAAc,IAAD,8BACjD,cAAMxiB,EAASwR,EAAiBgR,IAC3BjJ,SAAW,IAAI,EAAKjO,KAAKE,IAAIuN,SAChCoI,EACA,EAAK3P,iBAJ0C,EADrD,iFAQE,WAAa3F,EAAgB9B,EAAQ2Y,GAArC,iBAAAnjB,EAAA,+DACiDkD,YAC7CigB,GADuBC,EAD3B,EACU9f,gBADV,kBAKSoC,KAAKqc,UACV,SACA,CAAC/iB,YAAcwL,GAAS2Y,EAAWC,GACnC9W,IARJ,gDARF,wHAoBE,WACEA,EACA9B,EACA6Y,EACAC,EACAC,EACAnV,EACAC,EACAC,GARF,SAAAtO,EAAA,+EAUS0F,KAAKqc,UACV,QACA,CAACvX,EAAQ6Y,EAAaC,EAAcC,EAAWnV,EAAGC,EAAGC,GACrDhC,IAbJ,gDApBF,0EAAsCkN,GCWzB2D,EAAmB,WAC9B,IAAMqG,EAAsB,GAC5B,OAAO,WAA8B,IAA7B1G,EAA4B,wDAC5BkF,EAAUnF,YAAmB7b,IAAQC,MAAO6b,GAC5C5K,EAAM8P,EACZ,GAAI7P,OAAOC,KAAKoR,GAAqBnR,SAASH,GAC5C,OAAOsR,EAAoBtR,GAE7B,IAAMuR,EAAW,IAAIjB,EAAiBR,GAEtC,OADAwB,EAAoBtR,GAAOuR,EACpBA,GAVqB,GAcnBC,EAA2B,WACtC,IAAMF,EAAsB,GAC5B,OAAO,WAA8B,IAA7B1G,EAA4B,wDAC5BkF,EAAUjF,YAA2B/b,IAAQC,MAAO6b,GACpD5K,EAAM8P,EACZ,GAAI7P,OAAOC,KAAKoR,GAAqBnR,SAASH,GAC5C,OAAOsR,EAAoBtR,GAE7B,IAAMuR,EAAW,IAAIb,EAAyBZ,GAE9C,OADAwB,EAAoBtR,GAAOuR,EACpBA,GAV6B,GAc3B7W,EAAwB,WACnC,IAAM+W,EAA2B,GACjC,OAAO,SAACljB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAKuR,GAA0BtR,SAASH,GACjD,OAAOyR,EAAyBzR,GAElC,IAAMtD,EAAgB,IAAI0R,EACxB7f,EACAwR,EACAgN,GAIF,OADA0E,EAAyBzR,GAAOtD,EACzBA,GAnB0B,GAuBxBrC,EAAiB,WAC5B,IAAMqX,EAAoB,GAC1B,OAAO,SAACnjB,EAASwR,EAAiBpR,GAAqC,IACjEqR,EADyC+M,EAAuB,wDAOpE,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,YAAoCpR,EAApC,eAEA,UAAMJ,EAAN,YAAiBwR,EAAjB,YAAoCpR,GAErCsR,OAAOC,KAAKwR,GAAmBvR,SAASH,GAC1C,OAAO0R,EAAkB1R,GAE3B,IAAM5Q,EAAS,IAAIugB,EACjBphB,EACAwR,EACApR,EACAoe,GAIF,OADA2E,EAAkB1R,GAAO5Q,EAClBA,GApBmB,GAwBjBwL,EAAiB,WAC5B,IAAM+W,EAAoB,GAC1B,OAAO,SAACpjB,EAASwR,EAAiBpR,GAAqC,IACjEqR,EADyC+M,EAAuB,wDAOpE,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,YAAoCpR,EAApC,eAEA,UAAMJ,EAAN,YAAiBwR,EAAjB,YAAoCpR,GAErCsR,OAAOC,KAAKyR,GAAmBxR,SAASH,GAC1C,OAAO2R,EAAkB3R,GAE3B,IAAM1Q,EAAS,IAAI2gB,EACjB1hB,EACAwR,EACApR,EACAoe,GAIF,OADA4E,EAAkB3R,GAAO1Q,EAClBA,GApBmB,GAwBjB8L,EAAiB,WAC5B,IAAMwW,EAAoB,GAC1B,OAAO,SAACrjB,EAASwR,EAAiBpR,GAAqC,IACjEqR,EADyC+M,EAAuB,wDAOpE,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,YAAoCpR,EAApC,eAEA,UAAMJ,EAAN,YAAiBwR,EAAjB,YAAoCpR,GAErCsR,OAAOC,KAAK0R,GAAmBzR,SAASH,GAC1C,OAAO4R,EAAkB5R,GAE3B,IAAMxQ,EAAS,IAAI4gB,EACjB7hB,EACAwR,EACApR,EACAoe,GAIF,OADA6E,EAAkB5R,GAAOxQ,EAClBA,GApBmB,GAwBjBgN,EAA0B,WACrC,IAAMqV,EAAoB,GAC1B,OAAO,SAACtjB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAK2R,GAAmB1R,SAASH,GAC1C,OAAO6R,EAAkB7R,GAE3B,IAAM8R,EAAS,IAAInB,EAAgBpiB,EAASwR,EAAiBgN,GAG7D,OADA8E,EAAkB7R,GAAO8R,EAClBA,GAf4B,GAmB1BzM,GAAkB,WAC7B,IAAM0M,EAAqB,GAC3B,OAAO,SAACxjB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAK6R,GAAoB5R,SAASH,GAC3C,OAAO+R,EAAmB/R,GAE5B,IAAMoF,EAAU,IAAIwL,EAAQriB,EAASwR,EAAiBgN,GAEtD,OADAgF,EAAmB/R,GAAOoF,EACnBA,GAdoB,GAkBlBkF,GAAkB,WAC7B,IAAM0H,EAAqB,GAC3B,OAAO,SAACzjB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAK8R,GAAoB7R,SAASH,GAC3C,OAAOgS,EAAmBhS,GAE5B,IAAMqK,EAAU,IAAIwG,EAAQtiB,EAASwR,EAAiBgN,GAEtD,OADAiF,EAAmBhS,GAAOqK,EACnBA,GAdoB,GA4ClB4H,IA1BiB,WAC5B,IAAMC,EAAoB,GADE,GA0BF,WAC1B,IAAMC,EAAkB,GACxB,OAAO,SAAC5jB,EAASwR,EAAiBpR,GAAqC,IACjEqR,EADyC+M,EAAuB,wDAOpE,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAKiS,GAAiBhS,SAASH,GACxC,OAAOmS,EAAgBnS,GAEzB,IAAMoS,EAAO,IAAItB,EACfviB,EACAwR,EACApR,EACAoe,GAGF,OADAoF,EAAgBnS,GAAOoS,EAChBA,GAnBiB,IAuBfC,GAAmB,WAC9B,IAAMC,EAAsB,GAC5B,OAAO,SAAC/jB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAKoS,GAAqBnS,SAASH,GAC5C,OAAOsS,EAAoBtS,GAE7B,IAAMuS,EAAW,IAAIvB,EAAiBziB,EAASwR,EAAiBgN,GAEhE,OADAuF,EAAoBtS,GAAOuS,EACpBA,GAdqB,GAkBnBC,GAA4B,WACvC,IAAMX,EAAoB,GAC1B,OAAO,SAACtjB,EAASwR,GAAyC,IACpDC,EAD4B+M,EAAuB,wDAOvD,GAJE/M,EADE+M,EACC,UAAMxe,EAAN,YAAiBwR,EAAjB,eAEA,UAAMxR,EAAN,YAAiBwR,GAElBE,OAAOC,KAAK2R,GAAmB1R,SAASH,GAC1C,OAAO6R,EAAkB7R,GAE3B,IAAM8R,EAAS,IAAIrc,EAAkBlH,EAASwR,EAAiBgN,GAG/D,OADA8E,EAAkB7R,GAAO8R,EAClBA,GAf8B,I,gCCrQzC,+LACO,SAASnmB,EAAGC,GAAkB,IAAXC,EAAU,uDAAH,EAC/B,OAAY,GAARA,EACKR,IAAUO,GACRC,EAAO,EACTR,IAAUO,GAAOE,MAAMT,IAAU,IAAM,IAAIU,OAAOF,KAElDR,IAAUO,GAAOI,IAAIX,IAAU,IAAM,IAAIU,QAAQF,KAIrD,SAAS4mB,EAAY7mB,GAC1B,OAAOD,EAAGC,GAAQ,IAGb,SAAS8mB,EAAc5C,GAC5B,OAAOA,GAAO,UAAOA,EAAQnL,OAAO,EAAE,GAAxB,cAAgCmL,EAAQnL,QAAQ,IAGzD,SAAS6B,EAAcvM,GAC5B,OAAOA,KAAaA,GAASlN,QAAQ,GAGhC,SAASic,EAAW2J,EAAKC,GAC9B,OAASD,KAAYC,I,gCC1BvB,kCACO,IAAM9jB,EAAW,WACtB,IAAI+jB,EAAW,MACf,MAAO,CACL9jB,IAAK,kBAAM8jB,GACXzS,IAAK,SAACxU,GACJ,GAAc,QAAVA,GAA6B,SAAVA,GAA8B,eAAVA,EAGzC,MAAM,IAAIwC,MAAM,0CAFhBykB,EAAWjnB,IANK,K","file":"static/js/main.28d4aa09.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getLpContractAddressConfig,\n  getAnnualBlockNumberConfig,\n  getDeriContractAddressConfig,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n// fetchWithTimeout\nconst fetchWithTimeout = (url, options, delay, onTimeout) => {\n  const timer = new Promise((resolve) => {\n    setTimeout(resolve, delay, {\n      timeout: true,\n    });\n  });\n  return Promise.race([fetch(url, options), timer]).then((response) => {\n    if (response.timeout) {\n      onTimeout();\n    }\n    return response;\n  });\n};\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    //const response = await fetchWithTimeout(url, {}, 1000);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    default:\n      throw new Error('The networkId is not valid');\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  console.log(\n    `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      if (symbol !== 'BTCUSD') {\n        return addSymbolParam('https://oracle3.deri.finance/price', symbol);\n      } else {\n        return addSymbolParam('https://oracle.deri.finance/price', symbol);\n      }\n    }\n    return 'https://oracle.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  try {\n    let url = getOracleUrl(chainId, poolAddress);\n    //console.log('oracle url', url);\n    const priceResponse = await fetch(url);\n    const priceResponseJson = await priceResponse.json();\n    return priceResponseJson;\n  } catch (err) {\n    throw new Error(`fetch oracle info error: ${err}`);\n  }\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  try {\n    const responseJson = await getOracleInfo(chainId, poolAddress)\n    return deriToNatural(responseJson.price).toString();\n  } catch (err) {\n    throw new Error(`fetch oracle price error: ${err}`);\n  }\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  let res = chainId;\n  if (typeof chainId === 'number') {\n    res = chainId.toString();\n  }\n  return res;\n};\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nexport default class Oracle {\n  symbol = 'BTCUSD'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n    this.initWebSocket()\n  }\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket('wss://api.deri.finance', {\n        transports: ['websocket'],\n        path: '/kline'\n      })\n      this.ws.on('connect',() => console.log('ws is already connected'));\n    }    \n  }\n\n  // loadIndex(symbol){\n  //   this.resume();\n  //   this.setSymbol(symbol)\n  //   this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 10})\n  // }\n\n  load(symbol,callback,uid){\n    this.uid = uid\n    this.resume();\n    this.setSymbol(symbol)\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol === this.symbol) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          callback(obj.close,obj)\n        }\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 1000})\n  }\n\n  unsubscribeBars(uid){\n    this.ws.emit('un_get_kline', {\n      symbol : this.symbol, 'time_type' : 'min', bars : 10\n    })\n  }\n\n\n  loadHistory(symbol,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        callback(history)\n      }\n    })\n    // this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 1000})\n  }\n\n  start(symbol){\n    this.initWebSocket();\n    this.loadIndex(symbol);\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol === this.symbol) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        this.setIndex(obj.close)\n      }\n    })\n  }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setPause(paused){\n    this.paused = paused\n  }\n\n\n}","export const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '5288684',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n      },\n      {\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n      },\n      {\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7475766',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n\n      },\n      {\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11949433',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11860070',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '2557914',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n      },\n    ];\n  }\n  // develop environment\n  // console.log('-- test ---')\n  return [\n    {\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\n      initialBlock: '9986356',\n      bTokenSymbol: 'USDT',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '3',\n    },\n    {\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\n      initialBlock: '7796681',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n    },\n    {\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\n      initialBlock: '8108552',\n      bTokenSymbol: 'BUSD',\n      symbol: 'COIN',\n      unit: 'COIN',\n      chainId: '97',\n    },\n    {\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\n      initialBlock: '3663327',\n      bTokenSymbol: 'HUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '256',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP ONSEN',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  } else {\n    return [\n      {\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '8309032',\n        chainId: '97',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  }\n};\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP ONSEN',\n        type: 'slp',\n      },\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n        type: 'clp',\n      },\n    ];\n  } else {\n    return [\n      {\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '8309032',\n        chainId: '97',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n        type: 'clp',\n      },\n    ];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress= (chainId) => {\n  const configs = [\n      {\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n        chainId: '56'\n      }\n    ]\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter\n  } else {\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\n  }\n\n}\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getAnnualBlockNumberConfig = () => ({\n  1: '2367422',\n  56: '10497304',\n  128: '10511369',\n  3: '2367422',\n  97: '10497304',\n  256: '10511369',\n});\n","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    return 'https://api.deri.finance';\n  } else {\n    // for test\n    return 'https://apitest.deri.finance';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import { bg, getAnnualBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) =>\n  bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) =>\n  ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  console.log(annualBlockCount);\n  const res = bg(fundingRate).times(annualBlockCount);\n  // if (chainId === \"1\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"56\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"128\") {\n  //   res = bg(fundingRate).times(10511369);\n  // } else if (chainId === \"3\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"97\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"256\") {\n  //   res = bg(fundingRate).times(10511369);\n  // }\n  return res;\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => volume.abs().times(price).times(multiplier).times(minInitialMarginRatio);\n\nexport const calculatePnl = (price, volume, multiplier, cost) =>\n  volume.times(price).times(multiplier).minus(cost);\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    //console.log('accounts', accounts);\n    // const chainId = parseInt(\n    //   await window.ethereum.request({ method: 'net_version' })\n    // );\n    const chainId = hexToNumber(\n      await window.ethereum.request({ method: 'eth_chainId' })\n    );\n    //console.log('chainId', chainId);\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","export {\n  DeriEnv,\n  getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  isUnlocked,\n  getEstimatedMargin,\n  getEstimatedFee,\n  getEstimatedFundingRate,\n  getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n} from './api/contractQueryApi';\nexport {\n  unlock,\n  //depositMargin,\n  //withdrawMargin,\n  mint,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport * from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\ngetSpecification2 as getSpecification,\ngetPositionInfo2 as getPositionInfo,\ngetLiquidityInfo2 as getLiquidityInfo,\ngetWalletBalance2 as getWalletBalance,\ngetFundingRate2 as getFundingRate,\ngetLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\ngetDeriBalance2 as getDeriBalance,\ngetTradeHistory2 as getTradeHistory,\n} from './api/restApi';\n\nexport {\n  tradeWithMargin2 as tradeWithMargin,\n  closePosition2 as closePosition,\n  depositMargin2 as depositMargin,\n  withdrawMargin2 as withdrawMargin,\n  addLiquidity2 as addLiquidity,\n  removeLiquidity2 as removeLiquidity,\n} from './apiV2/contractTransactionApiV2'\n\nexport * from './apiV2/lpPoolApi';\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import {\n  getPoolContractAddress,\n  naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  console.log('hit');\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { getUserWormholeSignature } from './contractQueryApi';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 2000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from '../api/contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from '../api/slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from '../api/clpPoolApi'\nimport { wsInstance } from '../api/apiGlobals'\nimport { getRestServerConfig, DeriEnv, getRedisWorkerQueneConfig } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve, reject) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  const symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n\n  return {\n    volume: volume.toString(),\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n    margin: margin.toString(),\n    marginHeld: calculateMarginHeld(\n      price,\n      volume,\n      multiplier,\n      minInitialMarginRatio\n    ).toString(),\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n    liquidationPrice: calculateLiquidationPrice(\n      volume,\n      margin,\n      cost,\n      multiplier,\n      minMaintenanceMarginRatio\n    ).toString(),\n  };\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.isUnlocked(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","// eslint-disable-next-line no-extend-native\nNumber.prototype.toFixed = function(len){\n  if(len>20 || len<0){\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\n  }\n  // .123转为0.123\n  var number = Number(this);\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\n      return number.toString();\n  }\n  if (typeof (len) == 'undefined' || len == 0) {\n      return (Math.round(number)).toString();\n  }\n  var result = number.toString(),\n      numberArr = result.split('.');\n\n  if(numberArr.length<2){\n      //整数的情况\n      return padNum(result);\n  }\n  var intNum = numberArr[0], //整数部分\n      deciNum = numberArr[1],//小数部分\n      lastNum = deciNum.substr(len, 1);//最后一个数字\n  \n  if(deciNum.length == len){\n      //需要截取的长度等于当前长度\n      return result;\n  }\n  if(deciNum.length < len){\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\n      return padNum(result)\n  }\n  //需要截取的长度小于当前长度，需要判断最后一位数字\n  result = intNum + '.' + deciNum.substr(0, len);\n  if(parseInt(lastNum, 10)>=5){\n      //最后一位数字大于5，要进位\n      var times = Math.pow(10, len); //需要放大的倍数\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\n      changedInt++;//整数进位\n      changedInt /= times;//整数转为小数，注：有可能还是整数\n      result = padNum(changedInt+'');\n  }\n  return result;\n  //对数字末尾加0\n  function padNum(num){\n      var dotPos = num.indexOf('.');\n      if(dotPos === -1){\n          //整数的情况\n          num += '.';\n          for(var i = 0;i<len;i++){\n              num += '0';\n          }\n          return num;\n      } else {\n          //小数的情况\n          var need = len - (num.length - dotPos - 1);\n          for(var j = 0;j<need;j++){\n              num += '0';\n          }\n          return num;\n      }\n  }\n}","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App() {\n  \n  if(isBrowser){\n    return <DesktopApp/>\n  }\n  if(isMobile){\n    return <MobileApp/>\n  }\n}\n\nexport default App;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\nconst walletKey = 'mm_wallet_key'\nconst env = DeriEnv.get();\nconst {chainInfo} = config[env]\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      loadWalletBalance : action,\n      connect : action      \n    })\n  }\n\n  isConnected = () => !!this.detail.account;\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);        \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n    }\n    this.detail = detail;\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  remove = () => {\n    this.detail = null;\n    sessionStorage.removeItem(walletKey);\n    window.location.reload();\n  }\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action } from \"mobx\"\nimport { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n   // contract info\n   info = {}\n \n   constructor(){\n     makeAutoObservable(this,{\n        info : observable,\n        setInfo : action,\n       }\n     )\n   }\n\n   async load(wallet,spec,callback){\n    const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account)\n    if(position){\n      this.setInfo(position);\n      if(callback){\n        callback(position)\n      }\n    }\n    this.start(wallet,spec,callback)\n    return position;\n   }\n\n   start(wallet,spec,callback){\n     if(!this.interval){\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)\n     }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(){\n     \n   }\n\n   setInfo(info){\n     this.info = info;\n   }\n\n\n \n}","import { makeAutoObservable, observable, action, runInAction } from \"mobx\";\nimport axios from \"axios\";\nimport { DeriEnv,deriToNatural } from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\n\nconst oracleConfig = config[DeriEnv.get()]['oracle']\n\nconst CancelToken = axios.CancelToken;\n\nexport default class IndexPrice {\n  index = 0.00\n  source = CancelToken.source();\n  cancel = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      setIndex : action,\n      setCancel : action,\n      setSource : action\n    })\n  }\n\n\n  async loadIndex(symbol) {\n    if(symbol){\n      const url = oracleConfig[symbol.toUpperCase()]\n      const res = await axios.get(url,{ \n        params : {\n          symbol : symbol\n        },\n        cancelToken: this.source.token,\n      })\n      if(res && res.data && this.cancel === false){        \n        this.setIndex(deriToNatural(res.data.price).toFixed(2))\n      }\n    }     \n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setCancel(cancel){\n    this.cancel = cancel\n  }\n\n  setSource(source){\n    this.source = source\n  }\n\n  start(symbol){\n    if(!this.inteval) {\n      this.setCancel(false);\n      this.setSource(CancelToken.source());\n      this.inteval = setInterval(() => this.loadIndex(symbol),1000)\n    }\n  }\n\n\n  pause() {\n    this.setCancel(true);\n    this.source.cancel();\n    clearInterval(this.inteval)\n    this.inteval = null;\n  }\n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n\n  async load(wallet,config){\n    if(!this.info || (this.info && config.symbol !== this.info.symbol)){\n      const info = await getSpecification(wallet.detail.chainid,config.pool)\n      this.setInfo(info);\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info;\n  }\n\n}","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  async load(){\n    const configs = await getContractAddressConfig(DeriEnv.get())\n    this.setAll(configs)\n    return configs;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","import { observable, action, computed, makeObservable, runInAction } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport Chain from \"./Config\";\nimport Config from \"./Config\";\nimport { eqInNumber } from \"../utils/utils\";\nimport { getEstimatedFundingRate,getLiquidityUsed, getEstimatedLiquidityUsed, getEstimatedFee } from \"../lib/web3js/indexV2\";\nimport { fromPromise } from \"mobx-utils\";\nimport { computedAsync, promisedComputed } from \"computed-async-mobx\";\nimport { getFundingRate } from \"../lib/web3js/api/contractQueryApi\";\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  wallet = null;\n  configs = [] \n  config = null;\n  fundingRate = '--' \n  index = null\n  volume = ''\n  paused = false\n  margin = ''\n  position = {}\n  contract = {}\n  fundingRate = {}\n  userSelectedDirection = 'long'\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      margin : observable,\n      fundingRate : observable,\n      position : observable,\n      contract : observable,\n      paused : observable,\n      userSelectedDirection : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setFundingRate : action,\n      setPaused : action,\n      amount : computed,\n      // effect : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet){\n    if(!this.wallet || wallet.detail.account !== this.wallet.detail.account){\n      this.setWallet(wallet);\n      //配置信息，如chainId、pool address、symbol、baseToken等\n      const all = await this.configInfo.load();\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      this.setConfig(all.find(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      this.onConfigChange(this.wallet,this.config)\n    }\n  }\n\n  async switch(symbol){\n    const cur = this.configs.find(config => config.symbol === symbol)\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.onConfigChange(this.wallet,cur);      \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async onConfigChange(wallet,config){\n     //position\n     const position = await this.positionInfo.load(wallet,config,position => {\n        this.setPosition(position);\n     })\n     this.setPosition(position);\n     //index\n     this.oracle.load(this.config.symbol,index => {\n      this.setIndex(index)\n     })\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)\n     this.setContract(contract)\n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     this.setFundingRate(fundingRate)\n  }\n\n  async refresh(){\n    const position = await this.positionInfo.load(this.wallet,this.config);\n    this.setPosition(position)\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    this.setVolume('')\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume();\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    this.position = position\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setMargin(margin){\n    this.margin = margin\n    if(this.contract){\n      const volume = (+margin) / ((+this.index) * (+this.contract.multiplier) * (+this.contract.minInitialMarginRatio))      \n      if(!isNaN(volume)){\n        this.setVolume(Math.abs(volume))\n        console.log('volume ',volume)\n      }\n    }\n  }\n\n  get volumeDisplay(){\n    if(this.volume === '' || isNaN(this.volume)) {\n      return '';\n    } else if(this.margin !== '') {\n        if((+this.volume) > Math.abs(+this.position.volume)) {\n          const result = parseInt(Math.abs(this.volume) - Math.abs(this.position.volume))\n          return result\n        } else {\n          const result = parseInt(Math.abs(this.position.volume) - Math.abs(this.volume));          \n          return result\n        }\n    } else {\n      return this.volume\n    }\n  }\n\n  \n  //计算available balance、contract value、\n  get amount(){\n    if(this.index && this.position && this.contract && this.volume !== ''){\n      //合同价值\n      let curVolume = Math.abs(this.volume);\n      //如果不是通过marge 算出来的volume\n      if(this.margin === '') {       \n        if(this.userSelectedDirection === 'long') {\n          if((+this.position.volume) > 0) {\n            curVolume = curVolume + (+this.position.volume)\n          } else {\n            curVolume = Math.abs(this.position.volume) - curVolume\n          }         \n        } else {\n          if((+this.position.volume) > 0){\n            curVolume =  (+this.position.volume) - curVolume\n          } else {\n            curVolume = Math.abs(this.position.volume) + (+curVolume)\n          }\n        }\n      }\n      const contractValue = Math.abs(curVolume) * this.index * this.contract.multiplier\n      const dynBalance = (+this.position.margin) + (+this.position.unrealizedPnl)\n      const margin = contractValue * this.contract.minInitialMarginRatio\n      const leverage = (+contractValue / +dynBalance).toFixed(1);\n      const balance = ((+dynBalance) - (+margin)).toFixed(2)\n      const available = balance > 0 ? balance : 0\n      const exchanged = contractValue / this.index\n      return {\n        dynBalance, //动态余额\n        margin,         //存入保证金\n        available,      //可用余额\n        exchanged,      //换算的值\n        leverage,        //杠杆\n      }\n    } else if(this.position && this.position.margin){\n      const dynBalance = ((+this.position.margin) + (+this.position.unrealizedPnl)).toFixed(2)\n      const margin = (+this.position.marginHeld).toFixed(2)\n      const available = ((+dynBalance) - (+margin)).toFixed(2)\n      return {\n        dynBalance,\n        margin,\n        available,\n      }\n    }\n    return {}\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(wallet && config){    \n      const res = await getFundingRate(wallet.detail.chainId,config.pool)\n      return res;\n    }\n  }\n\n  get fundingRateTip(){\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \n    }\n    return ''\n  }\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StrictMode,BrowserRouter ,HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\n//note dont remove zhe line\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\nimport IndexPrice from './model/IndexPrice';\nimport Position from './model/Position';\nimport Oracle from './model/Oracle';\nimport OrderLine from './model/MboxExample';\nimport { autorun, runInAction } from 'mobx';\nimport Trading from './model/Trading';\n\nconst wallet = new Wallet();\n// const indexPrice = new IndexPrice();\n// const position = new Position();\n// const oracle = new Oracle();\n\n// const order = new OrderLine(0)\nconst trading = new Trading()\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} >\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// window.trading = trading;\n// window.wallet = wallet\n// trading.init(wallet);\n// runInAction(() => {\n//   console.log(trading.amount)\n// })\n\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","export const getDBProviderUrlsConfig = () => [\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n","import { databaseFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getSlpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getClpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseFactory();\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return (chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    console.log(\n      `==== web3Factory(${chainId}), please caution the access limits ===`\n    );\n    const providerUrl = getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    if (isProvider) {\n      this.web3 = web3Factory(chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    return await this.contract.methods[method](...args).call();\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    //const gas = await this._estimatedGas(method, args);\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, args, accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (this.chainId === '56') {\n      amount = 1999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    //console.log(allowance.toString());\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  // for slp pool use\n  // async balanceOf(poolAddress) {\n  //   //const res = await this._call('balanceOf', [poolAddress])\n  //   let result\n  //   const [res, decimals] = await Promise.all([\n  //     this._balance(this.poolAddress),\n  //     this.decimals(),\n  //   ])\n  //   result = bg(res, -decimals)\n  //   return result\n  // }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async getPositionInfo(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async balance(accountAddress) {\n    //console.log('balance', this.chainId, this.contractAddress, accountAddress)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      DB_CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    await this.updateProviderUrl();\n    return await this.contract.methods.getValues(keyArray).call();\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport { web3Factory } from '../factory/web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  async updateProviderUrl() {\n    if (\n      !(this.providerUrl && (await checkHttpServerIsAlive(this.providerUrl)))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n    }\n    this._init();\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = web3Factory('97');\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async signature(accountAddress) {\n    if (!this.contract) {\n      await this.updateProviderUrl();\n    }\n    return await this.contract.methods['signature'](accountAddress).call();\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI['abi'],\n      this.contractAddress\n    );\n  }\n  async mintDToken(accountAddress, ...args) {\n    //return this._transact('claim', args)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async mint(accountAddress, ...args) {\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    //console.log('res', res);\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    //console.log('toWormholeAddress', toWormholeAddress)\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\nimport { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const lpPoolFactory = (function () {\n  const lpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(lpPoolInstanceMap).includes(key)) {\n      return lpPoolInstanceMap[key];\n    } else {\n      let lpPool;\n      const { type } = getLpContractAddress(chainId, contractAddress);\n      console.log(`lp type: ${type}`);\n      if (type === 'slp') {\n        lpPool = new SlpPool(chainId, contractAddress, isProvider);\n      } else if (type === 'clp') {\n        lpPool = new ClpPool(chainId, contractAddress, isProvider);\n      }\n      lpPoolInstanceMap[key] = lpPool;\n      return lpPool;\n    }\n  };\n})();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","\n\nimport BigNumber from 'bignumber.js'\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n"],"sourceRoot":""}